
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Project
 * 
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>
/**
 * Model Task
 * 
 */
export type Task = $Result.DefaultSelection<Prisma.$TaskPayload>
/**
 * Model Resource
 * 
 */
export type Resource = $Result.DefaultSelection<Prisma.$ResourcePayload>
/**
 * Model ResourceAllocations
 * 
 */
export type ResourceAllocations = $Result.DefaultSelection<Prisma.$ResourceAllocationsPayload>
/**
 * Model Reports
 * 
 */
export type Reports = $Result.DefaultSelection<Prisma.$ReportsPayload>
/**
 * Model CostEstimations
 * 
 */
export type CostEstimations = $Result.DefaultSelection<Prisma.$CostEstimationsPayload>
/**
 * Model DurationEstimations
 * 
 */
export type DurationEstimations = $Result.DefaultSelection<Prisma.$DurationEstimationsPayload>
/**
 * Model Otp
 * 
 */
export type Otp = $Result.DefaultSelection<Prisma.$OtpPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs>;

  /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.task.findMany()
    * ```
    */
  get task(): Prisma.TaskDelegate<ExtArgs>;

  /**
   * `prisma.resource`: Exposes CRUD operations for the **Resource** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Resources
    * const resources = await prisma.resource.findMany()
    * ```
    */
  get resource(): Prisma.ResourceDelegate<ExtArgs>;

  /**
   * `prisma.resourceAllocations`: Exposes CRUD operations for the **ResourceAllocations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ResourceAllocations
    * const resourceAllocations = await prisma.resourceAllocations.findMany()
    * ```
    */
  get resourceAllocations(): Prisma.ResourceAllocationsDelegate<ExtArgs>;

  /**
   * `prisma.reports`: Exposes CRUD operations for the **Reports** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reports
    * const reports = await prisma.reports.findMany()
    * ```
    */
  get reports(): Prisma.ReportsDelegate<ExtArgs>;

  /**
   * `prisma.costEstimations`: Exposes CRUD operations for the **CostEstimations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CostEstimations
    * const costEstimations = await prisma.costEstimations.findMany()
    * ```
    */
  get costEstimations(): Prisma.CostEstimationsDelegate<ExtArgs>;

  /**
   * `prisma.durationEstimations`: Exposes CRUD operations for the **DurationEstimations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DurationEstimations
    * const durationEstimations = await prisma.durationEstimations.findMany()
    * ```
    */
  get durationEstimations(): Prisma.DurationEstimationsDelegate<ExtArgs>;

  /**
   * `prisma.otp`: Exposes CRUD operations for the **Otp** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Otps
    * const otps = await prisma.otp.findMany()
    * ```
    */
  get otp(): Prisma.OtpDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Project: 'Project',
    Task: 'Task',
    Resource: 'Resource',
    ResourceAllocations: 'ResourceAllocations',
    Reports: 'Reports',
    CostEstimations: 'CostEstimations',
    DurationEstimations: 'DurationEstimations',
    Otp: 'Otp'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "project" | "task" | "resource" | "resourceAllocations" | "reports" | "costEstimations" | "durationEstimations" | "otp"
      txIsolationLevel: never
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UserFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.UserAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>
        fields: Prisma.ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ProjectFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ProjectAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      Task: {
        payload: Prisma.$TaskPayload<ExtArgs>
        fields: Prisma.TaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findFirst: {
            args: Prisma.TaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findMany: {
            args: Prisma.TaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          create: {
            args: Prisma.TaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          createMany: {
            args: Prisma.TaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          update: {
            args: Prisma.TaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          deleteMany: {
            args: Prisma.TaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          aggregate: {
            args: Prisma.TaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTask>
          }
          groupBy: {
            args: Prisma.TaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.TaskFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.TaskAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.TaskCountArgs<ExtArgs>
            result: $Utils.Optional<TaskCountAggregateOutputType> | number
          }
        }
      }
      Resource: {
        payload: Prisma.$ResourcePayload<ExtArgs>
        fields: Prisma.ResourceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResourceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourcePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResourceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourcePayload>
          }
          findFirst: {
            args: Prisma.ResourceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourcePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResourceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourcePayload>
          }
          findMany: {
            args: Prisma.ResourceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourcePayload>[]
          }
          create: {
            args: Prisma.ResourceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourcePayload>
          }
          createMany: {
            args: Prisma.ResourceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ResourceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourcePayload>
          }
          update: {
            args: Prisma.ResourceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourcePayload>
          }
          deleteMany: {
            args: Prisma.ResourceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ResourceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ResourceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourcePayload>
          }
          aggregate: {
            args: Prisma.ResourceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateResource>
          }
          groupBy: {
            args: Prisma.ResourceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ResourceGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ResourceFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ResourceAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ResourceCountArgs<ExtArgs>
            result: $Utils.Optional<ResourceCountAggregateOutputType> | number
          }
        }
      }
      ResourceAllocations: {
        payload: Prisma.$ResourceAllocationsPayload<ExtArgs>
        fields: Prisma.ResourceAllocationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResourceAllocationsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourceAllocationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResourceAllocationsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourceAllocationsPayload>
          }
          findFirst: {
            args: Prisma.ResourceAllocationsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourceAllocationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResourceAllocationsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourceAllocationsPayload>
          }
          findMany: {
            args: Prisma.ResourceAllocationsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourceAllocationsPayload>[]
          }
          create: {
            args: Prisma.ResourceAllocationsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourceAllocationsPayload>
          }
          createMany: {
            args: Prisma.ResourceAllocationsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ResourceAllocationsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourceAllocationsPayload>
          }
          update: {
            args: Prisma.ResourceAllocationsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourceAllocationsPayload>
          }
          deleteMany: {
            args: Prisma.ResourceAllocationsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ResourceAllocationsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ResourceAllocationsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResourceAllocationsPayload>
          }
          aggregate: {
            args: Prisma.ResourceAllocationsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateResourceAllocations>
          }
          groupBy: {
            args: Prisma.ResourceAllocationsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ResourceAllocationsGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ResourceAllocationsFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ResourceAllocationsAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ResourceAllocationsCountArgs<ExtArgs>
            result: $Utils.Optional<ResourceAllocationsCountAggregateOutputType> | number
          }
        }
      }
      Reports: {
        payload: Prisma.$ReportsPayload<ExtArgs>
        fields: Prisma.ReportsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportsPayload>
          }
          findFirst: {
            args: Prisma.ReportsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportsPayload>
          }
          findMany: {
            args: Prisma.ReportsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportsPayload>[]
          }
          create: {
            args: Prisma.ReportsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportsPayload>
          }
          createMany: {
            args: Prisma.ReportsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ReportsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportsPayload>
          }
          update: {
            args: Prisma.ReportsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportsPayload>
          }
          deleteMany: {
            args: Prisma.ReportsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReportsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportsPayload>
          }
          aggregate: {
            args: Prisma.ReportsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReports>
          }
          groupBy: {
            args: Prisma.ReportsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportsGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ReportsFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ReportsAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ReportsCountArgs<ExtArgs>
            result: $Utils.Optional<ReportsCountAggregateOutputType> | number
          }
        }
      }
      CostEstimations: {
        payload: Prisma.$CostEstimationsPayload<ExtArgs>
        fields: Prisma.CostEstimationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CostEstimationsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CostEstimationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CostEstimationsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CostEstimationsPayload>
          }
          findFirst: {
            args: Prisma.CostEstimationsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CostEstimationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CostEstimationsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CostEstimationsPayload>
          }
          findMany: {
            args: Prisma.CostEstimationsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CostEstimationsPayload>[]
          }
          create: {
            args: Prisma.CostEstimationsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CostEstimationsPayload>
          }
          createMany: {
            args: Prisma.CostEstimationsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CostEstimationsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CostEstimationsPayload>
          }
          update: {
            args: Prisma.CostEstimationsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CostEstimationsPayload>
          }
          deleteMany: {
            args: Prisma.CostEstimationsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CostEstimationsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CostEstimationsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CostEstimationsPayload>
          }
          aggregate: {
            args: Prisma.CostEstimationsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCostEstimations>
          }
          groupBy: {
            args: Prisma.CostEstimationsGroupByArgs<ExtArgs>
            result: $Utils.Optional<CostEstimationsGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.CostEstimationsFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.CostEstimationsAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.CostEstimationsCountArgs<ExtArgs>
            result: $Utils.Optional<CostEstimationsCountAggregateOutputType> | number
          }
        }
      }
      DurationEstimations: {
        payload: Prisma.$DurationEstimationsPayload<ExtArgs>
        fields: Prisma.DurationEstimationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DurationEstimationsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DurationEstimationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DurationEstimationsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DurationEstimationsPayload>
          }
          findFirst: {
            args: Prisma.DurationEstimationsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DurationEstimationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DurationEstimationsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DurationEstimationsPayload>
          }
          findMany: {
            args: Prisma.DurationEstimationsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DurationEstimationsPayload>[]
          }
          create: {
            args: Prisma.DurationEstimationsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DurationEstimationsPayload>
          }
          createMany: {
            args: Prisma.DurationEstimationsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DurationEstimationsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DurationEstimationsPayload>
          }
          update: {
            args: Prisma.DurationEstimationsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DurationEstimationsPayload>
          }
          deleteMany: {
            args: Prisma.DurationEstimationsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DurationEstimationsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DurationEstimationsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DurationEstimationsPayload>
          }
          aggregate: {
            args: Prisma.DurationEstimationsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDurationEstimations>
          }
          groupBy: {
            args: Prisma.DurationEstimationsGroupByArgs<ExtArgs>
            result: $Utils.Optional<DurationEstimationsGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.DurationEstimationsFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.DurationEstimationsAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.DurationEstimationsCountArgs<ExtArgs>
            result: $Utils.Optional<DurationEstimationsCountAggregateOutputType> | number
          }
        }
      }
      Otp: {
        payload: Prisma.$OtpPayload<ExtArgs>
        fields: Prisma.OtpFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OtpFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OtpFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>
          }
          findFirst: {
            args: Prisma.OtpFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OtpFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>
          }
          findMany: {
            args: Prisma.OtpFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>[]
          }
          create: {
            args: Prisma.OtpCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>
          }
          createMany: {
            args: Prisma.OtpCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.OtpDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>
          }
          update: {
            args: Prisma.OtpUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>
          }
          deleteMany: {
            args: Prisma.OtpDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OtpUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OtpUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>
          }
          aggregate: {
            args: Prisma.OtpAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOtp>
          }
          groupBy: {
            args: Prisma.OtpGroupByArgs<ExtArgs>
            result: $Utils.Optional<OtpGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.OtpFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.OtpAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.OtpCountArgs<ExtArgs>
            result: $Utils.Optional<OtpCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    projects: number
    reports: number
    otps: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projects?: boolean | UserCountOutputTypeCountProjectsArgs
    reports?: boolean | UserCountOutputTypeCountReportsArgs
    otps?: boolean | UserCountOutputTypeCountOtpsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOtpsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OtpWhereInput
  }


  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    tasks: number
    ResourceAllocations: number
    CostEstimations: number
    DurationEstimations: number
  }

  export type ProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tasks?: boolean | ProjectCountOutputTypeCountTasksArgs
    ResourceAllocations?: boolean | ProjectCountOutputTypeCountResourceAllocationsArgs
    CostEstimations?: boolean | ProjectCountOutputTypeCountCostEstimationsArgs
    DurationEstimations?: boolean | ProjectCountOutputTypeCountDurationEstimationsArgs
  }

  // Custom InputTypes
  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountResourceAllocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResourceAllocationsWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountCostEstimationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CostEstimationsWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountDurationEstimationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DurationEstimationsWhereInput
  }


  /**
   * Count Type TaskCountOutputType
   */

  export type TaskCountOutputType = {
    ResourceAllocations: number
  }

  export type TaskCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ResourceAllocations?: boolean | TaskCountOutputTypeCountResourceAllocationsArgs
  }

  // Custom InputTypes
  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskCountOutputType
     */
    select?: TaskCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountResourceAllocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResourceAllocationsWhereInput
  }


  /**
   * Count Type ResourceCountOutputType
   */

  export type ResourceCountOutputType = {
    users: number
    ResourceAllocations: number
  }

  export type ResourceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | ResourceCountOutputTypeCountUsersArgs
    ResourceAllocations?: boolean | ResourceCountOutputTypeCountResourceAllocationsArgs
  }

  // Custom InputTypes
  /**
   * ResourceCountOutputType without action
   */
  export type ResourceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResourceCountOutputType
     */
    select?: ResourceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ResourceCountOutputType without action
   */
  export type ResourceCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * ResourceCountOutputType without action
   */
  export type ResourceCountOutputTypeCountResourceAllocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResourceAllocationsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    user_id: string | null
    name: string | null
    email: string | null
    password: string | null
    role_id: string | null
    profileImage: string | null
    verified: boolean | null
    created_at: Date | null
    updated_at: Date | null
    refreshToken: string | null
    accessToken: string | null
    resetToken: string | null
    resetTokenExpiry: Date | null
  }

  export type UserMaxAggregateOutputType = {
    user_id: string | null
    name: string | null
    email: string | null
    password: string | null
    role_id: string | null
    profileImage: string | null
    verified: boolean | null
    created_at: Date | null
    updated_at: Date | null
    refreshToken: string | null
    accessToken: string | null
    resetToken: string | null
    resetTokenExpiry: Date | null
  }

  export type UserCountAggregateOutputType = {
    user_id: number
    name: number
    email: number
    password: number
    role_id: number
    profileImage: number
    verified: number
    created_at: number
    updated_at: number
    refreshToken: number
    accessToken: number
    resetToken: number
    resetTokenExpiry: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    user_id?: true
    name?: true
    email?: true
    password?: true
    role_id?: true
    profileImage?: true
    verified?: true
    created_at?: true
    updated_at?: true
    refreshToken?: true
    accessToken?: true
    resetToken?: true
    resetTokenExpiry?: true
  }

  export type UserMaxAggregateInputType = {
    user_id?: true
    name?: true
    email?: true
    password?: true
    role_id?: true
    profileImage?: true
    verified?: true
    created_at?: true
    updated_at?: true
    refreshToken?: true
    accessToken?: true
    resetToken?: true
    resetTokenExpiry?: true
  }

  export type UserCountAggregateInputType = {
    user_id?: true
    name?: true
    email?: true
    password?: true
    role_id?: true
    profileImage?: true
    verified?: true
    created_at?: true
    updated_at?: true
    refreshToken?: true
    accessToken?: true
    resetToken?: true
    resetTokenExpiry?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    user_id: string
    name: string
    email: string
    password: string
    role_id: string | null
    profileImage: string | null
    verified: boolean
    created_at: Date
    updated_at: Date
    refreshToken: string | null
    accessToken: string | null
    resetToken: string | null
    resetTokenExpiry: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role_id?: boolean
    profileImage?: boolean
    verified?: boolean
    created_at?: boolean
    updated_at?: boolean
    refreshToken?: boolean
    accessToken?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    resource?: boolean | User$resourceArgs<ExtArgs>
    projects?: boolean | User$projectsArgs<ExtArgs>
    reports?: boolean | User$reportsArgs<ExtArgs>
    otps?: boolean | User$otpsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    user_id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role_id?: boolean
    profileImage?: boolean
    verified?: boolean
    created_at?: boolean
    updated_at?: boolean
    refreshToken?: boolean
    accessToken?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resource?: boolean | User$resourceArgs<ExtArgs>
    projects?: boolean | User$projectsArgs<ExtArgs>
    reports?: boolean | User$reportsArgs<ExtArgs>
    otps?: boolean | User$otpsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      resource: Prisma.$ResourcePayload<ExtArgs> | null
      projects: Prisma.$ProjectPayload<ExtArgs>[]
      reports: Prisma.$ReportsPayload<ExtArgs>[]
      otps: Prisma.$OtpPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      user_id: string
      name: string
      email: string
      password: string
      role_id: string | null
      profileImage: string | null
      verified: boolean
      created_at: Date
      updated_at: Date
      refreshToken: string | null
      accessToken: string | null
      resetToken: string | null
      resetTokenExpiry: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const userWithUser_idOnly = await prisma.user.findMany({ select: { user_id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const user = await prisma.user.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: UserFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a User.
     * @param {UserAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const user = await prisma.user.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: UserAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resource<T extends User$resourceArgs<ExtArgs> = {}>(args?: Subset<T, User$resourceArgs<ExtArgs>>): Prisma__ResourceClient<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    projects<T extends User$projectsArgs<ExtArgs> = {}>(args?: Subset<T, User$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany"> | Null>
    reports<T extends User$reportsArgs<ExtArgs> = {}>(args?: Subset<T, User$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportsPayload<ExtArgs>, T, "findMany"> | Null>
    otps<T extends User$otpsArgs<ExtArgs> = {}>(args?: Subset<T, User$otpsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly user_id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role_id: FieldRef<"User", 'String'>
    readonly profileImage: FieldRef<"User", 'String'>
    readonly verified: FieldRef<"User", 'Boolean'>
    readonly created_at: FieldRef<"User", 'DateTime'>
    readonly updated_at: FieldRef<"User", 'DateTime'>
    readonly refreshToken: FieldRef<"User", 'String'>
    readonly accessToken: FieldRef<"User", 'String'>
    readonly resetToken: FieldRef<"User", 'String'>
    readonly resetTokenExpiry: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User findRaw
   */
  export type UserFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User aggregateRaw
   */
  export type UserAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User.resource
   */
  export type User$resourceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
    where?: ResourceWhereInput
  }

  /**
   * User.projects
   */
  export type User$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * User.reports
   */
  export type User$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reports
     */
    select?: ReportsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportsInclude<ExtArgs> | null
    where?: ReportsWhereInput
    orderBy?: ReportsOrderByWithRelationInput | ReportsOrderByWithRelationInput[]
    cursor?: ReportsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportsScalarFieldEnum | ReportsScalarFieldEnum[]
  }

  /**
   * User.otps
   */
  export type User$otpsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpInclude<ExtArgs> | null
    where?: OtpWhereInput
    orderBy?: OtpOrderByWithRelationInput | OtpOrderByWithRelationInput[]
    cursor?: OtpWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OtpScalarFieldEnum | OtpScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectAvgAggregateOutputType = {
    total_duration: number | null
    total_cost: number | null
    manday: number | null
  }

  export type ProjectSumAggregateOutputType = {
    total_duration: number | null
    total_cost: number | null
    manday: number | null
  }

  export type ProjectMinAggregateOutputType = {
    project_id: string | null
    name: string | null
    description: string | null
    start_date: Date | null
    total_duration: number | null
    total_cost: number | null
    status: string | null
    manday: number | null
    created_by: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ProjectMaxAggregateOutputType = {
    project_id: string | null
    name: string | null
    description: string | null
    start_date: Date | null
    total_duration: number | null
    total_cost: number | null
    status: string | null
    manday: number | null
    created_by: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ProjectCountAggregateOutputType = {
    project_id: number
    name: number
    description: number
    start_date: number
    total_duration: number
    total_cost: number
    status: number
    manday: number
    created_by: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ProjectAvgAggregateInputType = {
    total_duration?: true
    total_cost?: true
    manday?: true
  }

  export type ProjectSumAggregateInputType = {
    total_duration?: true
    total_cost?: true
    manday?: true
  }

  export type ProjectMinAggregateInputType = {
    project_id?: true
    name?: true
    description?: true
    start_date?: true
    total_duration?: true
    total_cost?: true
    status?: true
    manday?: true
    created_by?: true
    created_at?: true
    updated_at?: true
  }

  export type ProjectMaxAggregateInputType = {
    project_id?: true
    name?: true
    description?: true
    start_date?: true
    total_duration?: true
    total_cost?: true
    status?: true
    manday?: true
    created_by?: true
    created_at?: true
    updated_at?: true
  }

  export type ProjectCountAggregateInputType = {
    project_id?: true
    name?: true
    description?: true
    start_date?: true
    total_duration?: true
    total_cost?: true
    status?: true
    manday?: true
    created_by?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithAggregationInput | ProjectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _avg?: ProjectAvgAggregateInputType
    _sum?: ProjectSumAggregateInputType
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    project_id: string
    name: string
    description: string | null
    start_date: Date
    total_duration: number
    total_cost: number
    status: string
    manday: number
    created_by: string
    created_at: Date
    updated_at: Date
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    project_id?: boolean
    name?: boolean
    description?: boolean
    start_date?: boolean
    total_duration?: boolean
    total_cost?: boolean
    status?: boolean
    manday?: boolean
    created_by?: boolean
    created_at?: boolean
    updated_at?: boolean
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    tasks?: boolean | Project$tasksArgs<ExtArgs>
    ResourceAllocations?: boolean | Project$ResourceAllocationsArgs<ExtArgs>
    CostEstimations?: boolean | Project$CostEstimationsArgs<ExtArgs>
    DurationEstimations?: boolean | Project$DurationEstimationsArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>


  export type ProjectSelectScalar = {
    project_id?: boolean
    name?: boolean
    description?: boolean
    start_date?: boolean
    total_duration?: boolean
    total_cost?: boolean
    status?: boolean
    manday?: boolean
    created_by?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdByUser?: boolean | UserDefaultArgs<ExtArgs>
    tasks?: boolean | Project$tasksArgs<ExtArgs>
    ResourceAllocations?: boolean | Project$ResourceAllocationsArgs<ExtArgs>
    CostEstimations?: boolean | Project$CostEstimationsArgs<ExtArgs>
    DurationEstimations?: boolean | Project$DurationEstimationsArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project"
    objects: {
      createdByUser: Prisma.$UserPayload<ExtArgs>
      tasks: Prisma.$TaskPayload<ExtArgs>[]
      ResourceAllocations: Prisma.$ResourceAllocationsPayload<ExtArgs>[]
      CostEstimations: Prisma.$CostEstimationsPayload<ExtArgs>[]
      DurationEstimations: Prisma.$DurationEstimationsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      project_id: string
      name: string
      description: string | null
      start_date: Date
      total_duration: number
      total_cost: number
      status: string
      manday: number
      created_by: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["project"]>
    composites: {}
  }

  type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = $Result.GetResult<Prisma.$ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectFindUniqueArgs>(args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Project that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectFindFirstArgs>(args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `project_id`
     * const projectWithProject_idOnly = await prisma.project.findMany({ select: { project_id: true } })
     * 
     */
    findMany<T extends ProjectFindManyArgs>(args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
     */
    create<T extends ProjectCreateArgs>(args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Projects.
     * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectCreateManyArgs>(args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
     */
    delete<T extends ProjectDeleteArgs>(args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectUpdateArgs>(args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectDeleteManyArgs>(args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectUpdateManyArgs>(args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
     */
    upsert<T extends ProjectUpsertArgs>(args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Projects that matches the filter.
     * @param {ProjectFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const project = await prisma.project.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: ProjectFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Project.
     * @param {ProjectAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const project = await prisma.project.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ProjectAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project model
   */
  readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdByUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tasks<T extends Project$tasksArgs<ExtArgs> = {}>(args?: Subset<T, Project$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany"> | Null>
    ResourceAllocations<T extends Project$ResourceAllocationsArgs<ExtArgs> = {}>(args?: Subset<T, Project$ResourceAllocationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResourceAllocationsPayload<ExtArgs>, T, "findMany"> | Null>
    CostEstimations<T extends Project$CostEstimationsArgs<ExtArgs> = {}>(args?: Subset<T, Project$CostEstimationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CostEstimationsPayload<ExtArgs>, T, "findMany"> | Null>
    DurationEstimations<T extends Project$DurationEstimationsArgs<ExtArgs> = {}>(args?: Subset<T, Project$DurationEstimationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DurationEstimationsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Project model
   */ 
  interface ProjectFieldRefs {
    readonly project_id: FieldRef<"Project", 'String'>
    readonly name: FieldRef<"Project", 'String'>
    readonly description: FieldRef<"Project", 'String'>
    readonly start_date: FieldRef<"Project", 'DateTime'>
    readonly total_duration: FieldRef<"Project", 'Int'>
    readonly total_cost: FieldRef<"Project", 'Float'>
    readonly status: FieldRef<"Project", 'String'>
    readonly manday: FieldRef<"Project", 'Float'>
    readonly created_by: FieldRef<"Project", 'String'>
    readonly created_at: FieldRef<"Project", 'DateTime'>
    readonly updated_at: FieldRef<"Project", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }

  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
  }

  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
  }

  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }

  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
  }

  /**
   * Project findRaw
   */
  export type ProjectFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Project aggregateRaw
   */
  export type ProjectAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Project.tasks
   */
  export type Project$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Project.ResourceAllocations
   */
  export type Project$ResourceAllocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResourceAllocations
     */
    select?: ResourceAllocationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceAllocationsInclude<ExtArgs> | null
    where?: ResourceAllocationsWhereInput
    orderBy?: ResourceAllocationsOrderByWithRelationInput | ResourceAllocationsOrderByWithRelationInput[]
    cursor?: ResourceAllocationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResourceAllocationsScalarFieldEnum | ResourceAllocationsScalarFieldEnum[]
  }

  /**
   * Project.CostEstimations
   */
  export type Project$CostEstimationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostEstimations
     */
    select?: CostEstimationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostEstimationsInclude<ExtArgs> | null
    where?: CostEstimationsWhereInput
    orderBy?: CostEstimationsOrderByWithRelationInput | CostEstimationsOrderByWithRelationInput[]
    cursor?: CostEstimationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CostEstimationsScalarFieldEnum | CostEstimationsScalarFieldEnum[]
  }

  /**
   * Project.DurationEstimations
   */
  export type Project$DurationEstimationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DurationEstimations
     */
    select?: DurationEstimationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DurationEstimationsInclude<ExtArgs> | null
    where?: DurationEstimationsWhereInput
    orderBy?: DurationEstimationsOrderByWithRelationInput | DurationEstimationsOrderByWithRelationInput[]
    cursor?: DurationEstimationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DurationEstimationsScalarFieldEnum | DurationEstimationsScalarFieldEnum[]
  }

  /**
   * Project without action
   */
  export type ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
  }


  /**
   * Model Task
   */

  export type AggregateTask = {
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  export type TaskAvgAggregateOutputType = {
    workload: number | null
    duration: number | null
    cost: number | null
  }

  export type TaskSumAggregateOutputType = {
    workload: number | null
    duration: number | null
    cost: number | null
  }

  export type TaskMinAggregateOutputType = {
    task_id: string | null
    name: string | null
    status: string | null
    workload: number | null
    duration: number | null
    cost: number | null
    project_id: string | null
    updated_by: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TaskMaxAggregateOutputType = {
    task_id: string | null
    name: string | null
    status: string | null
    workload: number | null
    duration: number | null
    cost: number | null
    project_id: string | null
    updated_by: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TaskCountAggregateOutputType = {
    task_id: number
    name: number
    status: number
    workload: number
    duration: number
    cost: number
    project_id: number
    updated_by: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type TaskAvgAggregateInputType = {
    workload?: true
    duration?: true
    cost?: true
  }

  export type TaskSumAggregateInputType = {
    workload?: true
    duration?: true
    cost?: true
  }

  export type TaskMinAggregateInputType = {
    task_id?: true
    name?: true
    status?: true
    workload?: true
    duration?: true
    cost?: true
    project_id?: true
    updated_by?: true
    created_at?: true
    updated_at?: true
  }

  export type TaskMaxAggregateInputType = {
    task_id?: true
    name?: true
    status?: true
    workload?: true
    duration?: true
    cost?: true
    project_id?: true
    updated_by?: true
    created_at?: true
    updated_at?: true
  }

  export type TaskCountAggregateInputType = {
    task_id?: true
    name?: true
    status?: true
    workload?: true
    duration?: true
    cost?: true
    project_id?: true
    updated_by?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type TaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Task to aggregate.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tasks
    **/
    _count?: true | TaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TaskAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TaskSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskMaxAggregateInputType
  }

  export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
        [P in keyof T & keyof AggregateTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask[P]>
      : GetScalarType<T[P], AggregateTask[P]>
  }




  export type TaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithAggregationInput | TaskOrderByWithAggregationInput[]
    by: TaskScalarFieldEnum[] | TaskScalarFieldEnum
    having?: TaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskCountAggregateInputType | true
    _avg?: TaskAvgAggregateInputType
    _sum?: TaskSumAggregateInputType
    _min?: TaskMinAggregateInputType
    _max?: TaskMaxAggregateInputType
  }

  export type TaskGroupByOutputType = {
    task_id: string
    name: string
    status: string
    workload: number
    duration: number
    cost: number
    project_id: string
    updated_by: string | null
    created_at: Date
    updated_at: Date
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  type GetTaskGroupByPayload<T extends TaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskGroupByOutputType[P]>
            : GetScalarType<T[P], TaskGroupByOutputType[P]>
        }
      >
    >


  export type TaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    task_id?: boolean
    name?: boolean
    status?: boolean
    workload?: boolean
    duration?: boolean
    cost?: boolean
    project_id?: boolean
    updated_by?: boolean
    created_at?: boolean
    updated_at?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    ResourceAllocations?: boolean | Task$ResourceAllocationsArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>


  export type TaskSelectScalar = {
    task_id?: boolean
    name?: boolean
    status?: boolean
    workload?: boolean
    duration?: boolean
    cost?: boolean
    project_id?: boolean
    updated_by?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type TaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    ResourceAllocations?: boolean | Task$ResourceAllocationsArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $TaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Task"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      ResourceAllocations: Prisma.$ResourceAllocationsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      task_id: string
      name: string
      status: string
      workload: number
      duration: number
      cost: number
      project_id: string
      updated_by: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["task"]>
    composites: {}
  }

  type TaskGetPayload<S extends boolean | null | undefined | TaskDefaultArgs> = $Result.GetResult<Prisma.$TaskPayload, S>

  type TaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TaskFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TaskCountAggregateInputType | true
    }

  export interface TaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Task'], meta: { name: 'Task' } }
    /**
     * Find zero or one Task that matches the filter.
     * @param {TaskFindUniqueArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskFindUniqueArgs>(args: SelectSubset<T, TaskFindUniqueArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Task that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TaskFindUniqueOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Task that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskFindFirstArgs>(args?: SelectSubset<T, TaskFindFirstArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Task that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.task.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.task.findMany({ take: 10 })
     * 
     * // Only select the `task_id`
     * const taskWithTask_idOnly = await prisma.task.findMany({ select: { task_id: true } })
     * 
     */
    findMany<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Task.
     * @param {TaskCreateArgs} args - Arguments to create a Task.
     * @example
     * // Create one Task
     * const Task = await prisma.task.create({
     *   data: {
     *     // ... data to create a Task
     *   }
     * })
     * 
     */
    create<T extends TaskCreateArgs>(args: SelectSubset<T, TaskCreateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tasks.
     * @param {TaskCreateManyArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskCreateManyArgs>(args?: SelectSubset<T, TaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Task.
     * @param {TaskDeleteArgs} args - Arguments to delete one Task.
     * @example
     * // Delete one Task
     * const Task = await prisma.task.delete({
     *   where: {
     *     // ... filter to delete one Task
     *   }
     * })
     * 
     */
    delete<T extends TaskDeleteArgs>(args: SelectSubset<T, TaskDeleteArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Task.
     * @param {TaskUpdateArgs} args - Arguments to update one Task.
     * @example
     * // Update one Task
     * const task = await prisma.task.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskUpdateArgs>(args: SelectSubset<T, TaskUpdateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tasks.
     * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.task.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskDeleteManyArgs>(args?: SelectSubset<T, TaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskUpdateManyArgs>(args: SelectSubset<T, TaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Task.
     * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
     * @example
     * // Update or create a Task
     * const task = await prisma.task.upsert({
     *   create: {
     *     // ... data to create a Task
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task we want to update
     *   }
     * })
     */
    upsert<T extends TaskUpsertArgs>(args: SelectSubset<T, TaskUpsertArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Tasks that matches the filter.
     * @param {TaskFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const task = await prisma.task.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: TaskFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Task.
     * @param {TaskAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const task = await prisma.task.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: TaskAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.task.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends TaskCountArgs>(
      args?: Subset<T, TaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskAggregateArgs>(args: Subset<T, TaskAggregateArgs>): Prisma.PrismaPromise<GetTaskAggregateType<T>>

    /**
     * Group by Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskGroupByArgs['orderBy'] }
        : { orderBy?: TaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Task model
   */
  readonly fields: TaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Task.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    ResourceAllocations<T extends Task$ResourceAllocationsArgs<ExtArgs> = {}>(args?: Subset<T, Task$ResourceAllocationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResourceAllocationsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Task model
   */ 
  interface TaskFieldRefs {
    readonly task_id: FieldRef<"Task", 'String'>
    readonly name: FieldRef<"Task", 'String'>
    readonly status: FieldRef<"Task", 'String'>
    readonly workload: FieldRef<"Task", 'Float'>
    readonly duration: FieldRef<"Task", 'Float'>
    readonly cost: FieldRef<"Task", 'Float'>
    readonly project_id: FieldRef<"Task", 'String'>
    readonly updated_by: FieldRef<"Task", 'String'>
    readonly created_at: FieldRef<"Task", 'DateTime'>
    readonly updated_at: FieldRef<"Task", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Task findUnique
   */
  export type TaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findUniqueOrThrow
   */
  export type TaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findFirst
   */
  export type TaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findFirstOrThrow
   */
  export type TaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findMany
   */
  export type TaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task create
   */
  export type TaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to create a Task.
     */
    data: XOR<TaskCreateInput, TaskUncheckedCreateInput>
  }

  /**
   * Task createMany
   */
  export type TaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
  }

  /**
   * Task update
   */
  export type TaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to update a Task.
     */
    data: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
    /**
     * Choose, which Task to update.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task updateMany
   */
  export type TaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
  }

  /**
   * Task upsert
   */
  export type TaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The filter to search for the Task to update in case it exists.
     */
    where: TaskWhereUniqueInput
    /**
     * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
     */
    create: XOR<TaskCreateInput, TaskUncheckedCreateInput>
    /**
     * In case the Task was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
  }

  /**
   * Task delete
   */
  export type TaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter which Task to delete.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task deleteMany
   */
  export type TaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tasks to delete
     */
    where?: TaskWhereInput
  }

  /**
   * Task findRaw
   */
  export type TaskFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Task aggregateRaw
   */
  export type TaskAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Task.ResourceAllocations
   */
  export type Task$ResourceAllocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResourceAllocations
     */
    select?: ResourceAllocationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceAllocationsInclude<ExtArgs> | null
    where?: ResourceAllocationsWhereInput
    orderBy?: ResourceAllocationsOrderByWithRelationInput | ResourceAllocationsOrderByWithRelationInput[]
    cursor?: ResourceAllocationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResourceAllocationsScalarFieldEnum | ResourceAllocationsScalarFieldEnum[]
  }

  /**
   * Task without action
   */
  export type TaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
  }


  /**
   * Model Resource
   */

  export type AggregateResource = {
    _count: ResourceCountAggregateOutputType | null
    _avg: ResourceAvgAggregateOutputType | null
    _sum: ResourceSumAggregateOutputType | null
    _min: ResourceMinAggregateOutputType | null
    _max: ResourceMaxAggregateOutputType | null
  }

  export type ResourceAvgAggregateOutputType = {
    rate: number | null
  }

  export type ResourceSumAggregateOutputType = {
    rate: number | null
  }

  export type ResourceMinAggregateOutputType = {
    resource_id: string | null
    name: string | null
    rate: number | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ResourceMaxAggregateOutputType = {
    resource_id: string | null
    name: string | null
    rate: number | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ResourceCountAggregateOutputType = {
    resource_id: number
    name: number
    rate: number
    description: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ResourceAvgAggregateInputType = {
    rate?: true
  }

  export type ResourceSumAggregateInputType = {
    rate?: true
  }

  export type ResourceMinAggregateInputType = {
    resource_id?: true
    name?: true
    rate?: true
    description?: true
    created_at?: true
    updated_at?: true
  }

  export type ResourceMaxAggregateInputType = {
    resource_id?: true
    name?: true
    rate?: true
    description?: true
    created_at?: true
    updated_at?: true
  }

  export type ResourceCountAggregateInputType = {
    resource_id?: true
    name?: true
    rate?: true
    description?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ResourceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Resource to aggregate.
     */
    where?: ResourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Resources to fetch.
     */
    orderBy?: ResourceOrderByWithRelationInput | ResourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Resources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Resources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Resources
    **/
    _count?: true | ResourceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResourceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResourceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResourceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResourceMaxAggregateInputType
  }

  export type GetResourceAggregateType<T extends ResourceAggregateArgs> = {
        [P in keyof T & keyof AggregateResource]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResource[P]>
      : GetScalarType<T[P], AggregateResource[P]>
  }




  export type ResourceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResourceWhereInput
    orderBy?: ResourceOrderByWithAggregationInput | ResourceOrderByWithAggregationInput[]
    by: ResourceScalarFieldEnum[] | ResourceScalarFieldEnum
    having?: ResourceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResourceCountAggregateInputType | true
    _avg?: ResourceAvgAggregateInputType
    _sum?: ResourceSumAggregateInputType
    _min?: ResourceMinAggregateInputType
    _max?: ResourceMaxAggregateInputType
  }

  export type ResourceGroupByOutputType = {
    resource_id: string
    name: string
    rate: number
    description: string | null
    created_at: Date
    updated_at: Date
    _count: ResourceCountAggregateOutputType | null
    _avg: ResourceAvgAggregateOutputType | null
    _sum: ResourceSumAggregateOutputType | null
    _min: ResourceMinAggregateOutputType | null
    _max: ResourceMaxAggregateOutputType | null
  }

  type GetResourceGroupByPayload<T extends ResourceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResourceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResourceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResourceGroupByOutputType[P]>
            : GetScalarType<T[P], ResourceGroupByOutputType[P]>
        }
      >
    >


  export type ResourceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    resource_id?: boolean
    name?: boolean
    rate?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
    users?: boolean | Resource$usersArgs<ExtArgs>
    ResourceAllocations?: boolean | Resource$ResourceAllocationsArgs<ExtArgs>
    _count?: boolean | ResourceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resource"]>


  export type ResourceSelectScalar = {
    resource_id?: boolean
    name?: boolean
    rate?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type ResourceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Resource$usersArgs<ExtArgs>
    ResourceAllocations?: boolean | Resource$ResourceAllocationsArgs<ExtArgs>
    _count?: boolean | ResourceCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ResourcePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Resource"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      ResourceAllocations: Prisma.$ResourceAllocationsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      resource_id: string
      name: string
      rate: number
      description: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["resource"]>
    composites: {}
  }

  type ResourceGetPayload<S extends boolean | null | undefined | ResourceDefaultArgs> = $Result.GetResult<Prisma.$ResourcePayload, S>

  type ResourceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ResourceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ResourceCountAggregateInputType | true
    }

  export interface ResourceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Resource'], meta: { name: 'Resource' } }
    /**
     * Find zero or one Resource that matches the filter.
     * @param {ResourceFindUniqueArgs} args - Arguments to find a Resource
     * @example
     * // Get one Resource
     * const resource = await prisma.resource.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ResourceFindUniqueArgs>(args: SelectSubset<T, ResourceFindUniqueArgs<ExtArgs>>): Prisma__ResourceClient<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Resource that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ResourceFindUniqueOrThrowArgs} args - Arguments to find a Resource
     * @example
     * // Get one Resource
     * const resource = await prisma.resource.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ResourceFindUniqueOrThrowArgs>(args: SelectSubset<T, ResourceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ResourceClient<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Resource that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceFindFirstArgs} args - Arguments to find a Resource
     * @example
     * // Get one Resource
     * const resource = await prisma.resource.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ResourceFindFirstArgs>(args?: SelectSubset<T, ResourceFindFirstArgs<ExtArgs>>): Prisma__ResourceClient<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Resource that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceFindFirstOrThrowArgs} args - Arguments to find a Resource
     * @example
     * // Get one Resource
     * const resource = await prisma.resource.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ResourceFindFirstOrThrowArgs>(args?: SelectSubset<T, ResourceFindFirstOrThrowArgs<ExtArgs>>): Prisma__ResourceClient<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Resources that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Resources
     * const resources = await prisma.resource.findMany()
     * 
     * // Get first 10 Resources
     * const resources = await prisma.resource.findMany({ take: 10 })
     * 
     * // Only select the `resource_id`
     * const resourceWithResource_idOnly = await prisma.resource.findMany({ select: { resource_id: true } })
     * 
     */
    findMany<T extends ResourceFindManyArgs>(args?: SelectSubset<T, ResourceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Resource.
     * @param {ResourceCreateArgs} args - Arguments to create a Resource.
     * @example
     * // Create one Resource
     * const Resource = await prisma.resource.create({
     *   data: {
     *     // ... data to create a Resource
     *   }
     * })
     * 
     */
    create<T extends ResourceCreateArgs>(args: SelectSubset<T, ResourceCreateArgs<ExtArgs>>): Prisma__ResourceClient<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Resources.
     * @param {ResourceCreateManyArgs} args - Arguments to create many Resources.
     * @example
     * // Create many Resources
     * const resource = await prisma.resource.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ResourceCreateManyArgs>(args?: SelectSubset<T, ResourceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Resource.
     * @param {ResourceDeleteArgs} args - Arguments to delete one Resource.
     * @example
     * // Delete one Resource
     * const Resource = await prisma.resource.delete({
     *   where: {
     *     // ... filter to delete one Resource
     *   }
     * })
     * 
     */
    delete<T extends ResourceDeleteArgs>(args: SelectSubset<T, ResourceDeleteArgs<ExtArgs>>): Prisma__ResourceClient<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Resource.
     * @param {ResourceUpdateArgs} args - Arguments to update one Resource.
     * @example
     * // Update one Resource
     * const resource = await prisma.resource.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ResourceUpdateArgs>(args: SelectSubset<T, ResourceUpdateArgs<ExtArgs>>): Prisma__ResourceClient<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Resources.
     * @param {ResourceDeleteManyArgs} args - Arguments to filter Resources to delete.
     * @example
     * // Delete a few Resources
     * const { count } = await prisma.resource.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ResourceDeleteManyArgs>(args?: SelectSubset<T, ResourceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Resources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Resources
     * const resource = await prisma.resource.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ResourceUpdateManyArgs>(args: SelectSubset<T, ResourceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Resource.
     * @param {ResourceUpsertArgs} args - Arguments to update or create a Resource.
     * @example
     * // Update or create a Resource
     * const resource = await prisma.resource.upsert({
     *   create: {
     *     // ... data to create a Resource
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Resource we want to update
     *   }
     * })
     */
    upsert<T extends ResourceUpsertArgs>(args: SelectSubset<T, ResourceUpsertArgs<ExtArgs>>): Prisma__ResourceClient<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Resources that matches the filter.
     * @param {ResourceFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const resource = await prisma.resource.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: ResourceFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Resource.
     * @param {ResourceAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const resource = await prisma.resource.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ResourceAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Resources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceCountArgs} args - Arguments to filter Resources to count.
     * @example
     * // Count the number of Resources
     * const count = await prisma.resource.count({
     *   where: {
     *     // ... the filter for the Resources we want to count
     *   }
     * })
    **/
    count<T extends ResourceCountArgs>(
      args?: Subset<T, ResourceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResourceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Resource.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResourceAggregateArgs>(args: Subset<T, ResourceAggregateArgs>): Prisma.PrismaPromise<GetResourceAggregateType<T>>

    /**
     * Group by Resource.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResourceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResourceGroupByArgs['orderBy'] }
        : { orderBy?: ResourceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResourceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResourceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Resource model
   */
  readonly fields: ResourceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Resource.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResourceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Resource$usersArgs<ExtArgs> = {}>(args?: Subset<T, Resource$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    ResourceAllocations<T extends Resource$ResourceAllocationsArgs<ExtArgs> = {}>(args?: Subset<T, Resource$ResourceAllocationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResourceAllocationsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Resource model
   */ 
  interface ResourceFieldRefs {
    readonly resource_id: FieldRef<"Resource", 'String'>
    readonly name: FieldRef<"Resource", 'String'>
    readonly rate: FieldRef<"Resource", 'Float'>
    readonly description: FieldRef<"Resource", 'String'>
    readonly created_at: FieldRef<"Resource", 'DateTime'>
    readonly updated_at: FieldRef<"Resource", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Resource findUnique
   */
  export type ResourceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
    /**
     * Filter, which Resource to fetch.
     */
    where: ResourceWhereUniqueInput
  }

  /**
   * Resource findUniqueOrThrow
   */
  export type ResourceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
    /**
     * Filter, which Resource to fetch.
     */
    where: ResourceWhereUniqueInput
  }

  /**
   * Resource findFirst
   */
  export type ResourceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
    /**
     * Filter, which Resource to fetch.
     */
    where?: ResourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Resources to fetch.
     */
    orderBy?: ResourceOrderByWithRelationInput | ResourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Resources.
     */
    cursor?: ResourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Resources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Resources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Resources.
     */
    distinct?: ResourceScalarFieldEnum | ResourceScalarFieldEnum[]
  }

  /**
   * Resource findFirstOrThrow
   */
  export type ResourceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
    /**
     * Filter, which Resource to fetch.
     */
    where?: ResourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Resources to fetch.
     */
    orderBy?: ResourceOrderByWithRelationInput | ResourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Resources.
     */
    cursor?: ResourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Resources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Resources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Resources.
     */
    distinct?: ResourceScalarFieldEnum | ResourceScalarFieldEnum[]
  }

  /**
   * Resource findMany
   */
  export type ResourceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
    /**
     * Filter, which Resources to fetch.
     */
    where?: ResourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Resources to fetch.
     */
    orderBy?: ResourceOrderByWithRelationInput | ResourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Resources.
     */
    cursor?: ResourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Resources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Resources.
     */
    skip?: number
    distinct?: ResourceScalarFieldEnum | ResourceScalarFieldEnum[]
  }

  /**
   * Resource create
   */
  export type ResourceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
    /**
     * The data needed to create a Resource.
     */
    data: XOR<ResourceCreateInput, ResourceUncheckedCreateInput>
  }

  /**
   * Resource createMany
   */
  export type ResourceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Resources.
     */
    data: ResourceCreateManyInput | ResourceCreateManyInput[]
  }

  /**
   * Resource update
   */
  export type ResourceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
    /**
     * The data needed to update a Resource.
     */
    data: XOR<ResourceUpdateInput, ResourceUncheckedUpdateInput>
    /**
     * Choose, which Resource to update.
     */
    where: ResourceWhereUniqueInput
  }

  /**
   * Resource updateMany
   */
  export type ResourceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Resources.
     */
    data: XOR<ResourceUpdateManyMutationInput, ResourceUncheckedUpdateManyInput>
    /**
     * Filter which Resources to update
     */
    where?: ResourceWhereInput
  }

  /**
   * Resource upsert
   */
  export type ResourceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
    /**
     * The filter to search for the Resource to update in case it exists.
     */
    where: ResourceWhereUniqueInput
    /**
     * In case the Resource found by the `where` argument doesn't exist, create a new Resource with this data.
     */
    create: XOR<ResourceCreateInput, ResourceUncheckedCreateInput>
    /**
     * In case the Resource was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResourceUpdateInput, ResourceUncheckedUpdateInput>
  }

  /**
   * Resource delete
   */
  export type ResourceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
    /**
     * Filter which Resource to delete.
     */
    where: ResourceWhereUniqueInput
  }

  /**
   * Resource deleteMany
   */
  export type ResourceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Resources to delete
     */
    where?: ResourceWhereInput
  }

  /**
   * Resource findRaw
   */
  export type ResourceFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Resource aggregateRaw
   */
  export type ResourceAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Resource.users
   */
  export type Resource$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Resource.ResourceAllocations
   */
  export type Resource$ResourceAllocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResourceAllocations
     */
    select?: ResourceAllocationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceAllocationsInclude<ExtArgs> | null
    where?: ResourceAllocationsWhereInput
    orderBy?: ResourceAllocationsOrderByWithRelationInput | ResourceAllocationsOrderByWithRelationInput[]
    cursor?: ResourceAllocationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResourceAllocationsScalarFieldEnum | ResourceAllocationsScalarFieldEnum[]
  }

  /**
   * Resource without action
   */
  export type ResourceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resource
     */
    select?: ResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceInclude<ExtArgs> | null
  }


  /**
   * Model ResourceAllocations
   */

  export type AggregateResourceAllocations = {
    _count: ResourceAllocationsCountAggregateOutputType | null
    _avg: ResourceAllocationsAvgAggregateOutputType | null
    _sum: ResourceAllocationsSumAggregateOutputType | null
    _min: ResourceAllocationsMinAggregateOutputType | null
    _max: ResourceAllocationsMaxAggregateOutputType | null
  }

  export type ResourceAllocationsAvgAggregateOutputType = {
    allocation_percentage: number | null
    resource_hours: number | null
  }

  export type ResourceAllocationsSumAggregateOutputType = {
    allocation_percentage: number | null
    resource_hours: number | null
  }

  export type ResourceAllocationsMinAggregateOutputType = {
    allocation_id: string | null
    resource_id: string | null
    project_id: string | null
    task_id: string | null
    allocation_percentage: number | null
    resource_hours: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ResourceAllocationsMaxAggregateOutputType = {
    allocation_id: string | null
    resource_id: string | null
    project_id: string | null
    task_id: string | null
    allocation_percentage: number | null
    resource_hours: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ResourceAllocationsCountAggregateOutputType = {
    allocation_id: number
    resource_id: number
    project_id: number
    task_id: number
    allocation_percentage: number
    resource_hours: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ResourceAllocationsAvgAggregateInputType = {
    allocation_percentage?: true
    resource_hours?: true
  }

  export type ResourceAllocationsSumAggregateInputType = {
    allocation_percentage?: true
    resource_hours?: true
  }

  export type ResourceAllocationsMinAggregateInputType = {
    allocation_id?: true
    resource_id?: true
    project_id?: true
    task_id?: true
    allocation_percentage?: true
    resource_hours?: true
    created_at?: true
    updated_at?: true
  }

  export type ResourceAllocationsMaxAggregateInputType = {
    allocation_id?: true
    resource_id?: true
    project_id?: true
    task_id?: true
    allocation_percentage?: true
    resource_hours?: true
    created_at?: true
    updated_at?: true
  }

  export type ResourceAllocationsCountAggregateInputType = {
    allocation_id?: true
    resource_id?: true
    project_id?: true
    task_id?: true
    allocation_percentage?: true
    resource_hours?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ResourceAllocationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResourceAllocations to aggregate.
     */
    where?: ResourceAllocationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResourceAllocations to fetch.
     */
    orderBy?: ResourceAllocationsOrderByWithRelationInput | ResourceAllocationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResourceAllocationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResourceAllocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResourceAllocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ResourceAllocations
    **/
    _count?: true | ResourceAllocationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResourceAllocationsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResourceAllocationsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResourceAllocationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResourceAllocationsMaxAggregateInputType
  }

  export type GetResourceAllocationsAggregateType<T extends ResourceAllocationsAggregateArgs> = {
        [P in keyof T & keyof AggregateResourceAllocations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResourceAllocations[P]>
      : GetScalarType<T[P], AggregateResourceAllocations[P]>
  }




  export type ResourceAllocationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResourceAllocationsWhereInput
    orderBy?: ResourceAllocationsOrderByWithAggregationInput | ResourceAllocationsOrderByWithAggregationInput[]
    by: ResourceAllocationsScalarFieldEnum[] | ResourceAllocationsScalarFieldEnum
    having?: ResourceAllocationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResourceAllocationsCountAggregateInputType | true
    _avg?: ResourceAllocationsAvgAggregateInputType
    _sum?: ResourceAllocationsSumAggregateInputType
    _min?: ResourceAllocationsMinAggregateInputType
    _max?: ResourceAllocationsMaxAggregateInputType
  }

  export type ResourceAllocationsGroupByOutputType = {
    allocation_id: string
    resource_id: string
    project_id: string
    task_id: string
    allocation_percentage: number
    resource_hours: number
    created_at: Date
    updated_at: Date
    _count: ResourceAllocationsCountAggregateOutputType | null
    _avg: ResourceAllocationsAvgAggregateOutputType | null
    _sum: ResourceAllocationsSumAggregateOutputType | null
    _min: ResourceAllocationsMinAggregateOutputType | null
    _max: ResourceAllocationsMaxAggregateOutputType | null
  }

  type GetResourceAllocationsGroupByPayload<T extends ResourceAllocationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResourceAllocationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResourceAllocationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResourceAllocationsGroupByOutputType[P]>
            : GetScalarType<T[P], ResourceAllocationsGroupByOutputType[P]>
        }
      >
    >


  export type ResourceAllocationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    allocation_id?: boolean
    resource_id?: boolean
    project_id?: boolean
    task_id?: boolean
    allocation_percentage?: boolean
    resource_hours?: boolean
    created_at?: boolean
    updated_at?: boolean
    task?: boolean | TaskDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    resource?: boolean | ResourceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resourceAllocations"]>


  export type ResourceAllocationsSelectScalar = {
    allocation_id?: boolean
    resource_id?: boolean
    project_id?: boolean
    task_id?: boolean
    allocation_percentage?: boolean
    resource_hours?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type ResourceAllocationsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | TaskDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    resource?: boolean | ResourceDefaultArgs<ExtArgs>
  }

  export type $ResourceAllocationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ResourceAllocations"
    objects: {
      task: Prisma.$TaskPayload<ExtArgs>
      project: Prisma.$ProjectPayload<ExtArgs>
      resource: Prisma.$ResourcePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      allocation_id: string
      resource_id: string
      project_id: string
      task_id: string
      allocation_percentage: number
      resource_hours: number
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["resourceAllocations"]>
    composites: {}
  }

  type ResourceAllocationsGetPayload<S extends boolean | null | undefined | ResourceAllocationsDefaultArgs> = $Result.GetResult<Prisma.$ResourceAllocationsPayload, S>

  type ResourceAllocationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ResourceAllocationsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ResourceAllocationsCountAggregateInputType | true
    }

  export interface ResourceAllocationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ResourceAllocations'], meta: { name: 'ResourceAllocations' } }
    /**
     * Find zero or one ResourceAllocations that matches the filter.
     * @param {ResourceAllocationsFindUniqueArgs} args - Arguments to find a ResourceAllocations
     * @example
     * // Get one ResourceAllocations
     * const resourceAllocations = await prisma.resourceAllocations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ResourceAllocationsFindUniqueArgs>(args: SelectSubset<T, ResourceAllocationsFindUniqueArgs<ExtArgs>>): Prisma__ResourceAllocationsClient<$Result.GetResult<Prisma.$ResourceAllocationsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ResourceAllocations that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ResourceAllocationsFindUniqueOrThrowArgs} args - Arguments to find a ResourceAllocations
     * @example
     * // Get one ResourceAllocations
     * const resourceAllocations = await prisma.resourceAllocations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ResourceAllocationsFindUniqueOrThrowArgs>(args: SelectSubset<T, ResourceAllocationsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ResourceAllocationsClient<$Result.GetResult<Prisma.$ResourceAllocationsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ResourceAllocations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceAllocationsFindFirstArgs} args - Arguments to find a ResourceAllocations
     * @example
     * // Get one ResourceAllocations
     * const resourceAllocations = await prisma.resourceAllocations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ResourceAllocationsFindFirstArgs>(args?: SelectSubset<T, ResourceAllocationsFindFirstArgs<ExtArgs>>): Prisma__ResourceAllocationsClient<$Result.GetResult<Prisma.$ResourceAllocationsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ResourceAllocations that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceAllocationsFindFirstOrThrowArgs} args - Arguments to find a ResourceAllocations
     * @example
     * // Get one ResourceAllocations
     * const resourceAllocations = await prisma.resourceAllocations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ResourceAllocationsFindFirstOrThrowArgs>(args?: SelectSubset<T, ResourceAllocationsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ResourceAllocationsClient<$Result.GetResult<Prisma.$ResourceAllocationsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ResourceAllocations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceAllocationsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ResourceAllocations
     * const resourceAllocations = await prisma.resourceAllocations.findMany()
     * 
     * // Get first 10 ResourceAllocations
     * const resourceAllocations = await prisma.resourceAllocations.findMany({ take: 10 })
     * 
     * // Only select the `allocation_id`
     * const resourceAllocationsWithAllocation_idOnly = await prisma.resourceAllocations.findMany({ select: { allocation_id: true } })
     * 
     */
    findMany<T extends ResourceAllocationsFindManyArgs>(args?: SelectSubset<T, ResourceAllocationsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResourceAllocationsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ResourceAllocations.
     * @param {ResourceAllocationsCreateArgs} args - Arguments to create a ResourceAllocations.
     * @example
     * // Create one ResourceAllocations
     * const ResourceAllocations = await prisma.resourceAllocations.create({
     *   data: {
     *     // ... data to create a ResourceAllocations
     *   }
     * })
     * 
     */
    create<T extends ResourceAllocationsCreateArgs>(args: SelectSubset<T, ResourceAllocationsCreateArgs<ExtArgs>>): Prisma__ResourceAllocationsClient<$Result.GetResult<Prisma.$ResourceAllocationsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ResourceAllocations.
     * @param {ResourceAllocationsCreateManyArgs} args - Arguments to create many ResourceAllocations.
     * @example
     * // Create many ResourceAllocations
     * const resourceAllocations = await prisma.resourceAllocations.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ResourceAllocationsCreateManyArgs>(args?: SelectSubset<T, ResourceAllocationsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ResourceAllocations.
     * @param {ResourceAllocationsDeleteArgs} args - Arguments to delete one ResourceAllocations.
     * @example
     * // Delete one ResourceAllocations
     * const ResourceAllocations = await prisma.resourceAllocations.delete({
     *   where: {
     *     // ... filter to delete one ResourceAllocations
     *   }
     * })
     * 
     */
    delete<T extends ResourceAllocationsDeleteArgs>(args: SelectSubset<T, ResourceAllocationsDeleteArgs<ExtArgs>>): Prisma__ResourceAllocationsClient<$Result.GetResult<Prisma.$ResourceAllocationsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ResourceAllocations.
     * @param {ResourceAllocationsUpdateArgs} args - Arguments to update one ResourceAllocations.
     * @example
     * // Update one ResourceAllocations
     * const resourceAllocations = await prisma.resourceAllocations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ResourceAllocationsUpdateArgs>(args: SelectSubset<T, ResourceAllocationsUpdateArgs<ExtArgs>>): Prisma__ResourceAllocationsClient<$Result.GetResult<Prisma.$ResourceAllocationsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ResourceAllocations.
     * @param {ResourceAllocationsDeleteManyArgs} args - Arguments to filter ResourceAllocations to delete.
     * @example
     * // Delete a few ResourceAllocations
     * const { count } = await prisma.resourceAllocations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ResourceAllocationsDeleteManyArgs>(args?: SelectSubset<T, ResourceAllocationsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResourceAllocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceAllocationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ResourceAllocations
     * const resourceAllocations = await prisma.resourceAllocations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ResourceAllocationsUpdateManyArgs>(args: SelectSubset<T, ResourceAllocationsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ResourceAllocations.
     * @param {ResourceAllocationsUpsertArgs} args - Arguments to update or create a ResourceAllocations.
     * @example
     * // Update or create a ResourceAllocations
     * const resourceAllocations = await prisma.resourceAllocations.upsert({
     *   create: {
     *     // ... data to create a ResourceAllocations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ResourceAllocations we want to update
     *   }
     * })
     */
    upsert<T extends ResourceAllocationsUpsertArgs>(args: SelectSubset<T, ResourceAllocationsUpsertArgs<ExtArgs>>): Prisma__ResourceAllocationsClient<$Result.GetResult<Prisma.$ResourceAllocationsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more ResourceAllocations that matches the filter.
     * @param {ResourceAllocationsFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const resourceAllocations = await prisma.resourceAllocations.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: ResourceAllocationsFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ResourceAllocations.
     * @param {ResourceAllocationsAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const resourceAllocations = await prisma.resourceAllocations.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ResourceAllocationsAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of ResourceAllocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceAllocationsCountArgs} args - Arguments to filter ResourceAllocations to count.
     * @example
     * // Count the number of ResourceAllocations
     * const count = await prisma.resourceAllocations.count({
     *   where: {
     *     // ... the filter for the ResourceAllocations we want to count
     *   }
     * })
    **/
    count<T extends ResourceAllocationsCountArgs>(
      args?: Subset<T, ResourceAllocationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResourceAllocationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ResourceAllocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceAllocationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResourceAllocationsAggregateArgs>(args: Subset<T, ResourceAllocationsAggregateArgs>): Prisma.PrismaPromise<GetResourceAllocationsAggregateType<T>>

    /**
     * Group by ResourceAllocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResourceAllocationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResourceAllocationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResourceAllocationsGroupByArgs['orderBy'] }
        : { orderBy?: ResourceAllocationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResourceAllocationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResourceAllocationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ResourceAllocations model
   */
  readonly fields: ResourceAllocationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ResourceAllocations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResourceAllocationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    task<T extends TaskDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TaskDefaultArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    resource<T extends ResourceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ResourceDefaultArgs<ExtArgs>>): Prisma__ResourceClient<$Result.GetResult<Prisma.$ResourcePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ResourceAllocations model
   */ 
  interface ResourceAllocationsFieldRefs {
    readonly allocation_id: FieldRef<"ResourceAllocations", 'String'>
    readonly resource_id: FieldRef<"ResourceAllocations", 'String'>
    readonly project_id: FieldRef<"ResourceAllocations", 'String'>
    readonly task_id: FieldRef<"ResourceAllocations", 'String'>
    readonly allocation_percentage: FieldRef<"ResourceAllocations", 'Float'>
    readonly resource_hours: FieldRef<"ResourceAllocations", 'Float'>
    readonly created_at: FieldRef<"ResourceAllocations", 'DateTime'>
    readonly updated_at: FieldRef<"ResourceAllocations", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ResourceAllocations findUnique
   */
  export type ResourceAllocationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResourceAllocations
     */
    select?: ResourceAllocationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceAllocationsInclude<ExtArgs> | null
    /**
     * Filter, which ResourceAllocations to fetch.
     */
    where: ResourceAllocationsWhereUniqueInput
  }

  /**
   * ResourceAllocations findUniqueOrThrow
   */
  export type ResourceAllocationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResourceAllocations
     */
    select?: ResourceAllocationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceAllocationsInclude<ExtArgs> | null
    /**
     * Filter, which ResourceAllocations to fetch.
     */
    where: ResourceAllocationsWhereUniqueInput
  }

  /**
   * ResourceAllocations findFirst
   */
  export type ResourceAllocationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResourceAllocations
     */
    select?: ResourceAllocationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceAllocationsInclude<ExtArgs> | null
    /**
     * Filter, which ResourceAllocations to fetch.
     */
    where?: ResourceAllocationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResourceAllocations to fetch.
     */
    orderBy?: ResourceAllocationsOrderByWithRelationInput | ResourceAllocationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResourceAllocations.
     */
    cursor?: ResourceAllocationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResourceAllocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResourceAllocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResourceAllocations.
     */
    distinct?: ResourceAllocationsScalarFieldEnum | ResourceAllocationsScalarFieldEnum[]
  }

  /**
   * ResourceAllocations findFirstOrThrow
   */
  export type ResourceAllocationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResourceAllocations
     */
    select?: ResourceAllocationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceAllocationsInclude<ExtArgs> | null
    /**
     * Filter, which ResourceAllocations to fetch.
     */
    where?: ResourceAllocationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResourceAllocations to fetch.
     */
    orderBy?: ResourceAllocationsOrderByWithRelationInput | ResourceAllocationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResourceAllocations.
     */
    cursor?: ResourceAllocationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResourceAllocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResourceAllocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResourceAllocations.
     */
    distinct?: ResourceAllocationsScalarFieldEnum | ResourceAllocationsScalarFieldEnum[]
  }

  /**
   * ResourceAllocations findMany
   */
  export type ResourceAllocationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResourceAllocations
     */
    select?: ResourceAllocationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceAllocationsInclude<ExtArgs> | null
    /**
     * Filter, which ResourceAllocations to fetch.
     */
    where?: ResourceAllocationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResourceAllocations to fetch.
     */
    orderBy?: ResourceAllocationsOrderByWithRelationInput | ResourceAllocationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ResourceAllocations.
     */
    cursor?: ResourceAllocationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResourceAllocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResourceAllocations.
     */
    skip?: number
    distinct?: ResourceAllocationsScalarFieldEnum | ResourceAllocationsScalarFieldEnum[]
  }

  /**
   * ResourceAllocations create
   */
  export type ResourceAllocationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResourceAllocations
     */
    select?: ResourceAllocationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceAllocationsInclude<ExtArgs> | null
    /**
     * The data needed to create a ResourceAllocations.
     */
    data: XOR<ResourceAllocationsCreateInput, ResourceAllocationsUncheckedCreateInput>
  }

  /**
   * ResourceAllocations createMany
   */
  export type ResourceAllocationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ResourceAllocations.
     */
    data: ResourceAllocationsCreateManyInput | ResourceAllocationsCreateManyInput[]
  }

  /**
   * ResourceAllocations update
   */
  export type ResourceAllocationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResourceAllocations
     */
    select?: ResourceAllocationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceAllocationsInclude<ExtArgs> | null
    /**
     * The data needed to update a ResourceAllocations.
     */
    data: XOR<ResourceAllocationsUpdateInput, ResourceAllocationsUncheckedUpdateInput>
    /**
     * Choose, which ResourceAllocations to update.
     */
    where: ResourceAllocationsWhereUniqueInput
  }

  /**
   * ResourceAllocations updateMany
   */
  export type ResourceAllocationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ResourceAllocations.
     */
    data: XOR<ResourceAllocationsUpdateManyMutationInput, ResourceAllocationsUncheckedUpdateManyInput>
    /**
     * Filter which ResourceAllocations to update
     */
    where?: ResourceAllocationsWhereInput
  }

  /**
   * ResourceAllocations upsert
   */
  export type ResourceAllocationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResourceAllocations
     */
    select?: ResourceAllocationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceAllocationsInclude<ExtArgs> | null
    /**
     * The filter to search for the ResourceAllocations to update in case it exists.
     */
    where: ResourceAllocationsWhereUniqueInput
    /**
     * In case the ResourceAllocations found by the `where` argument doesn't exist, create a new ResourceAllocations with this data.
     */
    create: XOR<ResourceAllocationsCreateInput, ResourceAllocationsUncheckedCreateInput>
    /**
     * In case the ResourceAllocations was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResourceAllocationsUpdateInput, ResourceAllocationsUncheckedUpdateInput>
  }

  /**
   * ResourceAllocations delete
   */
  export type ResourceAllocationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResourceAllocations
     */
    select?: ResourceAllocationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceAllocationsInclude<ExtArgs> | null
    /**
     * Filter which ResourceAllocations to delete.
     */
    where: ResourceAllocationsWhereUniqueInput
  }

  /**
   * ResourceAllocations deleteMany
   */
  export type ResourceAllocationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResourceAllocations to delete
     */
    where?: ResourceAllocationsWhereInput
  }

  /**
   * ResourceAllocations findRaw
   */
  export type ResourceAllocationsFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ResourceAllocations aggregateRaw
   */
  export type ResourceAllocationsAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ResourceAllocations without action
   */
  export type ResourceAllocationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResourceAllocations
     */
    select?: ResourceAllocationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResourceAllocationsInclude<ExtArgs> | null
  }


  /**
   * Model Reports
   */

  export type AggregateReports = {
    _count: ReportsCountAggregateOutputType | null
    _min: ReportsMinAggregateOutputType | null
    _max: ReportsMaxAggregateOutputType | null
  }

  export type ReportsMinAggregateOutputType = {
    report_id: string | null
    start_date: Date | null
    end_date: Date | null
    data: string | null
    generated_by: string | null
    created_at: Date | null
  }

  export type ReportsMaxAggregateOutputType = {
    report_id: string | null
    start_date: Date | null
    end_date: Date | null
    data: string | null
    generated_by: string | null
    created_at: Date | null
  }

  export type ReportsCountAggregateOutputType = {
    report_id: number
    start_date: number
    end_date: number
    data: number
    generated_by: number
    created_at: number
    _all: number
  }


  export type ReportsMinAggregateInputType = {
    report_id?: true
    start_date?: true
    end_date?: true
    data?: true
    generated_by?: true
    created_at?: true
  }

  export type ReportsMaxAggregateInputType = {
    report_id?: true
    start_date?: true
    end_date?: true
    data?: true
    generated_by?: true
    created_at?: true
  }

  export type ReportsCountAggregateInputType = {
    report_id?: true
    start_date?: true
    end_date?: true
    data?: true
    generated_by?: true
    created_at?: true
    _all?: true
  }

  export type ReportsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reports to aggregate.
     */
    where?: ReportsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportsOrderByWithRelationInput | ReportsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reports
    **/
    _count?: true | ReportsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportsMaxAggregateInputType
  }

  export type GetReportsAggregateType<T extends ReportsAggregateArgs> = {
        [P in keyof T & keyof AggregateReports]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReports[P]>
      : GetScalarType<T[P], AggregateReports[P]>
  }




  export type ReportsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportsWhereInput
    orderBy?: ReportsOrderByWithAggregationInput | ReportsOrderByWithAggregationInput[]
    by: ReportsScalarFieldEnum[] | ReportsScalarFieldEnum
    having?: ReportsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportsCountAggregateInputType | true
    _min?: ReportsMinAggregateInputType
    _max?: ReportsMaxAggregateInputType
  }

  export type ReportsGroupByOutputType = {
    report_id: string
    start_date: Date
    end_date: Date
    data: string
    generated_by: string
    created_at: Date
    _count: ReportsCountAggregateOutputType | null
    _min: ReportsMinAggregateOutputType | null
    _max: ReportsMaxAggregateOutputType | null
  }

  type GetReportsGroupByPayload<T extends ReportsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportsGroupByOutputType[P]>
            : GetScalarType<T[P], ReportsGroupByOutputType[P]>
        }
      >
    >


  export type ReportsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    report_id?: boolean
    start_date?: boolean
    end_date?: boolean
    data?: boolean
    generated_by?: boolean
    created_at?: boolean
    generatedByUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reports"]>


  export type ReportsSelectScalar = {
    report_id?: boolean
    start_date?: boolean
    end_date?: boolean
    data?: boolean
    generated_by?: boolean
    created_at?: boolean
  }

  export type ReportsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    generatedByUser?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ReportsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Reports"
    objects: {
      generatedByUser: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      report_id: string
      start_date: Date
      end_date: Date
      data: string
      generated_by: string
      created_at: Date
    }, ExtArgs["result"]["reports"]>
    composites: {}
  }

  type ReportsGetPayload<S extends boolean | null | undefined | ReportsDefaultArgs> = $Result.GetResult<Prisma.$ReportsPayload, S>

  type ReportsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReportsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReportsCountAggregateInputType | true
    }

  export interface ReportsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reports'], meta: { name: 'Reports' } }
    /**
     * Find zero or one Reports that matches the filter.
     * @param {ReportsFindUniqueArgs} args - Arguments to find a Reports
     * @example
     * // Get one Reports
     * const reports = await prisma.reports.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportsFindUniqueArgs>(args: SelectSubset<T, ReportsFindUniqueArgs<ExtArgs>>): Prisma__ReportsClient<$Result.GetResult<Prisma.$ReportsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Reports that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReportsFindUniqueOrThrowArgs} args - Arguments to find a Reports
     * @example
     * // Get one Reports
     * const reports = await prisma.reports.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportsFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportsClient<$Result.GetResult<Prisma.$ReportsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Reports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportsFindFirstArgs} args - Arguments to find a Reports
     * @example
     * // Get one Reports
     * const reports = await prisma.reports.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportsFindFirstArgs>(args?: SelectSubset<T, ReportsFindFirstArgs<ExtArgs>>): Prisma__ReportsClient<$Result.GetResult<Prisma.$ReportsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Reports that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportsFindFirstOrThrowArgs} args - Arguments to find a Reports
     * @example
     * // Get one Reports
     * const reports = await prisma.reports.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportsFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportsClient<$Result.GetResult<Prisma.$ReportsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Reports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reports
     * const reports = await prisma.reports.findMany()
     * 
     * // Get first 10 Reports
     * const reports = await prisma.reports.findMany({ take: 10 })
     * 
     * // Only select the `report_id`
     * const reportsWithReport_idOnly = await prisma.reports.findMany({ select: { report_id: true } })
     * 
     */
    findMany<T extends ReportsFindManyArgs>(args?: SelectSubset<T, ReportsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Reports.
     * @param {ReportsCreateArgs} args - Arguments to create a Reports.
     * @example
     * // Create one Reports
     * const Reports = await prisma.reports.create({
     *   data: {
     *     // ... data to create a Reports
     *   }
     * })
     * 
     */
    create<T extends ReportsCreateArgs>(args: SelectSubset<T, ReportsCreateArgs<ExtArgs>>): Prisma__ReportsClient<$Result.GetResult<Prisma.$ReportsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Reports.
     * @param {ReportsCreateManyArgs} args - Arguments to create many Reports.
     * @example
     * // Create many Reports
     * const reports = await prisma.reports.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportsCreateManyArgs>(args?: SelectSubset<T, ReportsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Reports.
     * @param {ReportsDeleteArgs} args - Arguments to delete one Reports.
     * @example
     * // Delete one Reports
     * const Reports = await prisma.reports.delete({
     *   where: {
     *     // ... filter to delete one Reports
     *   }
     * })
     * 
     */
    delete<T extends ReportsDeleteArgs>(args: SelectSubset<T, ReportsDeleteArgs<ExtArgs>>): Prisma__ReportsClient<$Result.GetResult<Prisma.$ReportsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Reports.
     * @param {ReportsUpdateArgs} args - Arguments to update one Reports.
     * @example
     * // Update one Reports
     * const reports = await prisma.reports.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportsUpdateArgs>(args: SelectSubset<T, ReportsUpdateArgs<ExtArgs>>): Prisma__ReportsClient<$Result.GetResult<Prisma.$ReportsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Reports.
     * @param {ReportsDeleteManyArgs} args - Arguments to filter Reports to delete.
     * @example
     * // Delete a few Reports
     * const { count } = await prisma.reports.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportsDeleteManyArgs>(args?: SelectSubset<T, ReportsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reports
     * const reports = await prisma.reports.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportsUpdateManyArgs>(args: SelectSubset<T, ReportsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reports.
     * @param {ReportsUpsertArgs} args - Arguments to update or create a Reports.
     * @example
     * // Update or create a Reports
     * const reports = await prisma.reports.upsert({
     *   create: {
     *     // ... data to create a Reports
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reports we want to update
     *   }
     * })
     */
    upsert<T extends ReportsUpsertArgs>(args: SelectSubset<T, ReportsUpsertArgs<ExtArgs>>): Prisma__ReportsClient<$Result.GetResult<Prisma.$ReportsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Reports that matches the filter.
     * @param {ReportsFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const reports = await prisma.reports.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: ReportsFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Reports.
     * @param {ReportsAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const reports = await prisma.reports.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ReportsAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportsCountArgs} args - Arguments to filter Reports to count.
     * @example
     * // Count the number of Reports
     * const count = await prisma.reports.count({
     *   where: {
     *     // ... the filter for the Reports we want to count
     *   }
     * })
    **/
    count<T extends ReportsCountArgs>(
      args?: Subset<T, ReportsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportsAggregateArgs>(args: Subset<T, ReportsAggregateArgs>): Prisma.PrismaPromise<GetReportsAggregateType<T>>

    /**
     * Group by Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportsGroupByArgs['orderBy'] }
        : { orderBy?: ReportsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Reports model
   */
  readonly fields: ReportsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reports.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    generatedByUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Reports model
   */ 
  interface ReportsFieldRefs {
    readonly report_id: FieldRef<"Reports", 'String'>
    readonly start_date: FieldRef<"Reports", 'DateTime'>
    readonly end_date: FieldRef<"Reports", 'DateTime'>
    readonly data: FieldRef<"Reports", 'String'>
    readonly generated_by: FieldRef<"Reports", 'String'>
    readonly created_at: FieldRef<"Reports", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Reports findUnique
   */
  export type ReportsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reports
     */
    select?: ReportsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportsInclude<ExtArgs> | null
    /**
     * Filter, which Reports to fetch.
     */
    where: ReportsWhereUniqueInput
  }

  /**
   * Reports findUniqueOrThrow
   */
  export type ReportsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reports
     */
    select?: ReportsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportsInclude<ExtArgs> | null
    /**
     * Filter, which Reports to fetch.
     */
    where: ReportsWhereUniqueInput
  }

  /**
   * Reports findFirst
   */
  export type ReportsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reports
     */
    select?: ReportsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportsInclude<ExtArgs> | null
    /**
     * Filter, which Reports to fetch.
     */
    where?: ReportsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportsOrderByWithRelationInput | ReportsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportsScalarFieldEnum | ReportsScalarFieldEnum[]
  }

  /**
   * Reports findFirstOrThrow
   */
  export type ReportsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reports
     */
    select?: ReportsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportsInclude<ExtArgs> | null
    /**
     * Filter, which Reports to fetch.
     */
    where?: ReportsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportsOrderByWithRelationInput | ReportsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportsScalarFieldEnum | ReportsScalarFieldEnum[]
  }

  /**
   * Reports findMany
   */
  export type ReportsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reports
     */
    select?: ReportsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportsInclude<ExtArgs> | null
    /**
     * Filter, which Reports to fetch.
     */
    where?: ReportsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportsOrderByWithRelationInput | ReportsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reports.
     */
    cursor?: ReportsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    distinct?: ReportsScalarFieldEnum | ReportsScalarFieldEnum[]
  }

  /**
   * Reports create
   */
  export type ReportsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reports
     */
    select?: ReportsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportsInclude<ExtArgs> | null
    /**
     * The data needed to create a Reports.
     */
    data: XOR<ReportsCreateInput, ReportsUncheckedCreateInput>
  }

  /**
   * Reports createMany
   */
  export type ReportsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reports.
     */
    data: ReportsCreateManyInput | ReportsCreateManyInput[]
  }

  /**
   * Reports update
   */
  export type ReportsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reports
     */
    select?: ReportsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportsInclude<ExtArgs> | null
    /**
     * The data needed to update a Reports.
     */
    data: XOR<ReportsUpdateInput, ReportsUncheckedUpdateInput>
    /**
     * Choose, which Reports to update.
     */
    where: ReportsWhereUniqueInput
  }

  /**
   * Reports updateMany
   */
  export type ReportsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reports.
     */
    data: XOR<ReportsUpdateManyMutationInput, ReportsUncheckedUpdateManyInput>
    /**
     * Filter which Reports to update
     */
    where?: ReportsWhereInput
  }

  /**
   * Reports upsert
   */
  export type ReportsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reports
     */
    select?: ReportsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportsInclude<ExtArgs> | null
    /**
     * The filter to search for the Reports to update in case it exists.
     */
    where: ReportsWhereUniqueInput
    /**
     * In case the Reports found by the `where` argument doesn't exist, create a new Reports with this data.
     */
    create: XOR<ReportsCreateInput, ReportsUncheckedCreateInput>
    /**
     * In case the Reports was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportsUpdateInput, ReportsUncheckedUpdateInput>
  }

  /**
   * Reports delete
   */
  export type ReportsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reports
     */
    select?: ReportsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportsInclude<ExtArgs> | null
    /**
     * Filter which Reports to delete.
     */
    where: ReportsWhereUniqueInput
  }

  /**
   * Reports deleteMany
   */
  export type ReportsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reports to delete
     */
    where?: ReportsWhereInput
  }

  /**
   * Reports findRaw
   */
  export type ReportsFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Reports aggregateRaw
   */
  export type ReportsAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Reports without action
   */
  export type ReportsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reports
     */
    select?: ReportsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportsInclude<ExtArgs> | null
  }


  /**
   * Model CostEstimations
   */

  export type AggregateCostEstimations = {
    _count: CostEstimationsCountAggregateOutputType | null
    _avg: CostEstimationsAvgAggregateOutputType | null
    _sum: CostEstimationsSumAggregateOutputType | null
    _min: CostEstimationsMinAggregateOutputType | null
    _max: CostEstimationsMaxAggregateOutputType | null
  }

  export type CostEstimationsAvgAggregateOutputType = {
    total_hours: number | null
    estimated_cost: number | null
  }

  export type CostEstimationsSumAggregateOutputType = {
    total_hours: number | null
    estimated_cost: number | null
  }

  export type CostEstimationsMinAggregateOutputType = {
    cost_id: string | null
    project_id: string | null
    total_hours: number | null
    estimated_cost: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CostEstimationsMaxAggregateOutputType = {
    cost_id: string | null
    project_id: string | null
    total_hours: number | null
    estimated_cost: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CostEstimationsCountAggregateOutputType = {
    cost_id: number
    project_id: number
    total_hours: number
    estimated_cost: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type CostEstimationsAvgAggregateInputType = {
    total_hours?: true
    estimated_cost?: true
  }

  export type CostEstimationsSumAggregateInputType = {
    total_hours?: true
    estimated_cost?: true
  }

  export type CostEstimationsMinAggregateInputType = {
    cost_id?: true
    project_id?: true
    total_hours?: true
    estimated_cost?: true
    created_at?: true
    updated_at?: true
  }

  export type CostEstimationsMaxAggregateInputType = {
    cost_id?: true
    project_id?: true
    total_hours?: true
    estimated_cost?: true
    created_at?: true
    updated_at?: true
  }

  export type CostEstimationsCountAggregateInputType = {
    cost_id?: true
    project_id?: true
    total_hours?: true
    estimated_cost?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type CostEstimationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CostEstimations to aggregate.
     */
    where?: CostEstimationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CostEstimations to fetch.
     */
    orderBy?: CostEstimationsOrderByWithRelationInput | CostEstimationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CostEstimationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CostEstimations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CostEstimations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CostEstimations
    **/
    _count?: true | CostEstimationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CostEstimationsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CostEstimationsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CostEstimationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CostEstimationsMaxAggregateInputType
  }

  export type GetCostEstimationsAggregateType<T extends CostEstimationsAggregateArgs> = {
        [P in keyof T & keyof AggregateCostEstimations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCostEstimations[P]>
      : GetScalarType<T[P], AggregateCostEstimations[P]>
  }




  export type CostEstimationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CostEstimationsWhereInput
    orderBy?: CostEstimationsOrderByWithAggregationInput | CostEstimationsOrderByWithAggregationInput[]
    by: CostEstimationsScalarFieldEnum[] | CostEstimationsScalarFieldEnum
    having?: CostEstimationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CostEstimationsCountAggregateInputType | true
    _avg?: CostEstimationsAvgAggregateInputType
    _sum?: CostEstimationsSumAggregateInputType
    _min?: CostEstimationsMinAggregateInputType
    _max?: CostEstimationsMaxAggregateInputType
  }

  export type CostEstimationsGroupByOutputType = {
    cost_id: string
    project_id: string
    total_hours: number
    estimated_cost: number
    created_at: Date
    updated_at: Date
    _count: CostEstimationsCountAggregateOutputType | null
    _avg: CostEstimationsAvgAggregateOutputType | null
    _sum: CostEstimationsSumAggregateOutputType | null
    _min: CostEstimationsMinAggregateOutputType | null
    _max: CostEstimationsMaxAggregateOutputType | null
  }

  type GetCostEstimationsGroupByPayload<T extends CostEstimationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CostEstimationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CostEstimationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CostEstimationsGroupByOutputType[P]>
            : GetScalarType<T[P], CostEstimationsGroupByOutputType[P]>
        }
      >
    >


  export type CostEstimationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    cost_id?: boolean
    project_id?: boolean
    total_hours?: boolean
    estimated_cost?: boolean
    created_at?: boolean
    updated_at?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["costEstimations"]>


  export type CostEstimationsSelectScalar = {
    cost_id?: boolean
    project_id?: boolean
    total_hours?: boolean
    estimated_cost?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type CostEstimationsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $CostEstimationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CostEstimations"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      cost_id: string
      project_id: string
      total_hours: number
      estimated_cost: number
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["costEstimations"]>
    composites: {}
  }

  type CostEstimationsGetPayload<S extends boolean | null | undefined | CostEstimationsDefaultArgs> = $Result.GetResult<Prisma.$CostEstimationsPayload, S>

  type CostEstimationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CostEstimationsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CostEstimationsCountAggregateInputType | true
    }

  export interface CostEstimationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CostEstimations'], meta: { name: 'CostEstimations' } }
    /**
     * Find zero or one CostEstimations that matches the filter.
     * @param {CostEstimationsFindUniqueArgs} args - Arguments to find a CostEstimations
     * @example
     * // Get one CostEstimations
     * const costEstimations = await prisma.costEstimations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CostEstimationsFindUniqueArgs>(args: SelectSubset<T, CostEstimationsFindUniqueArgs<ExtArgs>>): Prisma__CostEstimationsClient<$Result.GetResult<Prisma.$CostEstimationsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CostEstimations that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CostEstimationsFindUniqueOrThrowArgs} args - Arguments to find a CostEstimations
     * @example
     * // Get one CostEstimations
     * const costEstimations = await prisma.costEstimations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CostEstimationsFindUniqueOrThrowArgs>(args: SelectSubset<T, CostEstimationsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CostEstimationsClient<$Result.GetResult<Prisma.$CostEstimationsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CostEstimations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CostEstimationsFindFirstArgs} args - Arguments to find a CostEstimations
     * @example
     * // Get one CostEstimations
     * const costEstimations = await prisma.costEstimations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CostEstimationsFindFirstArgs>(args?: SelectSubset<T, CostEstimationsFindFirstArgs<ExtArgs>>): Prisma__CostEstimationsClient<$Result.GetResult<Prisma.$CostEstimationsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CostEstimations that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CostEstimationsFindFirstOrThrowArgs} args - Arguments to find a CostEstimations
     * @example
     * // Get one CostEstimations
     * const costEstimations = await prisma.costEstimations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CostEstimationsFindFirstOrThrowArgs>(args?: SelectSubset<T, CostEstimationsFindFirstOrThrowArgs<ExtArgs>>): Prisma__CostEstimationsClient<$Result.GetResult<Prisma.$CostEstimationsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CostEstimations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CostEstimationsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CostEstimations
     * const costEstimations = await prisma.costEstimations.findMany()
     * 
     * // Get first 10 CostEstimations
     * const costEstimations = await prisma.costEstimations.findMany({ take: 10 })
     * 
     * // Only select the `cost_id`
     * const costEstimationsWithCost_idOnly = await prisma.costEstimations.findMany({ select: { cost_id: true } })
     * 
     */
    findMany<T extends CostEstimationsFindManyArgs>(args?: SelectSubset<T, CostEstimationsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CostEstimationsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CostEstimations.
     * @param {CostEstimationsCreateArgs} args - Arguments to create a CostEstimations.
     * @example
     * // Create one CostEstimations
     * const CostEstimations = await prisma.costEstimations.create({
     *   data: {
     *     // ... data to create a CostEstimations
     *   }
     * })
     * 
     */
    create<T extends CostEstimationsCreateArgs>(args: SelectSubset<T, CostEstimationsCreateArgs<ExtArgs>>): Prisma__CostEstimationsClient<$Result.GetResult<Prisma.$CostEstimationsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CostEstimations.
     * @param {CostEstimationsCreateManyArgs} args - Arguments to create many CostEstimations.
     * @example
     * // Create many CostEstimations
     * const costEstimations = await prisma.costEstimations.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CostEstimationsCreateManyArgs>(args?: SelectSubset<T, CostEstimationsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CostEstimations.
     * @param {CostEstimationsDeleteArgs} args - Arguments to delete one CostEstimations.
     * @example
     * // Delete one CostEstimations
     * const CostEstimations = await prisma.costEstimations.delete({
     *   where: {
     *     // ... filter to delete one CostEstimations
     *   }
     * })
     * 
     */
    delete<T extends CostEstimationsDeleteArgs>(args: SelectSubset<T, CostEstimationsDeleteArgs<ExtArgs>>): Prisma__CostEstimationsClient<$Result.GetResult<Prisma.$CostEstimationsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CostEstimations.
     * @param {CostEstimationsUpdateArgs} args - Arguments to update one CostEstimations.
     * @example
     * // Update one CostEstimations
     * const costEstimations = await prisma.costEstimations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CostEstimationsUpdateArgs>(args: SelectSubset<T, CostEstimationsUpdateArgs<ExtArgs>>): Prisma__CostEstimationsClient<$Result.GetResult<Prisma.$CostEstimationsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CostEstimations.
     * @param {CostEstimationsDeleteManyArgs} args - Arguments to filter CostEstimations to delete.
     * @example
     * // Delete a few CostEstimations
     * const { count } = await prisma.costEstimations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CostEstimationsDeleteManyArgs>(args?: SelectSubset<T, CostEstimationsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CostEstimations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CostEstimationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CostEstimations
     * const costEstimations = await prisma.costEstimations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CostEstimationsUpdateManyArgs>(args: SelectSubset<T, CostEstimationsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CostEstimations.
     * @param {CostEstimationsUpsertArgs} args - Arguments to update or create a CostEstimations.
     * @example
     * // Update or create a CostEstimations
     * const costEstimations = await prisma.costEstimations.upsert({
     *   create: {
     *     // ... data to create a CostEstimations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CostEstimations we want to update
     *   }
     * })
     */
    upsert<T extends CostEstimationsUpsertArgs>(args: SelectSubset<T, CostEstimationsUpsertArgs<ExtArgs>>): Prisma__CostEstimationsClient<$Result.GetResult<Prisma.$CostEstimationsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more CostEstimations that matches the filter.
     * @param {CostEstimationsFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const costEstimations = await prisma.costEstimations.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: CostEstimationsFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a CostEstimations.
     * @param {CostEstimationsAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const costEstimations = await prisma.costEstimations.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: CostEstimationsAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of CostEstimations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CostEstimationsCountArgs} args - Arguments to filter CostEstimations to count.
     * @example
     * // Count the number of CostEstimations
     * const count = await prisma.costEstimations.count({
     *   where: {
     *     // ... the filter for the CostEstimations we want to count
     *   }
     * })
    **/
    count<T extends CostEstimationsCountArgs>(
      args?: Subset<T, CostEstimationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CostEstimationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CostEstimations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CostEstimationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CostEstimationsAggregateArgs>(args: Subset<T, CostEstimationsAggregateArgs>): Prisma.PrismaPromise<GetCostEstimationsAggregateType<T>>

    /**
     * Group by CostEstimations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CostEstimationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CostEstimationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CostEstimationsGroupByArgs['orderBy'] }
        : { orderBy?: CostEstimationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CostEstimationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCostEstimationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CostEstimations model
   */
  readonly fields: CostEstimationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CostEstimations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CostEstimationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CostEstimations model
   */ 
  interface CostEstimationsFieldRefs {
    readonly cost_id: FieldRef<"CostEstimations", 'String'>
    readonly project_id: FieldRef<"CostEstimations", 'String'>
    readonly total_hours: FieldRef<"CostEstimations", 'Float'>
    readonly estimated_cost: FieldRef<"CostEstimations", 'Float'>
    readonly created_at: FieldRef<"CostEstimations", 'DateTime'>
    readonly updated_at: FieldRef<"CostEstimations", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CostEstimations findUnique
   */
  export type CostEstimationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostEstimations
     */
    select?: CostEstimationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostEstimationsInclude<ExtArgs> | null
    /**
     * Filter, which CostEstimations to fetch.
     */
    where: CostEstimationsWhereUniqueInput
  }

  /**
   * CostEstimations findUniqueOrThrow
   */
  export type CostEstimationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostEstimations
     */
    select?: CostEstimationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostEstimationsInclude<ExtArgs> | null
    /**
     * Filter, which CostEstimations to fetch.
     */
    where: CostEstimationsWhereUniqueInput
  }

  /**
   * CostEstimations findFirst
   */
  export type CostEstimationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostEstimations
     */
    select?: CostEstimationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostEstimationsInclude<ExtArgs> | null
    /**
     * Filter, which CostEstimations to fetch.
     */
    where?: CostEstimationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CostEstimations to fetch.
     */
    orderBy?: CostEstimationsOrderByWithRelationInput | CostEstimationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CostEstimations.
     */
    cursor?: CostEstimationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CostEstimations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CostEstimations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CostEstimations.
     */
    distinct?: CostEstimationsScalarFieldEnum | CostEstimationsScalarFieldEnum[]
  }

  /**
   * CostEstimations findFirstOrThrow
   */
  export type CostEstimationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostEstimations
     */
    select?: CostEstimationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostEstimationsInclude<ExtArgs> | null
    /**
     * Filter, which CostEstimations to fetch.
     */
    where?: CostEstimationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CostEstimations to fetch.
     */
    orderBy?: CostEstimationsOrderByWithRelationInput | CostEstimationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CostEstimations.
     */
    cursor?: CostEstimationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CostEstimations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CostEstimations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CostEstimations.
     */
    distinct?: CostEstimationsScalarFieldEnum | CostEstimationsScalarFieldEnum[]
  }

  /**
   * CostEstimations findMany
   */
  export type CostEstimationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostEstimations
     */
    select?: CostEstimationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostEstimationsInclude<ExtArgs> | null
    /**
     * Filter, which CostEstimations to fetch.
     */
    where?: CostEstimationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CostEstimations to fetch.
     */
    orderBy?: CostEstimationsOrderByWithRelationInput | CostEstimationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CostEstimations.
     */
    cursor?: CostEstimationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CostEstimations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CostEstimations.
     */
    skip?: number
    distinct?: CostEstimationsScalarFieldEnum | CostEstimationsScalarFieldEnum[]
  }

  /**
   * CostEstimations create
   */
  export type CostEstimationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostEstimations
     */
    select?: CostEstimationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostEstimationsInclude<ExtArgs> | null
    /**
     * The data needed to create a CostEstimations.
     */
    data: XOR<CostEstimationsCreateInput, CostEstimationsUncheckedCreateInput>
  }

  /**
   * CostEstimations createMany
   */
  export type CostEstimationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CostEstimations.
     */
    data: CostEstimationsCreateManyInput | CostEstimationsCreateManyInput[]
  }

  /**
   * CostEstimations update
   */
  export type CostEstimationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostEstimations
     */
    select?: CostEstimationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostEstimationsInclude<ExtArgs> | null
    /**
     * The data needed to update a CostEstimations.
     */
    data: XOR<CostEstimationsUpdateInput, CostEstimationsUncheckedUpdateInput>
    /**
     * Choose, which CostEstimations to update.
     */
    where: CostEstimationsWhereUniqueInput
  }

  /**
   * CostEstimations updateMany
   */
  export type CostEstimationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CostEstimations.
     */
    data: XOR<CostEstimationsUpdateManyMutationInput, CostEstimationsUncheckedUpdateManyInput>
    /**
     * Filter which CostEstimations to update
     */
    where?: CostEstimationsWhereInput
  }

  /**
   * CostEstimations upsert
   */
  export type CostEstimationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostEstimations
     */
    select?: CostEstimationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostEstimationsInclude<ExtArgs> | null
    /**
     * The filter to search for the CostEstimations to update in case it exists.
     */
    where: CostEstimationsWhereUniqueInput
    /**
     * In case the CostEstimations found by the `where` argument doesn't exist, create a new CostEstimations with this data.
     */
    create: XOR<CostEstimationsCreateInput, CostEstimationsUncheckedCreateInput>
    /**
     * In case the CostEstimations was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CostEstimationsUpdateInput, CostEstimationsUncheckedUpdateInput>
  }

  /**
   * CostEstimations delete
   */
  export type CostEstimationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostEstimations
     */
    select?: CostEstimationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostEstimationsInclude<ExtArgs> | null
    /**
     * Filter which CostEstimations to delete.
     */
    where: CostEstimationsWhereUniqueInput
  }

  /**
   * CostEstimations deleteMany
   */
  export type CostEstimationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CostEstimations to delete
     */
    where?: CostEstimationsWhereInput
  }

  /**
   * CostEstimations findRaw
   */
  export type CostEstimationsFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * CostEstimations aggregateRaw
   */
  export type CostEstimationsAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * CostEstimations without action
   */
  export type CostEstimationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostEstimations
     */
    select?: CostEstimationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostEstimationsInclude<ExtArgs> | null
  }


  /**
   * Model DurationEstimations
   */

  export type AggregateDurationEstimations = {
    _count: DurationEstimationsCountAggregateOutputType | null
    _avg: DurationEstimationsAvgAggregateOutputType | null
    _sum: DurationEstimationsSumAggregateOutputType | null
    _min: DurationEstimationsMinAggregateOutputType | null
    _max: DurationEstimationsMaxAggregateOutputType | null
  }

  export type DurationEstimationsAvgAggregateOutputType = {
    total_hours: number | null
    estimated_day: number | null
  }

  export type DurationEstimationsSumAggregateOutputType = {
    total_hours: number | null
    estimated_day: number | null
  }

  export type DurationEstimationsMinAggregateOutputType = {
    duration_id: string | null
    project_id: string | null
    total_hours: number | null
    estimated_day: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type DurationEstimationsMaxAggregateOutputType = {
    duration_id: string | null
    project_id: string | null
    total_hours: number | null
    estimated_day: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type DurationEstimationsCountAggregateOutputType = {
    duration_id: number
    project_id: number
    total_hours: number
    estimated_day: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type DurationEstimationsAvgAggregateInputType = {
    total_hours?: true
    estimated_day?: true
  }

  export type DurationEstimationsSumAggregateInputType = {
    total_hours?: true
    estimated_day?: true
  }

  export type DurationEstimationsMinAggregateInputType = {
    duration_id?: true
    project_id?: true
    total_hours?: true
    estimated_day?: true
    created_at?: true
    updated_at?: true
  }

  export type DurationEstimationsMaxAggregateInputType = {
    duration_id?: true
    project_id?: true
    total_hours?: true
    estimated_day?: true
    created_at?: true
    updated_at?: true
  }

  export type DurationEstimationsCountAggregateInputType = {
    duration_id?: true
    project_id?: true
    total_hours?: true
    estimated_day?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type DurationEstimationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DurationEstimations to aggregate.
     */
    where?: DurationEstimationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DurationEstimations to fetch.
     */
    orderBy?: DurationEstimationsOrderByWithRelationInput | DurationEstimationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DurationEstimationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DurationEstimations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DurationEstimations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DurationEstimations
    **/
    _count?: true | DurationEstimationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DurationEstimationsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DurationEstimationsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DurationEstimationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DurationEstimationsMaxAggregateInputType
  }

  export type GetDurationEstimationsAggregateType<T extends DurationEstimationsAggregateArgs> = {
        [P in keyof T & keyof AggregateDurationEstimations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDurationEstimations[P]>
      : GetScalarType<T[P], AggregateDurationEstimations[P]>
  }




  export type DurationEstimationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DurationEstimationsWhereInput
    orderBy?: DurationEstimationsOrderByWithAggregationInput | DurationEstimationsOrderByWithAggregationInput[]
    by: DurationEstimationsScalarFieldEnum[] | DurationEstimationsScalarFieldEnum
    having?: DurationEstimationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DurationEstimationsCountAggregateInputType | true
    _avg?: DurationEstimationsAvgAggregateInputType
    _sum?: DurationEstimationsSumAggregateInputType
    _min?: DurationEstimationsMinAggregateInputType
    _max?: DurationEstimationsMaxAggregateInputType
  }

  export type DurationEstimationsGroupByOutputType = {
    duration_id: string
    project_id: string
    total_hours: number
    estimated_day: number
    created_at: Date
    updated_at: Date
    _count: DurationEstimationsCountAggregateOutputType | null
    _avg: DurationEstimationsAvgAggregateOutputType | null
    _sum: DurationEstimationsSumAggregateOutputType | null
    _min: DurationEstimationsMinAggregateOutputType | null
    _max: DurationEstimationsMaxAggregateOutputType | null
  }

  type GetDurationEstimationsGroupByPayload<T extends DurationEstimationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DurationEstimationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DurationEstimationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DurationEstimationsGroupByOutputType[P]>
            : GetScalarType<T[P], DurationEstimationsGroupByOutputType[P]>
        }
      >
    >


  export type DurationEstimationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    duration_id?: boolean
    project_id?: boolean
    total_hours?: boolean
    estimated_day?: boolean
    created_at?: boolean
    updated_at?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["durationEstimations"]>


  export type DurationEstimationsSelectScalar = {
    duration_id?: boolean
    project_id?: boolean
    total_hours?: boolean
    estimated_day?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type DurationEstimationsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $DurationEstimationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DurationEstimations"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      duration_id: string
      project_id: string
      total_hours: number
      estimated_day: number
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["durationEstimations"]>
    composites: {}
  }

  type DurationEstimationsGetPayload<S extends boolean | null | undefined | DurationEstimationsDefaultArgs> = $Result.GetResult<Prisma.$DurationEstimationsPayload, S>

  type DurationEstimationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DurationEstimationsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DurationEstimationsCountAggregateInputType | true
    }

  export interface DurationEstimationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DurationEstimations'], meta: { name: 'DurationEstimations' } }
    /**
     * Find zero or one DurationEstimations that matches the filter.
     * @param {DurationEstimationsFindUniqueArgs} args - Arguments to find a DurationEstimations
     * @example
     * // Get one DurationEstimations
     * const durationEstimations = await prisma.durationEstimations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DurationEstimationsFindUniqueArgs>(args: SelectSubset<T, DurationEstimationsFindUniqueArgs<ExtArgs>>): Prisma__DurationEstimationsClient<$Result.GetResult<Prisma.$DurationEstimationsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DurationEstimations that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DurationEstimationsFindUniqueOrThrowArgs} args - Arguments to find a DurationEstimations
     * @example
     * // Get one DurationEstimations
     * const durationEstimations = await prisma.durationEstimations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DurationEstimationsFindUniqueOrThrowArgs>(args: SelectSubset<T, DurationEstimationsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DurationEstimationsClient<$Result.GetResult<Prisma.$DurationEstimationsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DurationEstimations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DurationEstimationsFindFirstArgs} args - Arguments to find a DurationEstimations
     * @example
     * // Get one DurationEstimations
     * const durationEstimations = await prisma.durationEstimations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DurationEstimationsFindFirstArgs>(args?: SelectSubset<T, DurationEstimationsFindFirstArgs<ExtArgs>>): Prisma__DurationEstimationsClient<$Result.GetResult<Prisma.$DurationEstimationsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DurationEstimations that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DurationEstimationsFindFirstOrThrowArgs} args - Arguments to find a DurationEstimations
     * @example
     * // Get one DurationEstimations
     * const durationEstimations = await prisma.durationEstimations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DurationEstimationsFindFirstOrThrowArgs>(args?: SelectSubset<T, DurationEstimationsFindFirstOrThrowArgs<ExtArgs>>): Prisma__DurationEstimationsClient<$Result.GetResult<Prisma.$DurationEstimationsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DurationEstimations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DurationEstimationsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DurationEstimations
     * const durationEstimations = await prisma.durationEstimations.findMany()
     * 
     * // Get first 10 DurationEstimations
     * const durationEstimations = await prisma.durationEstimations.findMany({ take: 10 })
     * 
     * // Only select the `duration_id`
     * const durationEstimationsWithDuration_idOnly = await prisma.durationEstimations.findMany({ select: { duration_id: true } })
     * 
     */
    findMany<T extends DurationEstimationsFindManyArgs>(args?: SelectSubset<T, DurationEstimationsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DurationEstimationsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DurationEstimations.
     * @param {DurationEstimationsCreateArgs} args - Arguments to create a DurationEstimations.
     * @example
     * // Create one DurationEstimations
     * const DurationEstimations = await prisma.durationEstimations.create({
     *   data: {
     *     // ... data to create a DurationEstimations
     *   }
     * })
     * 
     */
    create<T extends DurationEstimationsCreateArgs>(args: SelectSubset<T, DurationEstimationsCreateArgs<ExtArgs>>): Prisma__DurationEstimationsClient<$Result.GetResult<Prisma.$DurationEstimationsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DurationEstimations.
     * @param {DurationEstimationsCreateManyArgs} args - Arguments to create many DurationEstimations.
     * @example
     * // Create many DurationEstimations
     * const durationEstimations = await prisma.durationEstimations.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DurationEstimationsCreateManyArgs>(args?: SelectSubset<T, DurationEstimationsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DurationEstimations.
     * @param {DurationEstimationsDeleteArgs} args - Arguments to delete one DurationEstimations.
     * @example
     * // Delete one DurationEstimations
     * const DurationEstimations = await prisma.durationEstimations.delete({
     *   where: {
     *     // ... filter to delete one DurationEstimations
     *   }
     * })
     * 
     */
    delete<T extends DurationEstimationsDeleteArgs>(args: SelectSubset<T, DurationEstimationsDeleteArgs<ExtArgs>>): Prisma__DurationEstimationsClient<$Result.GetResult<Prisma.$DurationEstimationsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DurationEstimations.
     * @param {DurationEstimationsUpdateArgs} args - Arguments to update one DurationEstimations.
     * @example
     * // Update one DurationEstimations
     * const durationEstimations = await prisma.durationEstimations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DurationEstimationsUpdateArgs>(args: SelectSubset<T, DurationEstimationsUpdateArgs<ExtArgs>>): Prisma__DurationEstimationsClient<$Result.GetResult<Prisma.$DurationEstimationsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DurationEstimations.
     * @param {DurationEstimationsDeleteManyArgs} args - Arguments to filter DurationEstimations to delete.
     * @example
     * // Delete a few DurationEstimations
     * const { count } = await prisma.durationEstimations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DurationEstimationsDeleteManyArgs>(args?: SelectSubset<T, DurationEstimationsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DurationEstimations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DurationEstimationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DurationEstimations
     * const durationEstimations = await prisma.durationEstimations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DurationEstimationsUpdateManyArgs>(args: SelectSubset<T, DurationEstimationsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DurationEstimations.
     * @param {DurationEstimationsUpsertArgs} args - Arguments to update or create a DurationEstimations.
     * @example
     * // Update or create a DurationEstimations
     * const durationEstimations = await prisma.durationEstimations.upsert({
     *   create: {
     *     // ... data to create a DurationEstimations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DurationEstimations we want to update
     *   }
     * })
     */
    upsert<T extends DurationEstimationsUpsertArgs>(args: SelectSubset<T, DurationEstimationsUpsertArgs<ExtArgs>>): Prisma__DurationEstimationsClient<$Result.GetResult<Prisma.$DurationEstimationsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more DurationEstimations that matches the filter.
     * @param {DurationEstimationsFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const durationEstimations = await prisma.durationEstimations.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: DurationEstimationsFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a DurationEstimations.
     * @param {DurationEstimationsAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const durationEstimations = await prisma.durationEstimations.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: DurationEstimationsAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of DurationEstimations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DurationEstimationsCountArgs} args - Arguments to filter DurationEstimations to count.
     * @example
     * // Count the number of DurationEstimations
     * const count = await prisma.durationEstimations.count({
     *   where: {
     *     // ... the filter for the DurationEstimations we want to count
     *   }
     * })
    **/
    count<T extends DurationEstimationsCountArgs>(
      args?: Subset<T, DurationEstimationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DurationEstimationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DurationEstimations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DurationEstimationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DurationEstimationsAggregateArgs>(args: Subset<T, DurationEstimationsAggregateArgs>): Prisma.PrismaPromise<GetDurationEstimationsAggregateType<T>>

    /**
     * Group by DurationEstimations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DurationEstimationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DurationEstimationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DurationEstimationsGroupByArgs['orderBy'] }
        : { orderBy?: DurationEstimationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DurationEstimationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDurationEstimationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DurationEstimations model
   */
  readonly fields: DurationEstimationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DurationEstimations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DurationEstimationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DurationEstimations model
   */ 
  interface DurationEstimationsFieldRefs {
    readonly duration_id: FieldRef<"DurationEstimations", 'String'>
    readonly project_id: FieldRef<"DurationEstimations", 'String'>
    readonly total_hours: FieldRef<"DurationEstimations", 'Float'>
    readonly estimated_day: FieldRef<"DurationEstimations", 'Int'>
    readonly created_at: FieldRef<"DurationEstimations", 'DateTime'>
    readonly updated_at: FieldRef<"DurationEstimations", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DurationEstimations findUnique
   */
  export type DurationEstimationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DurationEstimations
     */
    select?: DurationEstimationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DurationEstimationsInclude<ExtArgs> | null
    /**
     * Filter, which DurationEstimations to fetch.
     */
    where: DurationEstimationsWhereUniqueInput
  }

  /**
   * DurationEstimations findUniqueOrThrow
   */
  export type DurationEstimationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DurationEstimations
     */
    select?: DurationEstimationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DurationEstimationsInclude<ExtArgs> | null
    /**
     * Filter, which DurationEstimations to fetch.
     */
    where: DurationEstimationsWhereUniqueInput
  }

  /**
   * DurationEstimations findFirst
   */
  export type DurationEstimationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DurationEstimations
     */
    select?: DurationEstimationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DurationEstimationsInclude<ExtArgs> | null
    /**
     * Filter, which DurationEstimations to fetch.
     */
    where?: DurationEstimationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DurationEstimations to fetch.
     */
    orderBy?: DurationEstimationsOrderByWithRelationInput | DurationEstimationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DurationEstimations.
     */
    cursor?: DurationEstimationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DurationEstimations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DurationEstimations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DurationEstimations.
     */
    distinct?: DurationEstimationsScalarFieldEnum | DurationEstimationsScalarFieldEnum[]
  }

  /**
   * DurationEstimations findFirstOrThrow
   */
  export type DurationEstimationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DurationEstimations
     */
    select?: DurationEstimationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DurationEstimationsInclude<ExtArgs> | null
    /**
     * Filter, which DurationEstimations to fetch.
     */
    where?: DurationEstimationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DurationEstimations to fetch.
     */
    orderBy?: DurationEstimationsOrderByWithRelationInput | DurationEstimationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DurationEstimations.
     */
    cursor?: DurationEstimationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DurationEstimations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DurationEstimations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DurationEstimations.
     */
    distinct?: DurationEstimationsScalarFieldEnum | DurationEstimationsScalarFieldEnum[]
  }

  /**
   * DurationEstimations findMany
   */
  export type DurationEstimationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DurationEstimations
     */
    select?: DurationEstimationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DurationEstimationsInclude<ExtArgs> | null
    /**
     * Filter, which DurationEstimations to fetch.
     */
    where?: DurationEstimationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DurationEstimations to fetch.
     */
    orderBy?: DurationEstimationsOrderByWithRelationInput | DurationEstimationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DurationEstimations.
     */
    cursor?: DurationEstimationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DurationEstimations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DurationEstimations.
     */
    skip?: number
    distinct?: DurationEstimationsScalarFieldEnum | DurationEstimationsScalarFieldEnum[]
  }

  /**
   * DurationEstimations create
   */
  export type DurationEstimationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DurationEstimations
     */
    select?: DurationEstimationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DurationEstimationsInclude<ExtArgs> | null
    /**
     * The data needed to create a DurationEstimations.
     */
    data: XOR<DurationEstimationsCreateInput, DurationEstimationsUncheckedCreateInput>
  }

  /**
   * DurationEstimations createMany
   */
  export type DurationEstimationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DurationEstimations.
     */
    data: DurationEstimationsCreateManyInput | DurationEstimationsCreateManyInput[]
  }

  /**
   * DurationEstimations update
   */
  export type DurationEstimationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DurationEstimations
     */
    select?: DurationEstimationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DurationEstimationsInclude<ExtArgs> | null
    /**
     * The data needed to update a DurationEstimations.
     */
    data: XOR<DurationEstimationsUpdateInput, DurationEstimationsUncheckedUpdateInput>
    /**
     * Choose, which DurationEstimations to update.
     */
    where: DurationEstimationsWhereUniqueInput
  }

  /**
   * DurationEstimations updateMany
   */
  export type DurationEstimationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DurationEstimations.
     */
    data: XOR<DurationEstimationsUpdateManyMutationInput, DurationEstimationsUncheckedUpdateManyInput>
    /**
     * Filter which DurationEstimations to update
     */
    where?: DurationEstimationsWhereInput
  }

  /**
   * DurationEstimations upsert
   */
  export type DurationEstimationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DurationEstimations
     */
    select?: DurationEstimationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DurationEstimationsInclude<ExtArgs> | null
    /**
     * The filter to search for the DurationEstimations to update in case it exists.
     */
    where: DurationEstimationsWhereUniqueInput
    /**
     * In case the DurationEstimations found by the `where` argument doesn't exist, create a new DurationEstimations with this data.
     */
    create: XOR<DurationEstimationsCreateInput, DurationEstimationsUncheckedCreateInput>
    /**
     * In case the DurationEstimations was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DurationEstimationsUpdateInput, DurationEstimationsUncheckedUpdateInput>
  }

  /**
   * DurationEstimations delete
   */
  export type DurationEstimationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DurationEstimations
     */
    select?: DurationEstimationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DurationEstimationsInclude<ExtArgs> | null
    /**
     * Filter which DurationEstimations to delete.
     */
    where: DurationEstimationsWhereUniqueInput
  }

  /**
   * DurationEstimations deleteMany
   */
  export type DurationEstimationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DurationEstimations to delete
     */
    where?: DurationEstimationsWhereInput
  }

  /**
   * DurationEstimations findRaw
   */
  export type DurationEstimationsFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * DurationEstimations aggregateRaw
   */
  export type DurationEstimationsAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * DurationEstimations without action
   */
  export type DurationEstimationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DurationEstimations
     */
    select?: DurationEstimationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DurationEstimationsInclude<ExtArgs> | null
  }


  /**
   * Model Otp
   */

  export type AggregateOtp = {
    _count: OtpCountAggregateOutputType | null
    _min: OtpMinAggregateOutputType | null
    _max: OtpMaxAggregateOutputType | null
  }

  export type OtpMinAggregateOutputType = {
    otp_id: string | null
    code: string | null
    expires_at: Date | null
    email: string | null
    user_id: string | null
    created_at: Date | null
  }

  export type OtpMaxAggregateOutputType = {
    otp_id: string | null
    code: string | null
    expires_at: Date | null
    email: string | null
    user_id: string | null
    created_at: Date | null
  }

  export type OtpCountAggregateOutputType = {
    otp_id: number
    code: number
    expires_at: number
    email: number
    user_id: number
    created_at: number
    _all: number
  }


  export type OtpMinAggregateInputType = {
    otp_id?: true
    code?: true
    expires_at?: true
    email?: true
    user_id?: true
    created_at?: true
  }

  export type OtpMaxAggregateInputType = {
    otp_id?: true
    code?: true
    expires_at?: true
    email?: true
    user_id?: true
    created_at?: true
  }

  export type OtpCountAggregateInputType = {
    otp_id?: true
    code?: true
    expires_at?: true
    email?: true
    user_id?: true
    created_at?: true
    _all?: true
  }

  export type OtpAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Otp to aggregate.
     */
    where?: OtpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Otps to fetch.
     */
    orderBy?: OtpOrderByWithRelationInput | OtpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OtpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Otps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Otps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Otps
    **/
    _count?: true | OtpCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OtpMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OtpMaxAggregateInputType
  }

  export type GetOtpAggregateType<T extends OtpAggregateArgs> = {
        [P in keyof T & keyof AggregateOtp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOtp[P]>
      : GetScalarType<T[P], AggregateOtp[P]>
  }




  export type OtpGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OtpWhereInput
    orderBy?: OtpOrderByWithAggregationInput | OtpOrderByWithAggregationInput[]
    by: OtpScalarFieldEnum[] | OtpScalarFieldEnum
    having?: OtpScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OtpCountAggregateInputType | true
    _min?: OtpMinAggregateInputType
    _max?: OtpMaxAggregateInputType
  }

  export type OtpGroupByOutputType = {
    otp_id: string
    code: string
    expires_at: Date
    email: string
    user_id: string | null
    created_at: Date
    _count: OtpCountAggregateOutputType | null
    _min: OtpMinAggregateOutputType | null
    _max: OtpMaxAggregateOutputType | null
  }

  type GetOtpGroupByPayload<T extends OtpGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OtpGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OtpGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OtpGroupByOutputType[P]>
            : GetScalarType<T[P], OtpGroupByOutputType[P]>
        }
      >
    >


  export type OtpSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    otp_id?: boolean
    code?: boolean
    expires_at?: boolean
    email?: boolean
    user_id?: boolean
    created_at?: boolean
    user?: boolean | Otp$userArgs<ExtArgs>
  }, ExtArgs["result"]["otp"]>


  export type OtpSelectScalar = {
    otp_id?: boolean
    code?: boolean
    expires_at?: boolean
    email?: boolean
    user_id?: boolean
    created_at?: boolean
  }

  export type OtpInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Otp$userArgs<ExtArgs>
  }

  export type $OtpPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Otp"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      otp_id: string
      code: string
      expires_at: Date
      email: string
      user_id: string | null
      created_at: Date
    }, ExtArgs["result"]["otp"]>
    composites: {}
  }

  type OtpGetPayload<S extends boolean | null | undefined | OtpDefaultArgs> = $Result.GetResult<Prisma.$OtpPayload, S>

  type OtpCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OtpFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OtpCountAggregateInputType | true
    }

  export interface OtpDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Otp'], meta: { name: 'Otp' } }
    /**
     * Find zero or one Otp that matches the filter.
     * @param {OtpFindUniqueArgs} args - Arguments to find a Otp
     * @example
     * // Get one Otp
     * const otp = await prisma.otp.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OtpFindUniqueArgs>(args: SelectSubset<T, OtpFindUniqueArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Otp that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OtpFindUniqueOrThrowArgs} args - Arguments to find a Otp
     * @example
     * // Get one Otp
     * const otp = await prisma.otp.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OtpFindUniqueOrThrowArgs>(args: SelectSubset<T, OtpFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Otp that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpFindFirstArgs} args - Arguments to find a Otp
     * @example
     * // Get one Otp
     * const otp = await prisma.otp.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OtpFindFirstArgs>(args?: SelectSubset<T, OtpFindFirstArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Otp that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpFindFirstOrThrowArgs} args - Arguments to find a Otp
     * @example
     * // Get one Otp
     * const otp = await prisma.otp.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OtpFindFirstOrThrowArgs>(args?: SelectSubset<T, OtpFindFirstOrThrowArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Otps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Otps
     * const otps = await prisma.otp.findMany()
     * 
     * // Get first 10 Otps
     * const otps = await prisma.otp.findMany({ take: 10 })
     * 
     * // Only select the `otp_id`
     * const otpWithOtp_idOnly = await prisma.otp.findMany({ select: { otp_id: true } })
     * 
     */
    findMany<T extends OtpFindManyArgs>(args?: SelectSubset<T, OtpFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Otp.
     * @param {OtpCreateArgs} args - Arguments to create a Otp.
     * @example
     * // Create one Otp
     * const Otp = await prisma.otp.create({
     *   data: {
     *     // ... data to create a Otp
     *   }
     * })
     * 
     */
    create<T extends OtpCreateArgs>(args: SelectSubset<T, OtpCreateArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Otps.
     * @param {OtpCreateManyArgs} args - Arguments to create many Otps.
     * @example
     * // Create many Otps
     * const otp = await prisma.otp.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OtpCreateManyArgs>(args?: SelectSubset<T, OtpCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Otp.
     * @param {OtpDeleteArgs} args - Arguments to delete one Otp.
     * @example
     * // Delete one Otp
     * const Otp = await prisma.otp.delete({
     *   where: {
     *     // ... filter to delete one Otp
     *   }
     * })
     * 
     */
    delete<T extends OtpDeleteArgs>(args: SelectSubset<T, OtpDeleteArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Otp.
     * @param {OtpUpdateArgs} args - Arguments to update one Otp.
     * @example
     * // Update one Otp
     * const otp = await prisma.otp.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OtpUpdateArgs>(args: SelectSubset<T, OtpUpdateArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Otps.
     * @param {OtpDeleteManyArgs} args - Arguments to filter Otps to delete.
     * @example
     * // Delete a few Otps
     * const { count } = await prisma.otp.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OtpDeleteManyArgs>(args?: SelectSubset<T, OtpDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Otps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Otps
     * const otp = await prisma.otp.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OtpUpdateManyArgs>(args: SelectSubset<T, OtpUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Otp.
     * @param {OtpUpsertArgs} args - Arguments to update or create a Otp.
     * @example
     * // Update or create a Otp
     * const otp = await prisma.otp.upsert({
     *   create: {
     *     // ... data to create a Otp
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Otp we want to update
     *   }
     * })
     */
    upsert<T extends OtpUpsertArgs>(args: SelectSubset<T, OtpUpsertArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Otps that matches the filter.
     * @param {OtpFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const otp = await prisma.otp.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: OtpFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Otp.
     * @param {OtpAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const otp = await prisma.otp.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: OtpAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Otps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpCountArgs} args - Arguments to filter Otps to count.
     * @example
     * // Count the number of Otps
     * const count = await prisma.otp.count({
     *   where: {
     *     // ... the filter for the Otps we want to count
     *   }
     * })
    **/
    count<T extends OtpCountArgs>(
      args?: Subset<T, OtpCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OtpCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Otp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OtpAggregateArgs>(args: Subset<T, OtpAggregateArgs>): Prisma.PrismaPromise<GetOtpAggregateType<T>>

    /**
     * Group by Otp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OtpGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OtpGroupByArgs['orderBy'] }
        : { orderBy?: OtpGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OtpGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOtpGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Otp model
   */
  readonly fields: OtpFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Otp.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OtpClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Otp$userArgs<ExtArgs> = {}>(args?: Subset<T, Otp$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Otp model
   */ 
  interface OtpFieldRefs {
    readonly otp_id: FieldRef<"Otp", 'String'>
    readonly code: FieldRef<"Otp", 'String'>
    readonly expires_at: FieldRef<"Otp", 'DateTime'>
    readonly email: FieldRef<"Otp", 'String'>
    readonly user_id: FieldRef<"Otp", 'String'>
    readonly created_at: FieldRef<"Otp", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Otp findUnique
   */
  export type OtpFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpInclude<ExtArgs> | null
    /**
     * Filter, which Otp to fetch.
     */
    where: OtpWhereUniqueInput
  }

  /**
   * Otp findUniqueOrThrow
   */
  export type OtpFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpInclude<ExtArgs> | null
    /**
     * Filter, which Otp to fetch.
     */
    where: OtpWhereUniqueInput
  }

  /**
   * Otp findFirst
   */
  export type OtpFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpInclude<ExtArgs> | null
    /**
     * Filter, which Otp to fetch.
     */
    where?: OtpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Otps to fetch.
     */
    orderBy?: OtpOrderByWithRelationInput | OtpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Otps.
     */
    cursor?: OtpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Otps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Otps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Otps.
     */
    distinct?: OtpScalarFieldEnum | OtpScalarFieldEnum[]
  }

  /**
   * Otp findFirstOrThrow
   */
  export type OtpFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpInclude<ExtArgs> | null
    /**
     * Filter, which Otp to fetch.
     */
    where?: OtpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Otps to fetch.
     */
    orderBy?: OtpOrderByWithRelationInput | OtpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Otps.
     */
    cursor?: OtpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Otps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Otps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Otps.
     */
    distinct?: OtpScalarFieldEnum | OtpScalarFieldEnum[]
  }

  /**
   * Otp findMany
   */
  export type OtpFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpInclude<ExtArgs> | null
    /**
     * Filter, which Otps to fetch.
     */
    where?: OtpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Otps to fetch.
     */
    orderBy?: OtpOrderByWithRelationInput | OtpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Otps.
     */
    cursor?: OtpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Otps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Otps.
     */
    skip?: number
    distinct?: OtpScalarFieldEnum | OtpScalarFieldEnum[]
  }

  /**
   * Otp create
   */
  export type OtpCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpInclude<ExtArgs> | null
    /**
     * The data needed to create a Otp.
     */
    data: XOR<OtpCreateInput, OtpUncheckedCreateInput>
  }

  /**
   * Otp createMany
   */
  export type OtpCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Otps.
     */
    data: OtpCreateManyInput | OtpCreateManyInput[]
  }

  /**
   * Otp update
   */
  export type OtpUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpInclude<ExtArgs> | null
    /**
     * The data needed to update a Otp.
     */
    data: XOR<OtpUpdateInput, OtpUncheckedUpdateInput>
    /**
     * Choose, which Otp to update.
     */
    where: OtpWhereUniqueInput
  }

  /**
   * Otp updateMany
   */
  export type OtpUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Otps.
     */
    data: XOR<OtpUpdateManyMutationInput, OtpUncheckedUpdateManyInput>
    /**
     * Filter which Otps to update
     */
    where?: OtpWhereInput
  }

  /**
   * Otp upsert
   */
  export type OtpUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpInclude<ExtArgs> | null
    /**
     * The filter to search for the Otp to update in case it exists.
     */
    where: OtpWhereUniqueInput
    /**
     * In case the Otp found by the `where` argument doesn't exist, create a new Otp with this data.
     */
    create: XOR<OtpCreateInput, OtpUncheckedCreateInput>
    /**
     * In case the Otp was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OtpUpdateInput, OtpUncheckedUpdateInput>
  }

  /**
   * Otp delete
   */
  export type OtpDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpInclude<ExtArgs> | null
    /**
     * Filter which Otp to delete.
     */
    where: OtpWhereUniqueInput
  }

  /**
   * Otp deleteMany
   */
  export type OtpDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Otps to delete
     */
    where?: OtpWhereInput
  }

  /**
   * Otp findRaw
   */
  export type OtpFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Otp aggregateRaw
   */
  export type OtpAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Otp.user
   */
  export type Otp$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Otp without action
   */
  export type OtpDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const UserScalarFieldEnum: {
    user_id: 'user_id',
    name: 'name',
    email: 'email',
    password: 'password',
    role_id: 'role_id',
    profileImage: 'profileImage',
    verified: 'verified',
    created_at: 'created_at',
    updated_at: 'updated_at',
    refreshToken: 'refreshToken',
    accessToken: 'accessToken',
    resetToken: 'resetToken',
    resetTokenExpiry: 'resetTokenExpiry'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    project_id: 'project_id',
    name: 'name',
    description: 'description',
    start_date: 'start_date',
    total_duration: 'total_duration',
    total_cost: 'total_cost',
    status: 'status',
    manday: 'manday',
    created_by: 'created_by',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const TaskScalarFieldEnum: {
    task_id: 'task_id',
    name: 'name',
    status: 'status',
    workload: 'workload',
    duration: 'duration',
    cost: 'cost',
    project_id: 'project_id',
    updated_by: 'updated_by',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type TaskScalarFieldEnum = (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum]


  export const ResourceScalarFieldEnum: {
    resource_id: 'resource_id',
    name: 'name',
    rate: 'rate',
    description: 'description',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ResourceScalarFieldEnum = (typeof ResourceScalarFieldEnum)[keyof typeof ResourceScalarFieldEnum]


  export const ResourceAllocationsScalarFieldEnum: {
    allocation_id: 'allocation_id',
    resource_id: 'resource_id',
    project_id: 'project_id',
    task_id: 'task_id',
    allocation_percentage: 'allocation_percentage',
    resource_hours: 'resource_hours',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ResourceAllocationsScalarFieldEnum = (typeof ResourceAllocationsScalarFieldEnum)[keyof typeof ResourceAllocationsScalarFieldEnum]


  export const ReportsScalarFieldEnum: {
    report_id: 'report_id',
    start_date: 'start_date',
    end_date: 'end_date',
    data: 'data',
    generated_by: 'generated_by',
    created_at: 'created_at'
  };

  export type ReportsScalarFieldEnum = (typeof ReportsScalarFieldEnum)[keyof typeof ReportsScalarFieldEnum]


  export const CostEstimationsScalarFieldEnum: {
    cost_id: 'cost_id',
    project_id: 'project_id',
    total_hours: 'total_hours',
    estimated_cost: 'estimated_cost',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type CostEstimationsScalarFieldEnum = (typeof CostEstimationsScalarFieldEnum)[keyof typeof CostEstimationsScalarFieldEnum]


  export const DurationEstimationsScalarFieldEnum: {
    duration_id: 'duration_id',
    project_id: 'project_id',
    total_hours: 'total_hours',
    estimated_day: 'estimated_day',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type DurationEstimationsScalarFieldEnum = (typeof DurationEstimationsScalarFieldEnum)[keyof typeof DurationEstimationsScalarFieldEnum]


  export const OtpScalarFieldEnum: {
    otp_id: 'otp_id',
    code: 'code',
    expires_at: 'expires_at',
    email: 'email',
    user_id: 'user_id',
    created_at: 'created_at'
  };

  export type OtpScalarFieldEnum = (typeof OtpScalarFieldEnum)[keyof typeof OtpScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    user_id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role_id?: StringNullableFilter<"User"> | string | null
    profileImage?: StringNullableFilter<"User"> | string | null
    verified?: BoolFilter<"User"> | boolean
    created_at?: DateTimeFilter<"User"> | Date | string
    updated_at?: DateTimeFilter<"User"> | Date | string
    refreshToken?: StringNullableFilter<"User"> | string | null
    accessToken?: StringNullableFilter<"User"> | string | null
    resetToken?: StringNullableFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    resource?: XOR<ResourceNullableRelationFilter, ResourceWhereInput> | null
    projects?: ProjectListRelationFilter
    reports?: ReportsListRelationFilter
    otps?: OtpListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    user_id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role_id?: SortOrder
    profileImage?: SortOrder
    verified?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    refreshToken?: SortOrder
    accessToken?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
    resource?: ResourceOrderByWithRelationInput
    projects?: ProjectOrderByRelationAggregateInput
    reports?: ReportsOrderByRelationAggregateInput
    otps?: OtpOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    user_id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role_id?: StringNullableFilter<"User"> | string | null
    profileImage?: StringNullableFilter<"User"> | string | null
    verified?: BoolFilter<"User"> | boolean
    created_at?: DateTimeFilter<"User"> | Date | string
    updated_at?: DateTimeFilter<"User"> | Date | string
    refreshToken?: StringNullableFilter<"User"> | string | null
    accessToken?: StringNullableFilter<"User"> | string | null
    resetToken?: StringNullableFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    resource?: XOR<ResourceNullableRelationFilter, ResourceWhereInput> | null
    projects?: ProjectListRelationFilter
    reports?: ReportsListRelationFilter
    otps?: OtpListRelationFilter
  }, "user_id" | "email">

  export type UserOrderByWithAggregationInput = {
    user_id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role_id?: SortOrder
    profileImage?: SortOrder
    verified?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    refreshToken?: SortOrder
    accessToken?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    user_id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role_id?: StringNullableWithAggregatesFilter<"User"> | string | null
    profileImage?: StringNullableWithAggregatesFilter<"User"> | string | null
    verified?: BoolWithAggregatesFilter<"User"> | boolean
    created_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
    refreshToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    accessToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    resetToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    project_id?: StringFilter<"Project"> | string
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    start_date?: DateTimeFilter<"Project"> | Date | string
    total_duration?: IntFilter<"Project"> | number
    total_cost?: FloatFilter<"Project"> | number
    status?: StringFilter<"Project"> | string
    manday?: FloatFilter<"Project"> | number
    created_by?: StringFilter<"Project"> | string
    created_at?: DateTimeFilter<"Project"> | Date | string
    updated_at?: DateTimeFilter<"Project"> | Date | string
    createdByUser?: XOR<UserRelationFilter, UserWhereInput>
    tasks?: TaskListRelationFilter
    ResourceAllocations?: ResourceAllocationsListRelationFilter
    CostEstimations?: CostEstimationsListRelationFilter
    DurationEstimations?: DurationEstimationsListRelationFilter
  }

  export type ProjectOrderByWithRelationInput = {
    project_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    start_date?: SortOrder
    total_duration?: SortOrder
    total_cost?: SortOrder
    status?: SortOrder
    manday?: SortOrder
    created_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    createdByUser?: UserOrderByWithRelationInput
    tasks?: TaskOrderByRelationAggregateInput
    ResourceAllocations?: ResourceAllocationsOrderByRelationAggregateInput
    CostEstimations?: CostEstimationsOrderByRelationAggregateInput
    DurationEstimations?: DurationEstimationsOrderByRelationAggregateInput
  }

  export type ProjectWhereUniqueInput = Prisma.AtLeast<{
    project_id?: string
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    start_date?: DateTimeFilter<"Project"> | Date | string
    total_duration?: IntFilter<"Project"> | number
    total_cost?: FloatFilter<"Project"> | number
    status?: StringFilter<"Project"> | string
    manday?: FloatFilter<"Project"> | number
    created_by?: StringFilter<"Project"> | string
    created_at?: DateTimeFilter<"Project"> | Date | string
    updated_at?: DateTimeFilter<"Project"> | Date | string
    createdByUser?: XOR<UserRelationFilter, UserWhereInput>
    tasks?: TaskListRelationFilter
    ResourceAllocations?: ResourceAllocationsListRelationFilter
    CostEstimations?: CostEstimationsListRelationFilter
    DurationEstimations?: DurationEstimationsListRelationFilter
  }, "project_id">

  export type ProjectOrderByWithAggregationInput = {
    project_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    start_date?: SortOrder
    total_duration?: SortOrder
    total_cost?: SortOrder
    status?: SortOrder
    manday?: SortOrder
    created_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _avg?: ProjectAvgOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
    _sum?: ProjectSumOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    OR?: ProjectScalarWhereWithAggregatesInput[]
    NOT?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    project_id?: StringWithAggregatesFilter<"Project"> | string
    name?: StringWithAggregatesFilter<"Project"> | string
    description?: StringNullableWithAggregatesFilter<"Project"> | string | null
    start_date?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    total_duration?: IntWithAggregatesFilter<"Project"> | number
    total_cost?: FloatWithAggregatesFilter<"Project"> | number
    status?: StringWithAggregatesFilter<"Project"> | string
    manday?: FloatWithAggregatesFilter<"Project"> | number
    created_by?: StringWithAggregatesFilter<"Project"> | string
    created_at?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Project"> | Date | string
  }

  export type TaskWhereInput = {
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    task_id?: StringFilter<"Task"> | string
    name?: StringFilter<"Task"> | string
    status?: StringFilter<"Task"> | string
    workload?: FloatFilter<"Task"> | number
    duration?: FloatFilter<"Task"> | number
    cost?: FloatFilter<"Task"> | number
    project_id?: StringFilter<"Task"> | string
    updated_by?: StringNullableFilter<"Task"> | string | null
    created_at?: DateTimeFilter<"Task"> | Date | string
    updated_at?: DateTimeFilter<"Task"> | Date | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    ResourceAllocations?: ResourceAllocationsListRelationFilter
  }

  export type TaskOrderByWithRelationInput = {
    task_id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    workload?: SortOrder
    duration?: SortOrder
    cost?: SortOrder
    project_id?: SortOrder
    updated_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    project?: ProjectOrderByWithRelationInput
    ResourceAllocations?: ResourceAllocationsOrderByRelationAggregateInput
  }

  export type TaskWhereUniqueInput = Prisma.AtLeast<{
    task_id?: string
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    name?: StringFilter<"Task"> | string
    status?: StringFilter<"Task"> | string
    workload?: FloatFilter<"Task"> | number
    duration?: FloatFilter<"Task"> | number
    cost?: FloatFilter<"Task"> | number
    project_id?: StringFilter<"Task"> | string
    updated_by?: StringNullableFilter<"Task"> | string | null
    created_at?: DateTimeFilter<"Task"> | Date | string
    updated_at?: DateTimeFilter<"Task"> | Date | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    ResourceAllocations?: ResourceAllocationsListRelationFilter
  }, "task_id">

  export type TaskOrderByWithAggregationInput = {
    task_id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    workload?: SortOrder
    duration?: SortOrder
    cost?: SortOrder
    project_id?: SortOrder
    updated_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: TaskCountOrderByAggregateInput
    _avg?: TaskAvgOrderByAggregateInput
    _max?: TaskMaxOrderByAggregateInput
    _min?: TaskMinOrderByAggregateInput
    _sum?: TaskSumOrderByAggregateInput
  }

  export type TaskScalarWhereWithAggregatesInput = {
    AND?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    OR?: TaskScalarWhereWithAggregatesInput[]
    NOT?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    task_id?: StringWithAggregatesFilter<"Task"> | string
    name?: StringWithAggregatesFilter<"Task"> | string
    status?: StringWithAggregatesFilter<"Task"> | string
    workload?: FloatWithAggregatesFilter<"Task"> | number
    duration?: FloatWithAggregatesFilter<"Task"> | number
    cost?: FloatWithAggregatesFilter<"Task"> | number
    project_id?: StringWithAggregatesFilter<"Task"> | string
    updated_by?: StringNullableWithAggregatesFilter<"Task"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"Task"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Task"> | Date | string
  }

  export type ResourceWhereInput = {
    AND?: ResourceWhereInput | ResourceWhereInput[]
    OR?: ResourceWhereInput[]
    NOT?: ResourceWhereInput | ResourceWhereInput[]
    resource_id?: StringFilter<"Resource"> | string
    name?: StringFilter<"Resource"> | string
    rate?: FloatFilter<"Resource"> | number
    description?: StringNullableFilter<"Resource"> | string | null
    created_at?: DateTimeFilter<"Resource"> | Date | string
    updated_at?: DateTimeFilter<"Resource"> | Date | string
    users?: UserListRelationFilter
    ResourceAllocations?: ResourceAllocationsListRelationFilter
  }

  export type ResourceOrderByWithRelationInput = {
    resource_id?: SortOrder
    name?: SortOrder
    rate?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    users?: UserOrderByRelationAggregateInput
    ResourceAllocations?: ResourceAllocationsOrderByRelationAggregateInput
  }

  export type ResourceWhereUniqueInput = Prisma.AtLeast<{
    resource_id?: string
    name?: string
    AND?: ResourceWhereInput | ResourceWhereInput[]
    OR?: ResourceWhereInput[]
    NOT?: ResourceWhereInput | ResourceWhereInput[]
    rate?: FloatFilter<"Resource"> | number
    description?: StringNullableFilter<"Resource"> | string | null
    created_at?: DateTimeFilter<"Resource"> | Date | string
    updated_at?: DateTimeFilter<"Resource"> | Date | string
    users?: UserListRelationFilter
    ResourceAllocations?: ResourceAllocationsListRelationFilter
  }, "resource_id" | "name">

  export type ResourceOrderByWithAggregationInput = {
    resource_id?: SortOrder
    name?: SortOrder
    rate?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: ResourceCountOrderByAggregateInput
    _avg?: ResourceAvgOrderByAggregateInput
    _max?: ResourceMaxOrderByAggregateInput
    _min?: ResourceMinOrderByAggregateInput
    _sum?: ResourceSumOrderByAggregateInput
  }

  export type ResourceScalarWhereWithAggregatesInput = {
    AND?: ResourceScalarWhereWithAggregatesInput | ResourceScalarWhereWithAggregatesInput[]
    OR?: ResourceScalarWhereWithAggregatesInput[]
    NOT?: ResourceScalarWhereWithAggregatesInput | ResourceScalarWhereWithAggregatesInput[]
    resource_id?: StringWithAggregatesFilter<"Resource"> | string
    name?: StringWithAggregatesFilter<"Resource"> | string
    rate?: FloatWithAggregatesFilter<"Resource"> | number
    description?: StringNullableWithAggregatesFilter<"Resource"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"Resource"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Resource"> | Date | string
  }

  export type ResourceAllocationsWhereInput = {
    AND?: ResourceAllocationsWhereInput | ResourceAllocationsWhereInput[]
    OR?: ResourceAllocationsWhereInput[]
    NOT?: ResourceAllocationsWhereInput | ResourceAllocationsWhereInput[]
    allocation_id?: StringFilter<"ResourceAllocations"> | string
    resource_id?: StringFilter<"ResourceAllocations"> | string
    project_id?: StringFilter<"ResourceAllocations"> | string
    task_id?: StringFilter<"ResourceAllocations"> | string
    allocation_percentage?: FloatFilter<"ResourceAllocations"> | number
    resource_hours?: FloatFilter<"ResourceAllocations"> | number
    created_at?: DateTimeFilter<"ResourceAllocations"> | Date | string
    updated_at?: DateTimeFilter<"ResourceAllocations"> | Date | string
    task?: XOR<TaskRelationFilter, TaskWhereInput>
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    resource?: XOR<ResourceRelationFilter, ResourceWhereInput>
  }

  export type ResourceAllocationsOrderByWithRelationInput = {
    allocation_id?: SortOrder
    resource_id?: SortOrder
    project_id?: SortOrder
    task_id?: SortOrder
    allocation_percentage?: SortOrder
    resource_hours?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    task?: TaskOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
    resource?: ResourceOrderByWithRelationInput
  }

  export type ResourceAllocationsWhereUniqueInput = Prisma.AtLeast<{
    allocation_id?: string
    AND?: ResourceAllocationsWhereInput | ResourceAllocationsWhereInput[]
    OR?: ResourceAllocationsWhereInput[]
    NOT?: ResourceAllocationsWhereInput | ResourceAllocationsWhereInput[]
    resource_id?: StringFilter<"ResourceAllocations"> | string
    project_id?: StringFilter<"ResourceAllocations"> | string
    task_id?: StringFilter<"ResourceAllocations"> | string
    allocation_percentage?: FloatFilter<"ResourceAllocations"> | number
    resource_hours?: FloatFilter<"ResourceAllocations"> | number
    created_at?: DateTimeFilter<"ResourceAllocations"> | Date | string
    updated_at?: DateTimeFilter<"ResourceAllocations"> | Date | string
    task?: XOR<TaskRelationFilter, TaskWhereInput>
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    resource?: XOR<ResourceRelationFilter, ResourceWhereInput>
  }, "allocation_id">

  export type ResourceAllocationsOrderByWithAggregationInput = {
    allocation_id?: SortOrder
    resource_id?: SortOrder
    project_id?: SortOrder
    task_id?: SortOrder
    allocation_percentage?: SortOrder
    resource_hours?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: ResourceAllocationsCountOrderByAggregateInput
    _avg?: ResourceAllocationsAvgOrderByAggregateInput
    _max?: ResourceAllocationsMaxOrderByAggregateInput
    _min?: ResourceAllocationsMinOrderByAggregateInput
    _sum?: ResourceAllocationsSumOrderByAggregateInput
  }

  export type ResourceAllocationsScalarWhereWithAggregatesInput = {
    AND?: ResourceAllocationsScalarWhereWithAggregatesInput | ResourceAllocationsScalarWhereWithAggregatesInput[]
    OR?: ResourceAllocationsScalarWhereWithAggregatesInput[]
    NOT?: ResourceAllocationsScalarWhereWithAggregatesInput | ResourceAllocationsScalarWhereWithAggregatesInput[]
    allocation_id?: StringWithAggregatesFilter<"ResourceAllocations"> | string
    resource_id?: StringWithAggregatesFilter<"ResourceAllocations"> | string
    project_id?: StringWithAggregatesFilter<"ResourceAllocations"> | string
    task_id?: StringWithAggregatesFilter<"ResourceAllocations"> | string
    allocation_percentage?: FloatWithAggregatesFilter<"ResourceAllocations"> | number
    resource_hours?: FloatWithAggregatesFilter<"ResourceAllocations"> | number
    created_at?: DateTimeWithAggregatesFilter<"ResourceAllocations"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"ResourceAllocations"> | Date | string
  }

  export type ReportsWhereInput = {
    AND?: ReportsWhereInput | ReportsWhereInput[]
    OR?: ReportsWhereInput[]
    NOT?: ReportsWhereInput | ReportsWhereInput[]
    report_id?: StringFilter<"Reports"> | string
    start_date?: DateTimeFilter<"Reports"> | Date | string
    end_date?: DateTimeFilter<"Reports"> | Date | string
    data?: StringFilter<"Reports"> | string
    generated_by?: StringFilter<"Reports"> | string
    created_at?: DateTimeFilter<"Reports"> | Date | string
    generatedByUser?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ReportsOrderByWithRelationInput = {
    report_id?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    data?: SortOrder
    generated_by?: SortOrder
    created_at?: SortOrder
    generatedByUser?: UserOrderByWithRelationInput
  }

  export type ReportsWhereUniqueInput = Prisma.AtLeast<{
    report_id?: string
    AND?: ReportsWhereInput | ReportsWhereInput[]
    OR?: ReportsWhereInput[]
    NOT?: ReportsWhereInput | ReportsWhereInput[]
    start_date?: DateTimeFilter<"Reports"> | Date | string
    end_date?: DateTimeFilter<"Reports"> | Date | string
    data?: StringFilter<"Reports"> | string
    generated_by?: StringFilter<"Reports"> | string
    created_at?: DateTimeFilter<"Reports"> | Date | string
    generatedByUser?: XOR<UserRelationFilter, UserWhereInput>
  }, "report_id">

  export type ReportsOrderByWithAggregationInput = {
    report_id?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    data?: SortOrder
    generated_by?: SortOrder
    created_at?: SortOrder
    _count?: ReportsCountOrderByAggregateInput
    _max?: ReportsMaxOrderByAggregateInput
    _min?: ReportsMinOrderByAggregateInput
  }

  export type ReportsScalarWhereWithAggregatesInput = {
    AND?: ReportsScalarWhereWithAggregatesInput | ReportsScalarWhereWithAggregatesInput[]
    OR?: ReportsScalarWhereWithAggregatesInput[]
    NOT?: ReportsScalarWhereWithAggregatesInput | ReportsScalarWhereWithAggregatesInput[]
    report_id?: StringWithAggregatesFilter<"Reports"> | string
    start_date?: DateTimeWithAggregatesFilter<"Reports"> | Date | string
    end_date?: DateTimeWithAggregatesFilter<"Reports"> | Date | string
    data?: StringWithAggregatesFilter<"Reports"> | string
    generated_by?: StringWithAggregatesFilter<"Reports"> | string
    created_at?: DateTimeWithAggregatesFilter<"Reports"> | Date | string
  }

  export type CostEstimationsWhereInput = {
    AND?: CostEstimationsWhereInput | CostEstimationsWhereInput[]
    OR?: CostEstimationsWhereInput[]
    NOT?: CostEstimationsWhereInput | CostEstimationsWhereInput[]
    cost_id?: StringFilter<"CostEstimations"> | string
    project_id?: StringFilter<"CostEstimations"> | string
    total_hours?: FloatFilter<"CostEstimations"> | number
    estimated_cost?: FloatFilter<"CostEstimations"> | number
    created_at?: DateTimeFilter<"CostEstimations"> | Date | string
    updated_at?: DateTimeFilter<"CostEstimations"> | Date | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }

  export type CostEstimationsOrderByWithRelationInput = {
    cost_id?: SortOrder
    project_id?: SortOrder
    total_hours?: SortOrder
    estimated_cost?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    project?: ProjectOrderByWithRelationInput
  }

  export type CostEstimationsWhereUniqueInput = Prisma.AtLeast<{
    cost_id?: string
    AND?: CostEstimationsWhereInput | CostEstimationsWhereInput[]
    OR?: CostEstimationsWhereInput[]
    NOT?: CostEstimationsWhereInput | CostEstimationsWhereInput[]
    project_id?: StringFilter<"CostEstimations"> | string
    total_hours?: FloatFilter<"CostEstimations"> | number
    estimated_cost?: FloatFilter<"CostEstimations"> | number
    created_at?: DateTimeFilter<"CostEstimations"> | Date | string
    updated_at?: DateTimeFilter<"CostEstimations"> | Date | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }, "cost_id">

  export type CostEstimationsOrderByWithAggregationInput = {
    cost_id?: SortOrder
    project_id?: SortOrder
    total_hours?: SortOrder
    estimated_cost?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: CostEstimationsCountOrderByAggregateInput
    _avg?: CostEstimationsAvgOrderByAggregateInput
    _max?: CostEstimationsMaxOrderByAggregateInput
    _min?: CostEstimationsMinOrderByAggregateInput
    _sum?: CostEstimationsSumOrderByAggregateInput
  }

  export type CostEstimationsScalarWhereWithAggregatesInput = {
    AND?: CostEstimationsScalarWhereWithAggregatesInput | CostEstimationsScalarWhereWithAggregatesInput[]
    OR?: CostEstimationsScalarWhereWithAggregatesInput[]
    NOT?: CostEstimationsScalarWhereWithAggregatesInput | CostEstimationsScalarWhereWithAggregatesInput[]
    cost_id?: StringWithAggregatesFilter<"CostEstimations"> | string
    project_id?: StringWithAggregatesFilter<"CostEstimations"> | string
    total_hours?: FloatWithAggregatesFilter<"CostEstimations"> | number
    estimated_cost?: FloatWithAggregatesFilter<"CostEstimations"> | number
    created_at?: DateTimeWithAggregatesFilter<"CostEstimations"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"CostEstimations"> | Date | string
  }

  export type DurationEstimationsWhereInput = {
    AND?: DurationEstimationsWhereInput | DurationEstimationsWhereInput[]
    OR?: DurationEstimationsWhereInput[]
    NOT?: DurationEstimationsWhereInput | DurationEstimationsWhereInput[]
    duration_id?: StringFilter<"DurationEstimations"> | string
    project_id?: StringFilter<"DurationEstimations"> | string
    total_hours?: FloatFilter<"DurationEstimations"> | number
    estimated_day?: IntFilter<"DurationEstimations"> | number
    created_at?: DateTimeFilter<"DurationEstimations"> | Date | string
    updated_at?: DateTimeFilter<"DurationEstimations"> | Date | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }

  export type DurationEstimationsOrderByWithRelationInput = {
    duration_id?: SortOrder
    project_id?: SortOrder
    total_hours?: SortOrder
    estimated_day?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    project?: ProjectOrderByWithRelationInput
  }

  export type DurationEstimationsWhereUniqueInput = Prisma.AtLeast<{
    duration_id?: string
    AND?: DurationEstimationsWhereInput | DurationEstimationsWhereInput[]
    OR?: DurationEstimationsWhereInput[]
    NOT?: DurationEstimationsWhereInput | DurationEstimationsWhereInput[]
    project_id?: StringFilter<"DurationEstimations"> | string
    total_hours?: FloatFilter<"DurationEstimations"> | number
    estimated_day?: IntFilter<"DurationEstimations"> | number
    created_at?: DateTimeFilter<"DurationEstimations"> | Date | string
    updated_at?: DateTimeFilter<"DurationEstimations"> | Date | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }, "duration_id">

  export type DurationEstimationsOrderByWithAggregationInput = {
    duration_id?: SortOrder
    project_id?: SortOrder
    total_hours?: SortOrder
    estimated_day?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: DurationEstimationsCountOrderByAggregateInput
    _avg?: DurationEstimationsAvgOrderByAggregateInput
    _max?: DurationEstimationsMaxOrderByAggregateInput
    _min?: DurationEstimationsMinOrderByAggregateInput
    _sum?: DurationEstimationsSumOrderByAggregateInput
  }

  export type DurationEstimationsScalarWhereWithAggregatesInput = {
    AND?: DurationEstimationsScalarWhereWithAggregatesInput | DurationEstimationsScalarWhereWithAggregatesInput[]
    OR?: DurationEstimationsScalarWhereWithAggregatesInput[]
    NOT?: DurationEstimationsScalarWhereWithAggregatesInput | DurationEstimationsScalarWhereWithAggregatesInput[]
    duration_id?: StringWithAggregatesFilter<"DurationEstimations"> | string
    project_id?: StringWithAggregatesFilter<"DurationEstimations"> | string
    total_hours?: FloatWithAggregatesFilter<"DurationEstimations"> | number
    estimated_day?: IntWithAggregatesFilter<"DurationEstimations"> | number
    created_at?: DateTimeWithAggregatesFilter<"DurationEstimations"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"DurationEstimations"> | Date | string
  }

  export type OtpWhereInput = {
    AND?: OtpWhereInput | OtpWhereInput[]
    OR?: OtpWhereInput[]
    NOT?: OtpWhereInput | OtpWhereInput[]
    otp_id?: StringFilter<"Otp"> | string
    code?: StringFilter<"Otp"> | string
    expires_at?: DateTimeFilter<"Otp"> | Date | string
    email?: StringFilter<"Otp"> | string
    user_id?: StringNullableFilter<"Otp"> | string | null
    created_at?: DateTimeFilter<"Otp"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type OtpOrderByWithRelationInput = {
    otp_id?: SortOrder
    code?: SortOrder
    expires_at?: SortOrder
    email?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type OtpWhereUniqueInput = Prisma.AtLeast<{
    otp_id?: string
    AND?: OtpWhereInput | OtpWhereInput[]
    OR?: OtpWhereInput[]
    NOT?: OtpWhereInput | OtpWhereInput[]
    code?: StringFilter<"Otp"> | string
    expires_at?: DateTimeFilter<"Otp"> | Date | string
    email?: StringFilter<"Otp"> | string
    user_id?: StringNullableFilter<"Otp"> | string | null
    created_at?: DateTimeFilter<"Otp"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "otp_id">

  export type OtpOrderByWithAggregationInput = {
    otp_id?: SortOrder
    code?: SortOrder
    expires_at?: SortOrder
    email?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    _count?: OtpCountOrderByAggregateInput
    _max?: OtpMaxOrderByAggregateInput
    _min?: OtpMinOrderByAggregateInput
  }

  export type OtpScalarWhereWithAggregatesInput = {
    AND?: OtpScalarWhereWithAggregatesInput | OtpScalarWhereWithAggregatesInput[]
    OR?: OtpScalarWhereWithAggregatesInput[]
    NOT?: OtpScalarWhereWithAggregatesInput | OtpScalarWhereWithAggregatesInput[]
    otp_id?: StringWithAggregatesFilter<"Otp"> | string
    code?: StringWithAggregatesFilter<"Otp"> | string
    expires_at?: DateTimeWithAggregatesFilter<"Otp"> | Date | string
    email?: StringWithAggregatesFilter<"Otp"> | string
    user_id?: StringNullableWithAggregatesFilter<"Otp"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"Otp"> | Date | string
  }

  export type UserCreateInput = {
    user_id?: string
    name: string
    email: string
    password: string
    profileImage?: string | null
    verified?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    refreshToken?: string | null
    accessToken?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    resource?: ResourceCreateNestedOneWithoutUsersInput
    projects?: ProjectCreateNestedManyWithoutCreatedByUserInput
    reports?: ReportsCreateNestedManyWithoutGeneratedByUserInput
    otps?: OtpCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    user_id?: string
    name: string
    email: string
    password: string
    role_id?: string | null
    profileImage?: string | null
    verified?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    refreshToken?: string | null
    accessToken?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    projects?: ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    reports?: ReportsUncheckedCreateNestedManyWithoutGeneratedByUserInput
    otps?: OtpUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resource?: ResourceUpdateOneWithoutUsersNestedInput
    projects?: ProjectUpdateManyWithoutCreatedByUserNestedInput
    reports?: ReportsUpdateManyWithoutGeneratedByUserNestedInput
    otps?: OtpUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role_id?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    projects?: ProjectUncheckedUpdateManyWithoutCreatedByUserNestedInput
    reports?: ReportsUncheckedUpdateManyWithoutGeneratedByUserNestedInput
    otps?: OtpUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    user_id?: string
    name: string
    email: string
    password: string
    role_id?: string | null
    profileImage?: string | null
    verified?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    refreshToken?: string | null
    accessToken?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role_id?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProjectCreateInput = {
    project_id?: string
    name: string
    description?: string | null
    start_date: Date | string
    total_duration: number
    total_cost: number
    status: string
    manday: number
    created_at?: Date | string
    updated_at?: Date | string
    createdByUser: UserCreateNestedOneWithoutProjectsInput
    tasks?: TaskCreateNestedManyWithoutProjectInput
    ResourceAllocations?: ResourceAllocationsCreateNestedManyWithoutProjectInput
    CostEstimations?: CostEstimationsCreateNestedManyWithoutProjectInput
    DurationEstimations?: DurationEstimationsCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    project_id?: string
    name: string
    description?: string | null
    start_date: Date | string
    total_duration: number
    total_cost: number
    status: string
    manday: number
    created_by: string
    created_at?: Date | string
    updated_at?: Date | string
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    ResourceAllocations?: ResourceAllocationsUncheckedCreateNestedManyWithoutProjectInput
    CostEstimations?: CostEstimationsUncheckedCreateNestedManyWithoutProjectInput
    DurationEstimations?: DurationEstimationsUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    total_duration?: IntFieldUpdateOperationsInput | number
    total_cost?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    manday?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByUser?: UserUpdateOneRequiredWithoutProjectsNestedInput
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    ResourceAllocations?: ResourceAllocationsUpdateManyWithoutProjectNestedInput
    CostEstimations?: CostEstimationsUpdateManyWithoutProjectNestedInput
    DurationEstimations?: DurationEstimationsUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    total_duration?: IntFieldUpdateOperationsInput | number
    total_cost?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    manday?: FloatFieldUpdateOperationsInput | number
    created_by?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    ResourceAllocations?: ResourceAllocationsUncheckedUpdateManyWithoutProjectNestedInput
    CostEstimations?: CostEstimationsUncheckedUpdateManyWithoutProjectNestedInput
    DurationEstimations?: DurationEstimationsUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateManyInput = {
    project_id?: string
    name: string
    description?: string | null
    start_date: Date | string
    total_duration: number
    total_cost: number
    status: string
    manday: number
    created_by: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ProjectUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    total_duration?: IntFieldUpdateOperationsInput | number
    total_cost?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    manday?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    total_duration?: IntFieldUpdateOperationsInput | number
    total_cost?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    manday?: FloatFieldUpdateOperationsInput | number
    created_by?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskCreateInput = {
    task_id?: string
    name: string
    status: string
    workload: number
    duration: number
    cost: number
    updated_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    project: ProjectCreateNestedOneWithoutTasksInput
    ResourceAllocations?: ResourceAllocationsCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateInput = {
    task_id?: string
    name: string
    status: string
    workload: number
    duration: number
    cost: number
    project_id: string
    updated_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    ResourceAllocations?: ResourceAllocationsUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    workload?: FloatFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput
    ResourceAllocations?: ResourceAllocationsUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    workload?: FloatFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    project_id?: StringFieldUpdateOperationsInput | string
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ResourceAllocations?: ResourceAllocationsUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskCreateManyInput = {
    task_id?: string
    name: string
    status: string
    workload: number
    duration: number
    cost: number
    project_id: string
    updated_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TaskUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    workload?: FloatFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    workload?: FloatFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    project_id?: StringFieldUpdateOperationsInput | string
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResourceCreateInput = {
    resource_id?: string
    name: string
    rate: number
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    users?: UserCreateNestedManyWithoutResourceInput
    ResourceAllocations?: ResourceAllocationsCreateNestedManyWithoutResourceInput
  }

  export type ResourceUncheckedCreateInput = {
    resource_id?: string
    name: string
    rate: number
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutResourceInput
    ResourceAllocations?: ResourceAllocationsUncheckedCreateNestedManyWithoutResourceInput
  }

  export type ResourceUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    rate?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutResourceNestedInput
    ResourceAllocations?: ResourceAllocationsUpdateManyWithoutResourceNestedInput
  }

  export type ResourceUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    rate?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutResourceNestedInput
    ResourceAllocations?: ResourceAllocationsUncheckedUpdateManyWithoutResourceNestedInput
  }

  export type ResourceCreateManyInput = {
    resource_id?: string
    name: string
    rate: number
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ResourceUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    rate?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResourceUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    rate?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResourceAllocationsCreateInput = {
    allocation_id?: string
    allocation_percentage: number
    resource_hours: number
    created_at?: Date | string
    updated_at?: Date | string
    task: TaskCreateNestedOneWithoutResourceAllocationsInput
    project: ProjectCreateNestedOneWithoutResourceAllocationsInput
    resource: ResourceCreateNestedOneWithoutResourceAllocationsInput
  }

  export type ResourceAllocationsUncheckedCreateInput = {
    allocation_id?: string
    resource_id: string
    project_id: string
    task_id: string
    allocation_percentage: number
    resource_hours: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ResourceAllocationsUpdateInput = {
    allocation_percentage?: FloatFieldUpdateOperationsInput | number
    resource_hours?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: TaskUpdateOneRequiredWithoutResourceAllocationsNestedInput
    project?: ProjectUpdateOneRequiredWithoutResourceAllocationsNestedInput
    resource?: ResourceUpdateOneRequiredWithoutResourceAllocationsNestedInput
  }

  export type ResourceAllocationsUncheckedUpdateInput = {
    resource_id?: StringFieldUpdateOperationsInput | string
    project_id?: StringFieldUpdateOperationsInput | string
    task_id?: StringFieldUpdateOperationsInput | string
    allocation_percentage?: FloatFieldUpdateOperationsInput | number
    resource_hours?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResourceAllocationsCreateManyInput = {
    allocation_id?: string
    resource_id: string
    project_id: string
    task_id: string
    allocation_percentage: number
    resource_hours: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ResourceAllocationsUpdateManyMutationInput = {
    allocation_percentage?: FloatFieldUpdateOperationsInput | number
    resource_hours?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResourceAllocationsUncheckedUpdateManyInput = {
    resource_id?: StringFieldUpdateOperationsInput | string
    project_id?: StringFieldUpdateOperationsInput | string
    task_id?: StringFieldUpdateOperationsInput | string
    allocation_percentage?: FloatFieldUpdateOperationsInput | number
    resource_hours?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportsCreateInput = {
    report_id?: string
    start_date: Date | string
    end_date: Date | string
    data: string
    created_at?: Date | string
    generatedByUser: UserCreateNestedOneWithoutReportsInput
  }

  export type ReportsUncheckedCreateInput = {
    report_id?: string
    start_date: Date | string
    end_date: Date | string
    data: string
    generated_by: string
    created_at?: Date | string
  }

  export type ReportsUpdateInput = {
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    generatedByUser?: UserUpdateOneRequiredWithoutReportsNestedInput
  }

  export type ReportsUncheckedUpdateInput = {
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: StringFieldUpdateOperationsInput | string
    generated_by?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportsCreateManyInput = {
    report_id?: string
    start_date: Date | string
    end_date: Date | string
    data: string
    generated_by: string
    created_at?: Date | string
  }

  export type ReportsUpdateManyMutationInput = {
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportsUncheckedUpdateManyInput = {
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: StringFieldUpdateOperationsInput | string
    generated_by?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CostEstimationsCreateInput = {
    cost_id?: string
    total_hours: number
    estimated_cost: number
    created_at?: Date | string
    updated_at?: Date | string
    project: ProjectCreateNestedOneWithoutCostEstimationsInput
  }

  export type CostEstimationsUncheckedCreateInput = {
    cost_id?: string
    project_id: string
    total_hours: number
    estimated_cost: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CostEstimationsUpdateInput = {
    total_hours?: FloatFieldUpdateOperationsInput | number
    estimated_cost?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutCostEstimationsNestedInput
  }

  export type CostEstimationsUncheckedUpdateInput = {
    project_id?: StringFieldUpdateOperationsInput | string
    total_hours?: FloatFieldUpdateOperationsInput | number
    estimated_cost?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CostEstimationsCreateManyInput = {
    cost_id?: string
    project_id: string
    total_hours: number
    estimated_cost: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CostEstimationsUpdateManyMutationInput = {
    total_hours?: FloatFieldUpdateOperationsInput | number
    estimated_cost?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CostEstimationsUncheckedUpdateManyInput = {
    project_id?: StringFieldUpdateOperationsInput | string
    total_hours?: FloatFieldUpdateOperationsInput | number
    estimated_cost?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DurationEstimationsCreateInput = {
    duration_id?: string
    total_hours: number
    estimated_day: number
    created_at?: Date | string
    updated_at?: Date | string
    project: ProjectCreateNestedOneWithoutDurationEstimationsInput
  }

  export type DurationEstimationsUncheckedCreateInput = {
    duration_id?: string
    project_id: string
    total_hours: number
    estimated_day: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type DurationEstimationsUpdateInput = {
    total_hours?: FloatFieldUpdateOperationsInput | number
    estimated_day?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutDurationEstimationsNestedInput
  }

  export type DurationEstimationsUncheckedUpdateInput = {
    project_id?: StringFieldUpdateOperationsInput | string
    total_hours?: FloatFieldUpdateOperationsInput | number
    estimated_day?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DurationEstimationsCreateManyInput = {
    duration_id?: string
    project_id: string
    total_hours: number
    estimated_day: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type DurationEstimationsUpdateManyMutationInput = {
    total_hours?: FloatFieldUpdateOperationsInput | number
    estimated_day?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DurationEstimationsUncheckedUpdateManyInput = {
    project_id?: StringFieldUpdateOperationsInput | string
    total_hours?: FloatFieldUpdateOperationsInput | number
    estimated_day?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpCreateInput = {
    otp_id?: string
    code: string
    expires_at: Date | string
    email: string
    created_at?: Date | string
    user?: UserCreateNestedOneWithoutOtpsInput
  }

  export type OtpUncheckedCreateInput = {
    otp_id?: string
    code: string
    expires_at: Date | string
    email: string
    user_id?: string | null
    created_at?: Date | string
  }

  export type OtpUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutOtpsNestedInput
  }

  export type OtpUncheckedUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpCreateManyInput = {
    otp_id?: string
    code: string
    expires_at: Date | string
    email: string
    user_id?: string | null
    created_at?: Date | string
  }

  export type OtpUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpUncheckedUpdateManyInput = {
    code?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    isSet?: boolean
  }

  export type ResourceNullableRelationFilter = {
    is?: ResourceWhereInput | null
    isNot?: ResourceWhereInput | null
  }

  export type ProjectListRelationFilter = {
    every?: ProjectWhereInput
    some?: ProjectWhereInput
    none?: ProjectWhereInput
  }

  export type ReportsListRelationFilter = {
    every?: ReportsWhereInput
    some?: ReportsWhereInput
    none?: ReportsWhereInput
  }

  export type OtpListRelationFilter = {
    every?: OtpWhereInput
    some?: OtpWhereInput
    none?: OtpWhereInput
  }

  export type ProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReportsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OtpOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    user_id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role_id?: SortOrder
    profileImage?: SortOrder
    verified?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    refreshToken?: SortOrder
    accessToken?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    user_id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role_id?: SortOrder
    profileImage?: SortOrder
    verified?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    refreshToken?: SortOrder
    accessToken?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    user_id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role_id?: SortOrder
    profileImage?: SortOrder
    verified?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    refreshToken?: SortOrder
    accessToken?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type TaskListRelationFilter = {
    every?: TaskWhereInput
    some?: TaskWhereInput
    none?: TaskWhereInput
  }

  export type ResourceAllocationsListRelationFilter = {
    every?: ResourceAllocationsWhereInput
    some?: ResourceAllocationsWhereInput
    none?: ResourceAllocationsWhereInput
  }

  export type CostEstimationsListRelationFilter = {
    every?: CostEstimationsWhereInput
    some?: CostEstimationsWhereInput
    none?: CostEstimationsWhereInput
  }

  export type DurationEstimationsListRelationFilter = {
    every?: DurationEstimationsWhereInput
    some?: DurationEstimationsWhereInput
    none?: DurationEstimationsWhereInput
  }

  export type TaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResourceAllocationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CostEstimationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DurationEstimationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectCountOrderByAggregateInput = {
    project_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    start_date?: SortOrder
    total_duration?: SortOrder
    total_cost?: SortOrder
    status?: SortOrder
    manday?: SortOrder
    created_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ProjectAvgOrderByAggregateInput = {
    total_duration?: SortOrder
    total_cost?: SortOrder
    manday?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    project_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    start_date?: SortOrder
    total_duration?: SortOrder
    total_cost?: SortOrder
    status?: SortOrder
    manday?: SortOrder
    created_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    project_id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    start_date?: SortOrder
    total_duration?: SortOrder
    total_cost?: SortOrder
    status?: SortOrder
    manday?: SortOrder
    created_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ProjectSumOrderByAggregateInput = {
    total_duration?: SortOrder
    total_cost?: SortOrder
    manday?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ProjectRelationFilter = {
    is?: ProjectWhereInput
    isNot?: ProjectWhereInput
  }

  export type TaskCountOrderByAggregateInput = {
    task_id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    workload?: SortOrder
    duration?: SortOrder
    cost?: SortOrder
    project_id?: SortOrder
    updated_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TaskAvgOrderByAggregateInput = {
    workload?: SortOrder
    duration?: SortOrder
    cost?: SortOrder
  }

  export type TaskMaxOrderByAggregateInput = {
    task_id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    workload?: SortOrder
    duration?: SortOrder
    cost?: SortOrder
    project_id?: SortOrder
    updated_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TaskMinOrderByAggregateInput = {
    task_id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    workload?: SortOrder
    duration?: SortOrder
    cost?: SortOrder
    project_id?: SortOrder
    updated_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TaskSumOrderByAggregateInput = {
    workload?: SortOrder
    duration?: SortOrder
    cost?: SortOrder
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResourceCountOrderByAggregateInput = {
    resource_id?: SortOrder
    name?: SortOrder
    rate?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ResourceAvgOrderByAggregateInput = {
    rate?: SortOrder
  }

  export type ResourceMaxOrderByAggregateInput = {
    resource_id?: SortOrder
    name?: SortOrder
    rate?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ResourceMinOrderByAggregateInput = {
    resource_id?: SortOrder
    name?: SortOrder
    rate?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ResourceSumOrderByAggregateInput = {
    rate?: SortOrder
  }

  export type TaskRelationFilter = {
    is?: TaskWhereInput
    isNot?: TaskWhereInput
  }

  export type ResourceRelationFilter = {
    is?: ResourceWhereInput
    isNot?: ResourceWhereInput
  }

  export type ResourceAllocationsCountOrderByAggregateInput = {
    allocation_id?: SortOrder
    resource_id?: SortOrder
    project_id?: SortOrder
    task_id?: SortOrder
    allocation_percentage?: SortOrder
    resource_hours?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ResourceAllocationsAvgOrderByAggregateInput = {
    allocation_percentage?: SortOrder
    resource_hours?: SortOrder
  }

  export type ResourceAllocationsMaxOrderByAggregateInput = {
    allocation_id?: SortOrder
    resource_id?: SortOrder
    project_id?: SortOrder
    task_id?: SortOrder
    allocation_percentage?: SortOrder
    resource_hours?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ResourceAllocationsMinOrderByAggregateInput = {
    allocation_id?: SortOrder
    resource_id?: SortOrder
    project_id?: SortOrder
    task_id?: SortOrder
    allocation_percentage?: SortOrder
    resource_hours?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ResourceAllocationsSumOrderByAggregateInput = {
    allocation_percentage?: SortOrder
    resource_hours?: SortOrder
  }

  export type ReportsCountOrderByAggregateInput = {
    report_id?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    data?: SortOrder
    generated_by?: SortOrder
    created_at?: SortOrder
  }

  export type ReportsMaxOrderByAggregateInput = {
    report_id?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    data?: SortOrder
    generated_by?: SortOrder
    created_at?: SortOrder
  }

  export type ReportsMinOrderByAggregateInput = {
    report_id?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    data?: SortOrder
    generated_by?: SortOrder
    created_at?: SortOrder
  }

  export type CostEstimationsCountOrderByAggregateInput = {
    cost_id?: SortOrder
    project_id?: SortOrder
    total_hours?: SortOrder
    estimated_cost?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CostEstimationsAvgOrderByAggregateInput = {
    total_hours?: SortOrder
    estimated_cost?: SortOrder
  }

  export type CostEstimationsMaxOrderByAggregateInput = {
    cost_id?: SortOrder
    project_id?: SortOrder
    total_hours?: SortOrder
    estimated_cost?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CostEstimationsMinOrderByAggregateInput = {
    cost_id?: SortOrder
    project_id?: SortOrder
    total_hours?: SortOrder
    estimated_cost?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CostEstimationsSumOrderByAggregateInput = {
    total_hours?: SortOrder
    estimated_cost?: SortOrder
  }

  export type DurationEstimationsCountOrderByAggregateInput = {
    duration_id?: SortOrder
    project_id?: SortOrder
    total_hours?: SortOrder
    estimated_day?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type DurationEstimationsAvgOrderByAggregateInput = {
    total_hours?: SortOrder
    estimated_day?: SortOrder
  }

  export type DurationEstimationsMaxOrderByAggregateInput = {
    duration_id?: SortOrder
    project_id?: SortOrder
    total_hours?: SortOrder
    estimated_day?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type DurationEstimationsMinOrderByAggregateInput = {
    duration_id?: SortOrder
    project_id?: SortOrder
    total_hours?: SortOrder
    estimated_day?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type DurationEstimationsSumOrderByAggregateInput = {
    total_hours?: SortOrder
    estimated_day?: SortOrder
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type OtpCountOrderByAggregateInput = {
    otp_id?: SortOrder
    code?: SortOrder
    expires_at?: SortOrder
    email?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
  }

  export type OtpMaxOrderByAggregateInput = {
    otp_id?: SortOrder
    code?: SortOrder
    expires_at?: SortOrder
    email?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
  }

  export type OtpMinOrderByAggregateInput = {
    otp_id?: SortOrder
    code?: SortOrder
    expires_at?: SortOrder
    email?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
  }

  export type ResourceCreateNestedOneWithoutUsersInput = {
    create?: XOR<ResourceCreateWithoutUsersInput, ResourceUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ResourceCreateOrConnectWithoutUsersInput
    connect?: ResourceWhereUniqueInput
  }

  export type ProjectCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<ProjectCreateWithoutCreatedByUserInput, ProjectUncheckedCreateWithoutCreatedByUserInput> | ProjectCreateWithoutCreatedByUserInput[] | ProjectUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutCreatedByUserInput | ProjectCreateOrConnectWithoutCreatedByUserInput[]
    createMany?: ProjectCreateManyCreatedByUserInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type ReportsCreateNestedManyWithoutGeneratedByUserInput = {
    create?: XOR<ReportsCreateWithoutGeneratedByUserInput, ReportsUncheckedCreateWithoutGeneratedByUserInput> | ReportsCreateWithoutGeneratedByUserInput[] | ReportsUncheckedCreateWithoutGeneratedByUserInput[]
    connectOrCreate?: ReportsCreateOrConnectWithoutGeneratedByUserInput | ReportsCreateOrConnectWithoutGeneratedByUserInput[]
    createMany?: ReportsCreateManyGeneratedByUserInputEnvelope
    connect?: ReportsWhereUniqueInput | ReportsWhereUniqueInput[]
  }

  export type OtpCreateNestedManyWithoutUserInput = {
    create?: XOR<OtpCreateWithoutUserInput, OtpUncheckedCreateWithoutUserInput> | OtpCreateWithoutUserInput[] | OtpUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OtpCreateOrConnectWithoutUserInput | OtpCreateOrConnectWithoutUserInput[]
    createMany?: OtpCreateManyUserInputEnvelope
    connect?: OtpWhereUniqueInput | OtpWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<ProjectCreateWithoutCreatedByUserInput, ProjectUncheckedCreateWithoutCreatedByUserInput> | ProjectCreateWithoutCreatedByUserInput[] | ProjectUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutCreatedByUserInput | ProjectCreateOrConnectWithoutCreatedByUserInput[]
    createMany?: ProjectCreateManyCreatedByUserInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type ReportsUncheckedCreateNestedManyWithoutGeneratedByUserInput = {
    create?: XOR<ReportsCreateWithoutGeneratedByUserInput, ReportsUncheckedCreateWithoutGeneratedByUserInput> | ReportsCreateWithoutGeneratedByUserInput[] | ReportsUncheckedCreateWithoutGeneratedByUserInput[]
    connectOrCreate?: ReportsCreateOrConnectWithoutGeneratedByUserInput | ReportsCreateOrConnectWithoutGeneratedByUserInput[]
    createMany?: ReportsCreateManyGeneratedByUserInputEnvelope
    connect?: ReportsWhereUniqueInput | ReportsWhereUniqueInput[]
  }

  export type OtpUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OtpCreateWithoutUserInput, OtpUncheckedCreateWithoutUserInput> | OtpCreateWithoutUserInput[] | OtpUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OtpCreateOrConnectWithoutUserInput | OtpCreateOrConnectWithoutUserInput[]
    createMany?: OtpCreateManyUserInputEnvelope
    connect?: OtpWhereUniqueInput | OtpWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
    unset?: boolean
  }

  export type ResourceUpdateOneWithoutUsersNestedInput = {
    create?: XOR<ResourceCreateWithoutUsersInput, ResourceUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ResourceCreateOrConnectWithoutUsersInput
    upsert?: ResourceUpsertWithoutUsersInput
    disconnect?: boolean
    delete?: ResourceWhereInput | boolean
    connect?: ResourceWhereUniqueInput
    update?: XOR<XOR<ResourceUpdateToOneWithWhereWithoutUsersInput, ResourceUpdateWithoutUsersInput>, ResourceUncheckedUpdateWithoutUsersInput>
  }

  export type ProjectUpdateManyWithoutCreatedByUserNestedInput = {
    create?: XOR<ProjectCreateWithoutCreatedByUserInput, ProjectUncheckedCreateWithoutCreatedByUserInput> | ProjectCreateWithoutCreatedByUserInput[] | ProjectUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutCreatedByUserInput | ProjectCreateOrConnectWithoutCreatedByUserInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutCreatedByUserInput | ProjectUpsertWithWhereUniqueWithoutCreatedByUserInput[]
    createMany?: ProjectCreateManyCreatedByUserInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutCreatedByUserInput | ProjectUpdateWithWhereUniqueWithoutCreatedByUserInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutCreatedByUserInput | ProjectUpdateManyWithWhereWithoutCreatedByUserInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type ReportsUpdateManyWithoutGeneratedByUserNestedInput = {
    create?: XOR<ReportsCreateWithoutGeneratedByUserInput, ReportsUncheckedCreateWithoutGeneratedByUserInput> | ReportsCreateWithoutGeneratedByUserInput[] | ReportsUncheckedCreateWithoutGeneratedByUserInput[]
    connectOrCreate?: ReportsCreateOrConnectWithoutGeneratedByUserInput | ReportsCreateOrConnectWithoutGeneratedByUserInput[]
    upsert?: ReportsUpsertWithWhereUniqueWithoutGeneratedByUserInput | ReportsUpsertWithWhereUniqueWithoutGeneratedByUserInput[]
    createMany?: ReportsCreateManyGeneratedByUserInputEnvelope
    set?: ReportsWhereUniqueInput | ReportsWhereUniqueInput[]
    disconnect?: ReportsWhereUniqueInput | ReportsWhereUniqueInput[]
    delete?: ReportsWhereUniqueInput | ReportsWhereUniqueInput[]
    connect?: ReportsWhereUniqueInput | ReportsWhereUniqueInput[]
    update?: ReportsUpdateWithWhereUniqueWithoutGeneratedByUserInput | ReportsUpdateWithWhereUniqueWithoutGeneratedByUserInput[]
    updateMany?: ReportsUpdateManyWithWhereWithoutGeneratedByUserInput | ReportsUpdateManyWithWhereWithoutGeneratedByUserInput[]
    deleteMany?: ReportsScalarWhereInput | ReportsScalarWhereInput[]
  }

  export type OtpUpdateManyWithoutUserNestedInput = {
    create?: XOR<OtpCreateWithoutUserInput, OtpUncheckedCreateWithoutUserInput> | OtpCreateWithoutUserInput[] | OtpUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OtpCreateOrConnectWithoutUserInput | OtpCreateOrConnectWithoutUserInput[]
    upsert?: OtpUpsertWithWhereUniqueWithoutUserInput | OtpUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OtpCreateManyUserInputEnvelope
    set?: OtpWhereUniqueInput | OtpWhereUniqueInput[]
    disconnect?: OtpWhereUniqueInput | OtpWhereUniqueInput[]
    delete?: OtpWhereUniqueInput | OtpWhereUniqueInput[]
    connect?: OtpWhereUniqueInput | OtpWhereUniqueInput[]
    update?: OtpUpdateWithWhereUniqueWithoutUserInput | OtpUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OtpUpdateManyWithWhereWithoutUserInput | OtpUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OtpScalarWhereInput | OtpScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
    create?: XOR<ProjectCreateWithoutCreatedByUserInput, ProjectUncheckedCreateWithoutCreatedByUserInput> | ProjectCreateWithoutCreatedByUserInput[] | ProjectUncheckedCreateWithoutCreatedByUserInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutCreatedByUserInput | ProjectCreateOrConnectWithoutCreatedByUserInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutCreatedByUserInput | ProjectUpsertWithWhereUniqueWithoutCreatedByUserInput[]
    createMany?: ProjectCreateManyCreatedByUserInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutCreatedByUserInput | ProjectUpdateWithWhereUniqueWithoutCreatedByUserInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutCreatedByUserInput | ProjectUpdateManyWithWhereWithoutCreatedByUserInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type ReportsUncheckedUpdateManyWithoutGeneratedByUserNestedInput = {
    create?: XOR<ReportsCreateWithoutGeneratedByUserInput, ReportsUncheckedCreateWithoutGeneratedByUserInput> | ReportsCreateWithoutGeneratedByUserInput[] | ReportsUncheckedCreateWithoutGeneratedByUserInput[]
    connectOrCreate?: ReportsCreateOrConnectWithoutGeneratedByUserInput | ReportsCreateOrConnectWithoutGeneratedByUserInput[]
    upsert?: ReportsUpsertWithWhereUniqueWithoutGeneratedByUserInput | ReportsUpsertWithWhereUniqueWithoutGeneratedByUserInput[]
    createMany?: ReportsCreateManyGeneratedByUserInputEnvelope
    set?: ReportsWhereUniqueInput | ReportsWhereUniqueInput[]
    disconnect?: ReportsWhereUniqueInput | ReportsWhereUniqueInput[]
    delete?: ReportsWhereUniqueInput | ReportsWhereUniqueInput[]
    connect?: ReportsWhereUniqueInput | ReportsWhereUniqueInput[]
    update?: ReportsUpdateWithWhereUniqueWithoutGeneratedByUserInput | ReportsUpdateWithWhereUniqueWithoutGeneratedByUserInput[]
    updateMany?: ReportsUpdateManyWithWhereWithoutGeneratedByUserInput | ReportsUpdateManyWithWhereWithoutGeneratedByUserInput[]
    deleteMany?: ReportsScalarWhereInput | ReportsScalarWhereInput[]
  }

  export type OtpUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OtpCreateWithoutUserInput, OtpUncheckedCreateWithoutUserInput> | OtpCreateWithoutUserInput[] | OtpUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OtpCreateOrConnectWithoutUserInput | OtpCreateOrConnectWithoutUserInput[]
    upsert?: OtpUpsertWithWhereUniqueWithoutUserInput | OtpUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OtpCreateManyUserInputEnvelope
    set?: OtpWhereUniqueInput | OtpWhereUniqueInput[]
    disconnect?: OtpWhereUniqueInput | OtpWhereUniqueInput[]
    delete?: OtpWhereUniqueInput | OtpWhereUniqueInput[]
    connect?: OtpWhereUniqueInput | OtpWhereUniqueInput[]
    update?: OtpUpdateWithWhereUniqueWithoutUserInput | OtpUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OtpUpdateManyWithWhereWithoutUserInput | OtpUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OtpScalarWhereInput | OtpScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutProjectsInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput
    connect?: UserWhereUniqueInput
  }

  export type TaskCreateNestedManyWithoutProjectInput = {
    create?: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput> | TaskCreateWithoutProjectInput[] | TaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProjectInput | TaskCreateOrConnectWithoutProjectInput[]
    createMany?: TaskCreateManyProjectInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type ResourceAllocationsCreateNestedManyWithoutProjectInput = {
    create?: XOR<ResourceAllocationsCreateWithoutProjectInput, ResourceAllocationsUncheckedCreateWithoutProjectInput> | ResourceAllocationsCreateWithoutProjectInput[] | ResourceAllocationsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ResourceAllocationsCreateOrConnectWithoutProjectInput | ResourceAllocationsCreateOrConnectWithoutProjectInput[]
    createMany?: ResourceAllocationsCreateManyProjectInputEnvelope
    connect?: ResourceAllocationsWhereUniqueInput | ResourceAllocationsWhereUniqueInput[]
  }

  export type CostEstimationsCreateNestedManyWithoutProjectInput = {
    create?: XOR<CostEstimationsCreateWithoutProjectInput, CostEstimationsUncheckedCreateWithoutProjectInput> | CostEstimationsCreateWithoutProjectInput[] | CostEstimationsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CostEstimationsCreateOrConnectWithoutProjectInput | CostEstimationsCreateOrConnectWithoutProjectInput[]
    createMany?: CostEstimationsCreateManyProjectInputEnvelope
    connect?: CostEstimationsWhereUniqueInput | CostEstimationsWhereUniqueInput[]
  }

  export type DurationEstimationsCreateNestedManyWithoutProjectInput = {
    create?: XOR<DurationEstimationsCreateWithoutProjectInput, DurationEstimationsUncheckedCreateWithoutProjectInput> | DurationEstimationsCreateWithoutProjectInput[] | DurationEstimationsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DurationEstimationsCreateOrConnectWithoutProjectInput | DurationEstimationsCreateOrConnectWithoutProjectInput[]
    createMany?: DurationEstimationsCreateManyProjectInputEnvelope
    connect?: DurationEstimationsWhereUniqueInput | DurationEstimationsWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput> | TaskCreateWithoutProjectInput[] | TaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProjectInput | TaskCreateOrConnectWithoutProjectInput[]
    createMany?: TaskCreateManyProjectInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type ResourceAllocationsUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ResourceAllocationsCreateWithoutProjectInput, ResourceAllocationsUncheckedCreateWithoutProjectInput> | ResourceAllocationsCreateWithoutProjectInput[] | ResourceAllocationsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ResourceAllocationsCreateOrConnectWithoutProjectInput | ResourceAllocationsCreateOrConnectWithoutProjectInput[]
    createMany?: ResourceAllocationsCreateManyProjectInputEnvelope
    connect?: ResourceAllocationsWhereUniqueInput | ResourceAllocationsWhereUniqueInput[]
  }

  export type CostEstimationsUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<CostEstimationsCreateWithoutProjectInput, CostEstimationsUncheckedCreateWithoutProjectInput> | CostEstimationsCreateWithoutProjectInput[] | CostEstimationsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CostEstimationsCreateOrConnectWithoutProjectInput | CostEstimationsCreateOrConnectWithoutProjectInput[]
    createMany?: CostEstimationsCreateManyProjectInputEnvelope
    connect?: CostEstimationsWhereUniqueInput | CostEstimationsWhereUniqueInput[]
  }

  export type DurationEstimationsUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<DurationEstimationsCreateWithoutProjectInput, DurationEstimationsUncheckedCreateWithoutProjectInput> | DurationEstimationsCreateWithoutProjectInput[] | DurationEstimationsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DurationEstimationsCreateOrConnectWithoutProjectInput | DurationEstimationsCreateOrConnectWithoutProjectInput[]
    createMany?: DurationEstimationsCreateManyProjectInputEnvelope
    connect?: DurationEstimationsWhereUniqueInput | DurationEstimationsWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutProjectsNestedInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput
    upsert?: UserUpsertWithoutProjectsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProjectsInput, UserUpdateWithoutProjectsInput>, UserUncheckedUpdateWithoutProjectsInput>
  }

  export type TaskUpdateManyWithoutProjectNestedInput = {
    create?: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput> | TaskCreateWithoutProjectInput[] | TaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProjectInput | TaskCreateOrConnectWithoutProjectInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutProjectInput | TaskUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: TaskCreateManyProjectInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutProjectInput | TaskUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutProjectInput | TaskUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type ResourceAllocationsUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ResourceAllocationsCreateWithoutProjectInput, ResourceAllocationsUncheckedCreateWithoutProjectInput> | ResourceAllocationsCreateWithoutProjectInput[] | ResourceAllocationsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ResourceAllocationsCreateOrConnectWithoutProjectInput | ResourceAllocationsCreateOrConnectWithoutProjectInput[]
    upsert?: ResourceAllocationsUpsertWithWhereUniqueWithoutProjectInput | ResourceAllocationsUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ResourceAllocationsCreateManyProjectInputEnvelope
    set?: ResourceAllocationsWhereUniqueInput | ResourceAllocationsWhereUniqueInput[]
    disconnect?: ResourceAllocationsWhereUniqueInput | ResourceAllocationsWhereUniqueInput[]
    delete?: ResourceAllocationsWhereUniqueInput | ResourceAllocationsWhereUniqueInput[]
    connect?: ResourceAllocationsWhereUniqueInput | ResourceAllocationsWhereUniqueInput[]
    update?: ResourceAllocationsUpdateWithWhereUniqueWithoutProjectInput | ResourceAllocationsUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ResourceAllocationsUpdateManyWithWhereWithoutProjectInput | ResourceAllocationsUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ResourceAllocationsScalarWhereInput | ResourceAllocationsScalarWhereInput[]
  }

  export type CostEstimationsUpdateManyWithoutProjectNestedInput = {
    create?: XOR<CostEstimationsCreateWithoutProjectInput, CostEstimationsUncheckedCreateWithoutProjectInput> | CostEstimationsCreateWithoutProjectInput[] | CostEstimationsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CostEstimationsCreateOrConnectWithoutProjectInput | CostEstimationsCreateOrConnectWithoutProjectInput[]
    upsert?: CostEstimationsUpsertWithWhereUniqueWithoutProjectInput | CostEstimationsUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: CostEstimationsCreateManyProjectInputEnvelope
    set?: CostEstimationsWhereUniqueInput | CostEstimationsWhereUniqueInput[]
    disconnect?: CostEstimationsWhereUniqueInput | CostEstimationsWhereUniqueInput[]
    delete?: CostEstimationsWhereUniqueInput | CostEstimationsWhereUniqueInput[]
    connect?: CostEstimationsWhereUniqueInput | CostEstimationsWhereUniqueInput[]
    update?: CostEstimationsUpdateWithWhereUniqueWithoutProjectInput | CostEstimationsUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: CostEstimationsUpdateManyWithWhereWithoutProjectInput | CostEstimationsUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: CostEstimationsScalarWhereInput | CostEstimationsScalarWhereInput[]
  }

  export type DurationEstimationsUpdateManyWithoutProjectNestedInput = {
    create?: XOR<DurationEstimationsCreateWithoutProjectInput, DurationEstimationsUncheckedCreateWithoutProjectInput> | DurationEstimationsCreateWithoutProjectInput[] | DurationEstimationsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DurationEstimationsCreateOrConnectWithoutProjectInput | DurationEstimationsCreateOrConnectWithoutProjectInput[]
    upsert?: DurationEstimationsUpsertWithWhereUniqueWithoutProjectInput | DurationEstimationsUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: DurationEstimationsCreateManyProjectInputEnvelope
    set?: DurationEstimationsWhereUniqueInput | DurationEstimationsWhereUniqueInput[]
    disconnect?: DurationEstimationsWhereUniqueInput | DurationEstimationsWhereUniqueInput[]
    delete?: DurationEstimationsWhereUniqueInput | DurationEstimationsWhereUniqueInput[]
    connect?: DurationEstimationsWhereUniqueInput | DurationEstimationsWhereUniqueInput[]
    update?: DurationEstimationsUpdateWithWhereUniqueWithoutProjectInput | DurationEstimationsUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: DurationEstimationsUpdateManyWithWhereWithoutProjectInput | DurationEstimationsUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: DurationEstimationsScalarWhereInput | DurationEstimationsScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput> | TaskCreateWithoutProjectInput[] | TaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProjectInput | TaskCreateOrConnectWithoutProjectInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutProjectInput | TaskUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: TaskCreateManyProjectInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutProjectInput | TaskUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutProjectInput | TaskUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type ResourceAllocationsUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ResourceAllocationsCreateWithoutProjectInput, ResourceAllocationsUncheckedCreateWithoutProjectInput> | ResourceAllocationsCreateWithoutProjectInput[] | ResourceAllocationsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ResourceAllocationsCreateOrConnectWithoutProjectInput | ResourceAllocationsCreateOrConnectWithoutProjectInput[]
    upsert?: ResourceAllocationsUpsertWithWhereUniqueWithoutProjectInput | ResourceAllocationsUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ResourceAllocationsCreateManyProjectInputEnvelope
    set?: ResourceAllocationsWhereUniqueInput | ResourceAllocationsWhereUniqueInput[]
    disconnect?: ResourceAllocationsWhereUniqueInput | ResourceAllocationsWhereUniqueInput[]
    delete?: ResourceAllocationsWhereUniqueInput | ResourceAllocationsWhereUniqueInput[]
    connect?: ResourceAllocationsWhereUniqueInput | ResourceAllocationsWhereUniqueInput[]
    update?: ResourceAllocationsUpdateWithWhereUniqueWithoutProjectInput | ResourceAllocationsUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ResourceAllocationsUpdateManyWithWhereWithoutProjectInput | ResourceAllocationsUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ResourceAllocationsScalarWhereInput | ResourceAllocationsScalarWhereInput[]
  }

  export type CostEstimationsUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<CostEstimationsCreateWithoutProjectInput, CostEstimationsUncheckedCreateWithoutProjectInput> | CostEstimationsCreateWithoutProjectInput[] | CostEstimationsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CostEstimationsCreateOrConnectWithoutProjectInput | CostEstimationsCreateOrConnectWithoutProjectInput[]
    upsert?: CostEstimationsUpsertWithWhereUniqueWithoutProjectInput | CostEstimationsUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: CostEstimationsCreateManyProjectInputEnvelope
    set?: CostEstimationsWhereUniqueInput | CostEstimationsWhereUniqueInput[]
    disconnect?: CostEstimationsWhereUniqueInput | CostEstimationsWhereUniqueInput[]
    delete?: CostEstimationsWhereUniqueInput | CostEstimationsWhereUniqueInput[]
    connect?: CostEstimationsWhereUniqueInput | CostEstimationsWhereUniqueInput[]
    update?: CostEstimationsUpdateWithWhereUniqueWithoutProjectInput | CostEstimationsUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: CostEstimationsUpdateManyWithWhereWithoutProjectInput | CostEstimationsUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: CostEstimationsScalarWhereInput | CostEstimationsScalarWhereInput[]
  }

  export type DurationEstimationsUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<DurationEstimationsCreateWithoutProjectInput, DurationEstimationsUncheckedCreateWithoutProjectInput> | DurationEstimationsCreateWithoutProjectInput[] | DurationEstimationsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DurationEstimationsCreateOrConnectWithoutProjectInput | DurationEstimationsCreateOrConnectWithoutProjectInput[]
    upsert?: DurationEstimationsUpsertWithWhereUniqueWithoutProjectInput | DurationEstimationsUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: DurationEstimationsCreateManyProjectInputEnvelope
    set?: DurationEstimationsWhereUniqueInput | DurationEstimationsWhereUniqueInput[]
    disconnect?: DurationEstimationsWhereUniqueInput | DurationEstimationsWhereUniqueInput[]
    delete?: DurationEstimationsWhereUniqueInput | DurationEstimationsWhereUniqueInput[]
    connect?: DurationEstimationsWhereUniqueInput | DurationEstimationsWhereUniqueInput[]
    update?: DurationEstimationsUpdateWithWhereUniqueWithoutProjectInput | DurationEstimationsUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: DurationEstimationsUpdateManyWithWhereWithoutProjectInput | DurationEstimationsUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: DurationEstimationsScalarWhereInput | DurationEstimationsScalarWhereInput[]
  }

  export type ProjectCreateNestedOneWithoutTasksInput = {
    create?: XOR<ProjectCreateWithoutTasksInput, ProjectUncheckedCreateWithoutTasksInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTasksInput
    connect?: ProjectWhereUniqueInput
  }

  export type ResourceAllocationsCreateNestedManyWithoutTaskInput = {
    create?: XOR<ResourceAllocationsCreateWithoutTaskInput, ResourceAllocationsUncheckedCreateWithoutTaskInput> | ResourceAllocationsCreateWithoutTaskInput[] | ResourceAllocationsUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: ResourceAllocationsCreateOrConnectWithoutTaskInput | ResourceAllocationsCreateOrConnectWithoutTaskInput[]
    createMany?: ResourceAllocationsCreateManyTaskInputEnvelope
    connect?: ResourceAllocationsWhereUniqueInput | ResourceAllocationsWhereUniqueInput[]
  }

  export type ResourceAllocationsUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<ResourceAllocationsCreateWithoutTaskInput, ResourceAllocationsUncheckedCreateWithoutTaskInput> | ResourceAllocationsCreateWithoutTaskInput[] | ResourceAllocationsUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: ResourceAllocationsCreateOrConnectWithoutTaskInput | ResourceAllocationsCreateOrConnectWithoutTaskInput[]
    createMany?: ResourceAllocationsCreateManyTaskInputEnvelope
    connect?: ResourceAllocationsWhereUniqueInput | ResourceAllocationsWhereUniqueInput[]
  }

  export type ProjectUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<ProjectCreateWithoutTasksInput, ProjectUncheckedCreateWithoutTasksInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTasksInput
    upsert?: ProjectUpsertWithoutTasksInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutTasksInput, ProjectUpdateWithoutTasksInput>, ProjectUncheckedUpdateWithoutTasksInput>
  }

  export type ResourceAllocationsUpdateManyWithoutTaskNestedInput = {
    create?: XOR<ResourceAllocationsCreateWithoutTaskInput, ResourceAllocationsUncheckedCreateWithoutTaskInput> | ResourceAllocationsCreateWithoutTaskInput[] | ResourceAllocationsUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: ResourceAllocationsCreateOrConnectWithoutTaskInput | ResourceAllocationsCreateOrConnectWithoutTaskInput[]
    upsert?: ResourceAllocationsUpsertWithWhereUniqueWithoutTaskInput | ResourceAllocationsUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: ResourceAllocationsCreateManyTaskInputEnvelope
    set?: ResourceAllocationsWhereUniqueInput | ResourceAllocationsWhereUniqueInput[]
    disconnect?: ResourceAllocationsWhereUniqueInput | ResourceAllocationsWhereUniqueInput[]
    delete?: ResourceAllocationsWhereUniqueInput | ResourceAllocationsWhereUniqueInput[]
    connect?: ResourceAllocationsWhereUniqueInput | ResourceAllocationsWhereUniqueInput[]
    update?: ResourceAllocationsUpdateWithWhereUniqueWithoutTaskInput | ResourceAllocationsUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: ResourceAllocationsUpdateManyWithWhereWithoutTaskInput | ResourceAllocationsUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: ResourceAllocationsScalarWhereInput | ResourceAllocationsScalarWhereInput[]
  }

  export type ResourceAllocationsUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<ResourceAllocationsCreateWithoutTaskInput, ResourceAllocationsUncheckedCreateWithoutTaskInput> | ResourceAllocationsCreateWithoutTaskInput[] | ResourceAllocationsUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: ResourceAllocationsCreateOrConnectWithoutTaskInput | ResourceAllocationsCreateOrConnectWithoutTaskInput[]
    upsert?: ResourceAllocationsUpsertWithWhereUniqueWithoutTaskInput | ResourceAllocationsUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: ResourceAllocationsCreateManyTaskInputEnvelope
    set?: ResourceAllocationsWhereUniqueInput | ResourceAllocationsWhereUniqueInput[]
    disconnect?: ResourceAllocationsWhereUniqueInput | ResourceAllocationsWhereUniqueInput[]
    delete?: ResourceAllocationsWhereUniqueInput | ResourceAllocationsWhereUniqueInput[]
    connect?: ResourceAllocationsWhereUniqueInput | ResourceAllocationsWhereUniqueInput[]
    update?: ResourceAllocationsUpdateWithWhereUniqueWithoutTaskInput | ResourceAllocationsUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: ResourceAllocationsUpdateManyWithWhereWithoutTaskInput | ResourceAllocationsUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: ResourceAllocationsScalarWhereInput | ResourceAllocationsScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutResourceInput = {
    create?: XOR<UserCreateWithoutResourceInput, UserUncheckedCreateWithoutResourceInput> | UserCreateWithoutResourceInput[] | UserUncheckedCreateWithoutResourceInput[]
    connectOrCreate?: UserCreateOrConnectWithoutResourceInput | UserCreateOrConnectWithoutResourceInput[]
    createMany?: UserCreateManyResourceInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ResourceAllocationsCreateNestedManyWithoutResourceInput = {
    create?: XOR<ResourceAllocationsCreateWithoutResourceInput, ResourceAllocationsUncheckedCreateWithoutResourceInput> | ResourceAllocationsCreateWithoutResourceInput[] | ResourceAllocationsUncheckedCreateWithoutResourceInput[]
    connectOrCreate?: ResourceAllocationsCreateOrConnectWithoutResourceInput | ResourceAllocationsCreateOrConnectWithoutResourceInput[]
    createMany?: ResourceAllocationsCreateManyResourceInputEnvelope
    connect?: ResourceAllocationsWhereUniqueInput | ResourceAllocationsWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutResourceInput = {
    create?: XOR<UserCreateWithoutResourceInput, UserUncheckedCreateWithoutResourceInput> | UserCreateWithoutResourceInput[] | UserUncheckedCreateWithoutResourceInput[]
    connectOrCreate?: UserCreateOrConnectWithoutResourceInput | UserCreateOrConnectWithoutResourceInput[]
    createMany?: UserCreateManyResourceInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ResourceAllocationsUncheckedCreateNestedManyWithoutResourceInput = {
    create?: XOR<ResourceAllocationsCreateWithoutResourceInput, ResourceAllocationsUncheckedCreateWithoutResourceInput> | ResourceAllocationsCreateWithoutResourceInput[] | ResourceAllocationsUncheckedCreateWithoutResourceInput[]
    connectOrCreate?: ResourceAllocationsCreateOrConnectWithoutResourceInput | ResourceAllocationsCreateOrConnectWithoutResourceInput[]
    createMany?: ResourceAllocationsCreateManyResourceInputEnvelope
    connect?: ResourceAllocationsWhereUniqueInput | ResourceAllocationsWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutResourceNestedInput = {
    create?: XOR<UserCreateWithoutResourceInput, UserUncheckedCreateWithoutResourceInput> | UserCreateWithoutResourceInput[] | UserUncheckedCreateWithoutResourceInput[]
    connectOrCreate?: UserCreateOrConnectWithoutResourceInput | UserCreateOrConnectWithoutResourceInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutResourceInput | UserUpsertWithWhereUniqueWithoutResourceInput[]
    createMany?: UserCreateManyResourceInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutResourceInput | UserUpdateWithWhereUniqueWithoutResourceInput[]
    updateMany?: UserUpdateManyWithWhereWithoutResourceInput | UserUpdateManyWithWhereWithoutResourceInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ResourceAllocationsUpdateManyWithoutResourceNestedInput = {
    create?: XOR<ResourceAllocationsCreateWithoutResourceInput, ResourceAllocationsUncheckedCreateWithoutResourceInput> | ResourceAllocationsCreateWithoutResourceInput[] | ResourceAllocationsUncheckedCreateWithoutResourceInput[]
    connectOrCreate?: ResourceAllocationsCreateOrConnectWithoutResourceInput | ResourceAllocationsCreateOrConnectWithoutResourceInput[]
    upsert?: ResourceAllocationsUpsertWithWhereUniqueWithoutResourceInput | ResourceAllocationsUpsertWithWhereUniqueWithoutResourceInput[]
    createMany?: ResourceAllocationsCreateManyResourceInputEnvelope
    set?: ResourceAllocationsWhereUniqueInput | ResourceAllocationsWhereUniqueInput[]
    disconnect?: ResourceAllocationsWhereUniqueInput | ResourceAllocationsWhereUniqueInput[]
    delete?: ResourceAllocationsWhereUniqueInput | ResourceAllocationsWhereUniqueInput[]
    connect?: ResourceAllocationsWhereUniqueInput | ResourceAllocationsWhereUniqueInput[]
    update?: ResourceAllocationsUpdateWithWhereUniqueWithoutResourceInput | ResourceAllocationsUpdateWithWhereUniqueWithoutResourceInput[]
    updateMany?: ResourceAllocationsUpdateManyWithWhereWithoutResourceInput | ResourceAllocationsUpdateManyWithWhereWithoutResourceInput[]
    deleteMany?: ResourceAllocationsScalarWhereInput | ResourceAllocationsScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutResourceNestedInput = {
    create?: XOR<UserCreateWithoutResourceInput, UserUncheckedCreateWithoutResourceInput> | UserCreateWithoutResourceInput[] | UserUncheckedCreateWithoutResourceInput[]
    connectOrCreate?: UserCreateOrConnectWithoutResourceInput | UserCreateOrConnectWithoutResourceInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutResourceInput | UserUpsertWithWhereUniqueWithoutResourceInput[]
    createMany?: UserCreateManyResourceInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutResourceInput | UserUpdateWithWhereUniqueWithoutResourceInput[]
    updateMany?: UserUpdateManyWithWhereWithoutResourceInput | UserUpdateManyWithWhereWithoutResourceInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ResourceAllocationsUncheckedUpdateManyWithoutResourceNestedInput = {
    create?: XOR<ResourceAllocationsCreateWithoutResourceInput, ResourceAllocationsUncheckedCreateWithoutResourceInput> | ResourceAllocationsCreateWithoutResourceInput[] | ResourceAllocationsUncheckedCreateWithoutResourceInput[]
    connectOrCreate?: ResourceAllocationsCreateOrConnectWithoutResourceInput | ResourceAllocationsCreateOrConnectWithoutResourceInput[]
    upsert?: ResourceAllocationsUpsertWithWhereUniqueWithoutResourceInput | ResourceAllocationsUpsertWithWhereUniqueWithoutResourceInput[]
    createMany?: ResourceAllocationsCreateManyResourceInputEnvelope
    set?: ResourceAllocationsWhereUniqueInput | ResourceAllocationsWhereUniqueInput[]
    disconnect?: ResourceAllocationsWhereUniqueInput | ResourceAllocationsWhereUniqueInput[]
    delete?: ResourceAllocationsWhereUniqueInput | ResourceAllocationsWhereUniqueInput[]
    connect?: ResourceAllocationsWhereUniqueInput | ResourceAllocationsWhereUniqueInput[]
    update?: ResourceAllocationsUpdateWithWhereUniqueWithoutResourceInput | ResourceAllocationsUpdateWithWhereUniqueWithoutResourceInput[]
    updateMany?: ResourceAllocationsUpdateManyWithWhereWithoutResourceInput | ResourceAllocationsUpdateManyWithWhereWithoutResourceInput[]
    deleteMany?: ResourceAllocationsScalarWhereInput | ResourceAllocationsScalarWhereInput[]
  }

  export type TaskCreateNestedOneWithoutResourceAllocationsInput = {
    create?: XOR<TaskCreateWithoutResourceAllocationsInput, TaskUncheckedCreateWithoutResourceAllocationsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutResourceAllocationsInput
    connect?: TaskWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutResourceAllocationsInput = {
    create?: XOR<ProjectCreateWithoutResourceAllocationsInput, ProjectUncheckedCreateWithoutResourceAllocationsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutResourceAllocationsInput
    connect?: ProjectWhereUniqueInput
  }

  export type ResourceCreateNestedOneWithoutResourceAllocationsInput = {
    create?: XOR<ResourceCreateWithoutResourceAllocationsInput, ResourceUncheckedCreateWithoutResourceAllocationsInput>
    connectOrCreate?: ResourceCreateOrConnectWithoutResourceAllocationsInput
    connect?: ResourceWhereUniqueInput
  }

  export type TaskUpdateOneRequiredWithoutResourceAllocationsNestedInput = {
    create?: XOR<TaskCreateWithoutResourceAllocationsInput, TaskUncheckedCreateWithoutResourceAllocationsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutResourceAllocationsInput
    upsert?: TaskUpsertWithoutResourceAllocationsInput
    connect?: TaskWhereUniqueInput
    update?: XOR<XOR<TaskUpdateToOneWithWhereWithoutResourceAllocationsInput, TaskUpdateWithoutResourceAllocationsInput>, TaskUncheckedUpdateWithoutResourceAllocationsInput>
  }

  export type ProjectUpdateOneRequiredWithoutResourceAllocationsNestedInput = {
    create?: XOR<ProjectCreateWithoutResourceAllocationsInput, ProjectUncheckedCreateWithoutResourceAllocationsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutResourceAllocationsInput
    upsert?: ProjectUpsertWithoutResourceAllocationsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutResourceAllocationsInput, ProjectUpdateWithoutResourceAllocationsInput>, ProjectUncheckedUpdateWithoutResourceAllocationsInput>
  }

  export type ResourceUpdateOneRequiredWithoutResourceAllocationsNestedInput = {
    create?: XOR<ResourceCreateWithoutResourceAllocationsInput, ResourceUncheckedCreateWithoutResourceAllocationsInput>
    connectOrCreate?: ResourceCreateOrConnectWithoutResourceAllocationsInput
    upsert?: ResourceUpsertWithoutResourceAllocationsInput
    connect?: ResourceWhereUniqueInput
    update?: XOR<XOR<ResourceUpdateToOneWithWhereWithoutResourceAllocationsInput, ResourceUpdateWithoutResourceAllocationsInput>, ResourceUncheckedUpdateWithoutResourceAllocationsInput>
  }

  export type UserCreateNestedOneWithoutReportsInput = {
    create?: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportsInput
    upsert?: UserUpsertWithoutReportsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReportsInput, UserUpdateWithoutReportsInput>, UserUncheckedUpdateWithoutReportsInput>
  }

  export type ProjectCreateNestedOneWithoutCostEstimationsInput = {
    create?: XOR<ProjectCreateWithoutCostEstimationsInput, ProjectUncheckedCreateWithoutCostEstimationsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutCostEstimationsInput
    connect?: ProjectWhereUniqueInput
  }

  export type ProjectUpdateOneRequiredWithoutCostEstimationsNestedInput = {
    create?: XOR<ProjectCreateWithoutCostEstimationsInput, ProjectUncheckedCreateWithoutCostEstimationsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutCostEstimationsInput
    upsert?: ProjectUpsertWithoutCostEstimationsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutCostEstimationsInput, ProjectUpdateWithoutCostEstimationsInput>, ProjectUncheckedUpdateWithoutCostEstimationsInput>
  }

  export type ProjectCreateNestedOneWithoutDurationEstimationsInput = {
    create?: XOR<ProjectCreateWithoutDurationEstimationsInput, ProjectUncheckedCreateWithoutDurationEstimationsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutDurationEstimationsInput
    connect?: ProjectWhereUniqueInput
  }

  export type ProjectUpdateOneRequiredWithoutDurationEstimationsNestedInput = {
    create?: XOR<ProjectCreateWithoutDurationEstimationsInput, ProjectUncheckedCreateWithoutDurationEstimationsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutDurationEstimationsInput
    upsert?: ProjectUpsertWithoutDurationEstimationsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutDurationEstimationsInput, ProjectUpdateWithoutDurationEstimationsInput>, ProjectUncheckedUpdateWithoutDurationEstimationsInput>
  }

  export type UserCreateNestedOneWithoutOtpsInput = {
    create?: XOR<UserCreateWithoutOtpsInput, UserUncheckedCreateWithoutOtpsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOtpsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutOtpsNestedInput = {
    create?: XOR<UserCreateWithoutOtpsInput, UserUncheckedCreateWithoutOtpsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOtpsInput
    upsert?: UserUpsertWithoutOtpsInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOtpsInput, UserUpdateWithoutOtpsInput>, UserUncheckedUpdateWithoutOtpsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    isSet?: boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ResourceCreateWithoutUsersInput = {
    resource_id?: string
    name: string
    rate: number
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    ResourceAllocations?: ResourceAllocationsCreateNestedManyWithoutResourceInput
  }

  export type ResourceUncheckedCreateWithoutUsersInput = {
    resource_id?: string
    name: string
    rate: number
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    ResourceAllocations?: ResourceAllocationsUncheckedCreateNestedManyWithoutResourceInput
  }

  export type ResourceCreateOrConnectWithoutUsersInput = {
    where: ResourceWhereUniqueInput
    create: XOR<ResourceCreateWithoutUsersInput, ResourceUncheckedCreateWithoutUsersInput>
  }

  export type ProjectCreateWithoutCreatedByUserInput = {
    project_id?: string
    name: string
    description?: string | null
    start_date: Date | string
    total_duration: number
    total_cost: number
    status: string
    manday: number
    created_at?: Date | string
    updated_at?: Date | string
    tasks?: TaskCreateNestedManyWithoutProjectInput
    ResourceAllocations?: ResourceAllocationsCreateNestedManyWithoutProjectInput
    CostEstimations?: CostEstimationsCreateNestedManyWithoutProjectInput
    DurationEstimations?: DurationEstimationsCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutCreatedByUserInput = {
    project_id?: string
    name: string
    description?: string | null
    start_date: Date | string
    total_duration: number
    total_cost: number
    status: string
    manday: number
    created_at?: Date | string
    updated_at?: Date | string
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    ResourceAllocations?: ResourceAllocationsUncheckedCreateNestedManyWithoutProjectInput
    CostEstimations?: CostEstimationsUncheckedCreateNestedManyWithoutProjectInput
    DurationEstimations?: DurationEstimationsUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutCreatedByUserInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutCreatedByUserInput, ProjectUncheckedCreateWithoutCreatedByUserInput>
  }

  export type ProjectCreateManyCreatedByUserInputEnvelope = {
    data: ProjectCreateManyCreatedByUserInput | ProjectCreateManyCreatedByUserInput[]
  }

  export type ReportsCreateWithoutGeneratedByUserInput = {
    report_id?: string
    start_date: Date | string
    end_date: Date | string
    data: string
    created_at?: Date | string
  }

  export type ReportsUncheckedCreateWithoutGeneratedByUserInput = {
    report_id?: string
    start_date: Date | string
    end_date: Date | string
    data: string
    created_at?: Date | string
  }

  export type ReportsCreateOrConnectWithoutGeneratedByUserInput = {
    where: ReportsWhereUniqueInput
    create: XOR<ReportsCreateWithoutGeneratedByUserInput, ReportsUncheckedCreateWithoutGeneratedByUserInput>
  }

  export type ReportsCreateManyGeneratedByUserInputEnvelope = {
    data: ReportsCreateManyGeneratedByUserInput | ReportsCreateManyGeneratedByUserInput[]
  }

  export type OtpCreateWithoutUserInput = {
    otp_id?: string
    code: string
    expires_at: Date | string
    email: string
    created_at?: Date | string
  }

  export type OtpUncheckedCreateWithoutUserInput = {
    otp_id?: string
    code: string
    expires_at: Date | string
    email: string
    created_at?: Date | string
  }

  export type OtpCreateOrConnectWithoutUserInput = {
    where: OtpWhereUniqueInput
    create: XOR<OtpCreateWithoutUserInput, OtpUncheckedCreateWithoutUserInput>
  }

  export type OtpCreateManyUserInputEnvelope = {
    data: OtpCreateManyUserInput | OtpCreateManyUserInput[]
  }

  export type ResourceUpsertWithoutUsersInput = {
    update: XOR<ResourceUpdateWithoutUsersInput, ResourceUncheckedUpdateWithoutUsersInput>
    create: XOR<ResourceCreateWithoutUsersInput, ResourceUncheckedCreateWithoutUsersInput>
    where?: ResourceWhereInput
  }

  export type ResourceUpdateToOneWithWhereWithoutUsersInput = {
    where?: ResourceWhereInput
    data: XOR<ResourceUpdateWithoutUsersInput, ResourceUncheckedUpdateWithoutUsersInput>
  }

  export type ResourceUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    rate?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ResourceAllocations?: ResourceAllocationsUpdateManyWithoutResourceNestedInput
  }

  export type ResourceUncheckedUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    rate?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ResourceAllocations?: ResourceAllocationsUncheckedUpdateManyWithoutResourceNestedInput
  }

  export type ProjectUpsertWithWhereUniqueWithoutCreatedByUserInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutCreatedByUserInput, ProjectUncheckedUpdateWithoutCreatedByUserInput>
    create: XOR<ProjectCreateWithoutCreatedByUserInput, ProjectUncheckedCreateWithoutCreatedByUserInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutCreatedByUserInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutCreatedByUserInput, ProjectUncheckedUpdateWithoutCreatedByUserInput>
  }

  export type ProjectUpdateManyWithWhereWithoutCreatedByUserInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutCreatedByUserInput>
  }

  export type ProjectScalarWhereInput = {
    AND?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    OR?: ProjectScalarWhereInput[]
    NOT?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    project_id?: StringFilter<"Project"> | string
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    start_date?: DateTimeFilter<"Project"> | Date | string
    total_duration?: IntFilter<"Project"> | number
    total_cost?: FloatFilter<"Project"> | number
    status?: StringFilter<"Project"> | string
    manday?: FloatFilter<"Project"> | number
    created_by?: StringFilter<"Project"> | string
    created_at?: DateTimeFilter<"Project"> | Date | string
    updated_at?: DateTimeFilter<"Project"> | Date | string
  }

  export type ReportsUpsertWithWhereUniqueWithoutGeneratedByUserInput = {
    where: ReportsWhereUniqueInput
    update: XOR<ReportsUpdateWithoutGeneratedByUserInput, ReportsUncheckedUpdateWithoutGeneratedByUserInput>
    create: XOR<ReportsCreateWithoutGeneratedByUserInput, ReportsUncheckedCreateWithoutGeneratedByUserInput>
  }

  export type ReportsUpdateWithWhereUniqueWithoutGeneratedByUserInput = {
    where: ReportsWhereUniqueInput
    data: XOR<ReportsUpdateWithoutGeneratedByUserInput, ReportsUncheckedUpdateWithoutGeneratedByUserInput>
  }

  export type ReportsUpdateManyWithWhereWithoutGeneratedByUserInput = {
    where: ReportsScalarWhereInput
    data: XOR<ReportsUpdateManyMutationInput, ReportsUncheckedUpdateManyWithoutGeneratedByUserInput>
  }

  export type ReportsScalarWhereInput = {
    AND?: ReportsScalarWhereInput | ReportsScalarWhereInput[]
    OR?: ReportsScalarWhereInput[]
    NOT?: ReportsScalarWhereInput | ReportsScalarWhereInput[]
    report_id?: StringFilter<"Reports"> | string
    start_date?: DateTimeFilter<"Reports"> | Date | string
    end_date?: DateTimeFilter<"Reports"> | Date | string
    data?: StringFilter<"Reports"> | string
    generated_by?: StringFilter<"Reports"> | string
    created_at?: DateTimeFilter<"Reports"> | Date | string
  }

  export type OtpUpsertWithWhereUniqueWithoutUserInput = {
    where: OtpWhereUniqueInput
    update: XOR<OtpUpdateWithoutUserInput, OtpUncheckedUpdateWithoutUserInput>
    create: XOR<OtpCreateWithoutUserInput, OtpUncheckedCreateWithoutUserInput>
  }

  export type OtpUpdateWithWhereUniqueWithoutUserInput = {
    where: OtpWhereUniqueInput
    data: XOR<OtpUpdateWithoutUserInput, OtpUncheckedUpdateWithoutUserInput>
  }

  export type OtpUpdateManyWithWhereWithoutUserInput = {
    where: OtpScalarWhereInput
    data: XOR<OtpUpdateManyMutationInput, OtpUncheckedUpdateManyWithoutUserInput>
  }

  export type OtpScalarWhereInput = {
    AND?: OtpScalarWhereInput | OtpScalarWhereInput[]
    OR?: OtpScalarWhereInput[]
    NOT?: OtpScalarWhereInput | OtpScalarWhereInput[]
    otp_id?: StringFilter<"Otp"> | string
    code?: StringFilter<"Otp"> | string
    expires_at?: DateTimeFilter<"Otp"> | Date | string
    email?: StringFilter<"Otp"> | string
    user_id?: StringNullableFilter<"Otp"> | string | null
    created_at?: DateTimeFilter<"Otp"> | Date | string
  }

  export type UserCreateWithoutProjectsInput = {
    user_id?: string
    name: string
    email: string
    password: string
    profileImage?: string | null
    verified?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    refreshToken?: string | null
    accessToken?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    resource?: ResourceCreateNestedOneWithoutUsersInput
    reports?: ReportsCreateNestedManyWithoutGeneratedByUserInput
    otps?: OtpCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProjectsInput = {
    user_id?: string
    name: string
    email: string
    password: string
    role_id?: string | null
    profileImage?: string | null
    verified?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    refreshToken?: string | null
    accessToken?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    reports?: ReportsUncheckedCreateNestedManyWithoutGeneratedByUserInput
    otps?: OtpUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProjectsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
  }

  export type TaskCreateWithoutProjectInput = {
    task_id?: string
    name: string
    status: string
    workload: number
    duration: number
    cost: number
    updated_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    ResourceAllocations?: ResourceAllocationsCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutProjectInput = {
    task_id?: string
    name: string
    status: string
    workload: number
    duration: number
    cost: number
    updated_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    ResourceAllocations?: ResourceAllocationsUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutProjectInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput>
  }

  export type TaskCreateManyProjectInputEnvelope = {
    data: TaskCreateManyProjectInput | TaskCreateManyProjectInput[]
  }

  export type ResourceAllocationsCreateWithoutProjectInput = {
    allocation_id?: string
    allocation_percentage: number
    resource_hours: number
    created_at?: Date | string
    updated_at?: Date | string
    task: TaskCreateNestedOneWithoutResourceAllocationsInput
    resource: ResourceCreateNestedOneWithoutResourceAllocationsInput
  }

  export type ResourceAllocationsUncheckedCreateWithoutProjectInput = {
    allocation_id?: string
    resource_id: string
    task_id: string
    allocation_percentage: number
    resource_hours: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ResourceAllocationsCreateOrConnectWithoutProjectInput = {
    where: ResourceAllocationsWhereUniqueInput
    create: XOR<ResourceAllocationsCreateWithoutProjectInput, ResourceAllocationsUncheckedCreateWithoutProjectInput>
  }

  export type ResourceAllocationsCreateManyProjectInputEnvelope = {
    data: ResourceAllocationsCreateManyProjectInput | ResourceAllocationsCreateManyProjectInput[]
  }

  export type CostEstimationsCreateWithoutProjectInput = {
    cost_id?: string
    total_hours: number
    estimated_cost: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CostEstimationsUncheckedCreateWithoutProjectInput = {
    cost_id?: string
    total_hours: number
    estimated_cost: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CostEstimationsCreateOrConnectWithoutProjectInput = {
    where: CostEstimationsWhereUniqueInput
    create: XOR<CostEstimationsCreateWithoutProjectInput, CostEstimationsUncheckedCreateWithoutProjectInput>
  }

  export type CostEstimationsCreateManyProjectInputEnvelope = {
    data: CostEstimationsCreateManyProjectInput | CostEstimationsCreateManyProjectInput[]
  }

  export type DurationEstimationsCreateWithoutProjectInput = {
    duration_id?: string
    total_hours: number
    estimated_day: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type DurationEstimationsUncheckedCreateWithoutProjectInput = {
    duration_id?: string
    total_hours: number
    estimated_day: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type DurationEstimationsCreateOrConnectWithoutProjectInput = {
    where: DurationEstimationsWhereUniqueInput
    create: XOR<DurationEstimationsCreateWithoutProjectInput, DurationEstimationsUncheckedCreateWithoutProjectInput>
  }

  export type DurationEstimationsCreateManyProjectInputEnvelope = {
    data: DurationEstimationsCreateManyProjectInput | DurationEstimationsCreateManyProjectInput[]
  }

  export type UserUpsertWithoutProjectsInput = {
    update: XOR<UserUpdateWithoutProjectsInput, UserUncheckedUpdateWithoutProjectsInput>
    create: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProjectsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProjectsInput, UserUncheckedUpdateWithoutProjectsInput>
  }

  export type UserUpdateWithoutProjectsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resource?: ResourceUpdateOneWithoutUsersNestedInput
    reports?: ReportsUpdateManyWithoutGeneratedByUserNestedInput
    otps?: OtpUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProjectsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role_id?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reports?: ReportsUncheckedUpdateManyWithoutGeneratedByUserNestedInput
    otps?: OtpUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TaskUpsertWithWhereUniqueWithoutProjectInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutProjectInput, TaskUncheckedUpdateWithoutProjectInput>
    create: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutProjectInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutProjectInput, TaskUncheckedUpdateWithoutProjectInput>
  }

  export type TaskUpdateManyWithWhereWithoutProjectInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutProjectInput>
  }

  export type TaskScalarWhereInput = {
    AND?: TaskScalarWhereInput | TaskScalarWhereInput[]
    OR?: TaskScalarWhereInput[]
    NOT?: TaskScalarWhereInput | TaskScalarWhereInput[]
    task_id?: StringFilter<"Task"> | string
    name?: StringFilter<"Task"> | string
    status?: StringFilter<"Task"> | string
    workload?: FloatFilter<"Task"> | number
    duration?: FloatFilter<"Task"> | number
    cost?: FloatFilter<"Task"> | number
    project_id?: StringFilter<"Task"> | string
    updated_by?: StringNullableFilter<"Task"> | string | null
    created_at?: DateTimeFilter<"Task"> | Date | string
    updated_at?: DateTimeFilter<"Task"> | Date | string
  }

  export type ResourceAllocationsUpsertWithWhereUniqueWithoutProjectInput = {
    where: ResourceAllocationsWhereUniqueInput
    update: XOR<ResourceAllocationsUpdateWithoutProjectInput, ResourceAllocationsUncheckedUpdateWithoutProjectInput>
    create: XOR<ResourceAllocationsCreateWithoutProjectInput, ResourceAllocationsUncheckedCreateWithoutProjectInput>
  }

  export type ResourceAllocationsUpdateWithWhereUniqueWithoutProjectInput = {
    where: ResourceAllocationsWhereUniqueInput
    data: XOR<ResourceAllocationsUpdateWithoutProjectInput, ResourceAllocationsUncheckedUpdateWithoutProjectInput>
  }

  export type ResourceAllocationsUpdateManyWithWhereWithoutProjectInput = {
    where: ResourceAllocationsScalarWhereInput
    data: XOR<ResourceAllocationsUpdateManyMutationInput, ResourceAllocationsUncheckedUpdateManyWithoutProjectInput>
  }

  export type ResourceAllocationsScalarWhereInput = {
    AND?: ResourceAllocationsScalarWhereInput | ResourceAllocationsScalarWhereInput[]
    OR?: ResourceAllocationsScalarWhereInput[]
    NOT?: ResourceAllocationsScalarWhereInput | ResourceAllocationsScalarWhereInput[]
    allocation_id?: StringFilter<"ResourceAllocations"> | string
    resource_id?: StringFilter<"ResourceAllocations"> | string
    project_id?: StringFilter<"ResourceAllocations"> | string
    task_id?: StringFilter<"ResourceAllocations"> | string
    allocation_percentage?: FloatFilter<"ResourceAllocations"> | number
    resource_hours?: FloatFilter<"ResourceAllocations"> | number
    created_at?: DateTimeFilter<"ResourceAllocations"> | Date | string
    updated_at?: DateTimeFilter<"ResourceAllocations"> | Date | string
  }

  export type CostEstimationsUpsertWithWhereUniqueWithoutProjectInput = {
    where: CostEstimationsWhereUniqueInput
    update: XOR<CostEstimationsUpdateWithoutProjectInput, CostEstimationsUncheckedUpdateWithoutProjectInput>
    create: XOR<CostEstimationsCreateWithoutProjectInput, CostEstimationsUncheckedCreateWithoutProjectInput>
  }

  export type CostEstimationsUpdateWithWhereUniqueWithoutProjectInput = {
    where: CostEstimationsWhereUniqueInput
    data: XOR<CostEstimationsUpdateWithoutProjectInput, CostEstimationsUncheckedUpdateWithoutProjectInput>
  }

  export type CostEstimationsUpdateManyWithWhereWithoutProjectInput = {
    where: CostEstimationsScalarWhereInput
    data: XOR<CostEstimationsUpdateManyMutationInput, CostEstimationsUncheckedUpdateManyWithoutProjectInput>
  }

  export type CostEstimationsScalarWhereInput = {
    AND?: CostEstimationsScalarWhereInput | CostEstimationsScalarWhereInput[]
    OR?: CostEstimationsScalarWhereInput[]
    NOT?: CostEstimationsScalarWhereInput | CostEstimationsScalarWhereInput[]
    cost_id?: StringFilter<"CostEstimations"> | string
    project_id?: StringFilter<"CostEstimations"> | string
    total_hours?: FloatFilter<"CostEstimations"> | number
    estimated_cost?: FloatFilter<"CostEstimations"> | number
    created_at?: DateTimeFilter<"CostEstimations"> | Date | string
    updated_at?: DateTimeFilter<"CostEstimations"> | Date | string
  }

  export type DurationEstimationsUpsertWithWhereUniqueWithoutProjectInput = {
    where: DurationEstimationsWhereUniqueInput
    update: XOR<DurationEstimationsUpdateWithoutProjectInput, DurationEstimationsUncheckedUpdateWithoutProjectInput>
    create: XOR<DurationEstimationsCreateWithoutProjectInput, DurationEstimationsUncheckedCreateWithoutProjectInput>
  }

  export type DurationEstimationsUpdateWithWhereUniqueWithoutProjectInput = {
    where: DurationEstimationsWhereUniqueInput
    data: XOR<DurationEstimationsUpdateWithoutProjectInput, DurationEstimationsUncheckedUpdateWithoutProjectInput>
  }

  export type DurationEstimationsUpdateManyWithWhereWithoutProjectInput = {
    where: DurationEstimationsScalarWhereInput
    data: XOR<DurationEstimationsUpdateManyMutationInput, DurationEstimationsUncheckedUpdateManyWithoutProjectInput>
  }

  export type DurationEstimationsScalarWhereInput = {
    AND?: DurationEstimationsScalarWhereInput | DurationEstimationsScalarWhereInput[]
    OR?: DurationEstimationsScalarWhereInput[]
    NOT?: DurationEstimationsScalarWhereInput | DurationEstimationsScalarWhereInput[]
    duration_id?: StringFilter<"DurationEstimations"> | string
    project_id?: StringFilter<"DurationEstimations"> | string
    total_hours?: FloatFilter<"DurationEstimations"> | number
    estimated_day?: IntFilter<"DurationEstimations"> | number
    created_at?: DateTimeFilter<"DurationEstimations"> | Date | string
    updated_at?: DateTimeFilter<"DurationEstimations"> | Date | string
  }

  export type ProjectCreateWithoutTasksInput = {
    project_id?: string
    name: string
    description?: string | null
    start_date: Date | string
    total_duration: number
    total_cost: number
    status: string
    manday: number
    created_at?: Date | string
    updated_at?: Date | string
    createdByUser: UserCreateNestedOneWithoutProjectsInput
    ResourceAllocations?: ResourceAllocationsCreateNestedManyWithoutProjectInput
    CostEstimations?: CostEstimationsCreateNestedManyWithoutProjectInput
    DurationEstimations?: DurationEstimationsCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutTasksInput = {
    project_id?: string
    name: string
    description?: string | null
    start_date: Date | string
    total_duration: number
    total_cost: number
    status: string
    manday: number
    created_by: string
    created_at?: Date | string
    updated_at?: Date | string
    ResourceAllocations?: ResourceAllocationsUncheckedCreateNestedManyWithoutProjectInput
    CostEstimations?: CostEstimationsUncheckedCreateNestedManyWithoutProjectInput
    DurationEstimations?: DurationEstimationsUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutTasksInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutTasksInput, ProjectUncheckedCreateWithoutTasksInput>
  }

  export type ResourceAllocationsCreateWithoutTaskInput = {
    allocation_id?: string
    allocation_percentage: number
    resource_hours: number
    created_at?: Date | string
    updated_at?: Date | string
    project: ProjectCreateNestedOneWithoutResourceAllocationsInput
    resource: ResourceCreateNestedOneWithoutResourceAllocationsInput
  }

  export type ResourceAllocationsUncheckedCreateWithoutTaskInput = {
    allocation_id?: string
    resource_id: string
    project_id: string
    allocation_percentage: number
    resource_hours: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ResourceAllocationsCreateOrConnectWithoutTaskInput = {
    where: ResourceAllocationsWhereUniqueInput
    create: XOR<ResourceAllocationsCreateWithoutTaskInput, ResourceAllocationsUncheckedCreateWithoutTaskInput>
  }

  export type ResourceAllocationsCreateManyTaskInputEnvelope = {
    data: ResourceAllocationsCreateManyTaskInput | ResourceAllocationsCreateManyTaskInput[]
  }

  export type ProjectUpsertWithoutTasksInput = {
    update: XOR<ProjectUpdateWithoutTasksInput, ProjectUncheckedUpdateWithoutTasksInput>
    create: XOR<ProjectCreateWithoutTasksInput, ProjectUncheckedCreateWithoutTasksInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutTasksInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutTasksInput, ProjectUncheckedUpdateWithoutTasksInput>
  }

  export type ProjectUpdateWithoutTasksInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    total_duration?: IntFieldUpdateOperationsInput | number
    total_cost?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    manday?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByUser?: UserUpdateOneRequiredWithoutProjectsNestedInput
    ResourceAllocations?: ResourceAllocationsUpdateManyWithoutProjectNestedInput
    CostEstimations?: CostEstimationsUpdateManyWithoutProjectNestedInput
    DurationEstimations?: DurationEstimationsUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutTasksInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    total_duration?: IntFieldUpdateOperationsInput | number
    total_cost?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    manday?: FloatFieldUpdateOperationsInput | number
    created_by?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ResourceAllocations?: ResourceAllocationsUncheckedUpdateManyWithoutProjectNestedInput
    CostEstimations?: CostEstimationsUncheckedUpdateManyWithoutProjectNestedInput
    DurationEstimations?: DurationEstimationsUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ResourceAllocationsUpsertWithWhereUniqueWithoutTaskInput = {
    where: ResourceAllocationsWhereUniqueInput
    update: XOR<ResourceAllocationsUpdateWithoutTaskInput, ResourceAllocationsUncheckedUpdateWithoutTaskInput>
    create: XOR<ResourceAllocationsCreateWithoutTaskInput, ResourceAllocationsUncheckedCreateWithoutTaskInput>
  }

  export type ResourceAllocationsUpdateWithWhereUniqueWithoutTaskInput = {
    where: ResourceAllocationsWhereUniqueInput
    data: XOR<ResourceAllocationsUpdateWithoutTaskInput, ResourceAllocationsUncheckedUpdateWithoutTaskInput>
  }

  export type ResourceAllocationsUpdateManyWithWhereWithoutTaskInput = {
    where: ResourceAllocationsScalarWhereInput
    data: XOR<ResourceAllocationsUpdateManyMutationInput, ResourceAllocationsUncheckedUpdateManyWithoutTaskInput>
  }

  export type UserCreateWithoutResourceInput = {
    user_id?: string
    name: string
    email: string
    password: string
    profileImage?: string | null
    verified?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    refreshToken?: string | null
    accessToken?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    projects?: ProjectCreateNestedManyWithoutCreatedByUserInput
    reports?: ReportsCreateNestedManyWithoutGeneratedByUserInput
    otps?: OtpCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutResourceInput = {
    user_id?: string
    name: string
    email: string
    password: string
    profileImage?: string | null
    verified?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    refreshToken?: string | null
    accessToken?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    projects?: ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    reports?: ReportsUncheckedCreateNestedManyWithoutGeneratedByUserInput
    otps?: OtpUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutResourceInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutResourceInput, UserUncheckedCreateWithoutResourceInput>
  }

  export type UserCreateManyResourceInputEnvelope = {
    data: UserCreateManyResourceInput | UserCreateManyResourceInput[]
  }

  export type ResourceAllocationsCreateWithoutResourceInput = {
    allocation_id?: string
    allocation_percentage: number
    resource_hours: number
    created_at?: Date | string
    updated_at?: Date | string
    task: TaskCreateNestedOneWithoutResourceAllocationsInput
    project: ProjectCreateNestedOneWithoutResourceAllocationsInput
  }

  export type ResourceAllocationsUncheckedCreateWithoutResourceInput = {
    allocation_id?: string
    project_id: string
    task_id: string
    allocation_percentage: number
    resource_hours: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ResourceAllocationsCreateOrConnectWithoutResourceInput = {
    where: ResourceAllocationsWhereUniqueInput
    create: XOR<ResourceAllocationsCreateWithoutResourceInput, ResourceAllocationsUncheckedCreateWithoutResourceInput>
  }

  export type ResourceAllocationsCreateManyResourceInputEnvelope = {
    data: ResourceAllocationsCreateManyResourceInput | ResourceAllocationsCreateManyResourceInput[]
  }

  export type UserUpsertWithWhereUniqueWithoutResourceInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutResourceInput, UserUncheckedUpdateWithoutResourceInput>
    create: XOR<UserCreateWithoutResourceInput, UserUncheckedCreateWithoutResourceInput>
  }

  export type UserUpdateWithWhereUniqueWithoutResourceInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutResourceInput, UserUncheckedUpdateWithoutResourceInput>
  }

  export type UserUpdateManyWithWhereWithoutResourceInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutResourceInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    user_id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role_id?: StringNullableFilter<"User"> | string | null
    profileImage?: StringNullableFilter<"User"> | string | null
    verified?: BoolFilter<"User"> | boolean
    created_at?: DateTimeFilter<"User"> | Date | string
    updated_at?: DateTimeFilter<"User"> | Date | string
    refreshToken?: StringNullableFilter<"User"> | string | null
    accessToken?: StringNullableFilter<"User"> | string | null
    resetToken?: StringNullableFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
  }

  export type ResourceAllocationsUpsertWithWhereUniqueWithoutResourceInput = {
    where: ResourceAllocationsWhereUniqueInput
    update: XOR<ResourceAllocationsUpdateWithoutResourceInput, ResourceAllocationsUncheckedUpdateWithoutResourceInput>
    create: XOR<ResourceAllocationsCreateWithoutResourceInput, ResourceAllocationsUncheckedCreateWithoutResourceInput>
  }

  export type ResourceAllocationsUpdateWithWhereUniqueWithoutResourceInput = {
    where: ResourceAllocationsWhereUniqueInput
    data: XOR<ResourceAllocationsUpdateWithoutResourceInput, ResourceAllocationsUncheckedUpdateWithoutResourceInput>
  }

  export type ResourceAllocationsUpdateManyWithWhereWithoutResourceInput = {
    where: ResourceAllocationsScalarWhereInput
    data: XOR<ResourceAllocationsUpdateManyMutationInput, ResourceAllocationsUncheckedUpdateManyWithoutResourceInput>
  }

  export type TaskCreateWithoutResourceAllocationsInput = {
    task_id?: string
    name: string
    status: string
    workload: number
    duration: number
    cost: number
    updated_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    project: ProjectCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateWithoutResourceAllocationsInput = {
    task_id?: string
    name: string
    status: string
    workload: number
    duration: number
    cost: number
    project_id: string
    updated_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TaskCreateOrConnectWithoutResourceAllocationsInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutResourceAllocationsInput, TaskUncheckedCreateWithoutResourceAllocationsInput>
  }

  export type ProjectCreateWithoutResourceAllocationsInput = {
    project_id?: string
    name: string
    description?: string | null
    start_date: Date | string
    total_duration: number
    total_cost: number
    status: string
    manday: number
    created_at?: Date | string
    updated_at?: Date | string
    createdByUser: UserCreateNestedOneWithoutProjectsInput
    tasks?: TaskCreateNestedManyWithoutProjectInput
    CostEstimations?: CostEstimationsCreateNestedManyWithoutProjectInput
    DurationEstimations?: DurationEstimationsCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutResourceAllocationsInput = {
    project_id?: string
    name: string
    description?: string | null
    start_date: Date | string
    total_duration: number
    total_cost: number
    status: string
    manday: number
    created_by: string
    created_at?: Date | string
    updated_at?: Date | string
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    CostEstimations?: CostEstimationsUncheckedCreateNestedManyWithoutProjectInput
    DurationEstimations?: DurationEstimationsUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutResourceAllocationsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutResourceAllocationsInput, ProjectUncheckedCreateWithoutResourceAllocationsInput>
  }

  export type ResourceCreateWithoutResourceAllocationsInput = {
    resource_id?: string
    name: string
    rate: number
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    users?: UserCreateNestedManyWithoutResourceInput
  }

  export type ResourceUncheckedCreateWithoutResourceAllocationsInput = {
    resource_id?: string
    name: string
    rate: number
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutResourceInput
  }

  export type ResourceCreateOrConnectWithoutResourceAllocationsInput = {
    where: ResourceWhereUniqueInput
    create: XOR<ResourceCreateWithoutResourceAllocationsInput, ResourceUncheckedCreateWithoutResourceAllocationsInput>
  }

  export type TaskUpsertWithoutResourceAllocationsInput = {
    update: XOR<TaskUpdateWithoutResourceAllocationsInput, TaskUncheckedUpdateWithoutResourceAllocationsInput>
    create: XOR<TaskCreateWithoutResourceAllocationsInput, TaskUncheckedCreateWithoutResourceAllocationsInput>
    where?: TaskWhereInput
  }

  export type TaskUpdateToOneWithWhereWithoutResourceAllocationsInput = {
    where?: TaskWhereInput
    data: XOR<TaskUpdateWithoutResourceAllocationsInput, TaskUncheckedUpdateWithoutResourceAllocationsInput>
  }

  export type TaskUpdateWithoutResourceAllocationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    workload?: FloatFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateWithoutResourceAllocationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    workload?: FloatFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    project_id?: StringFieldUpdateOperationsInput | string
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUpsertWithoutResourceAllocationsInput = {
    update: XOR<ProjectUpdateWithoutResourceAllocationsInput, ProjectUncheckedUpdateWithoutResourceAllocationsInput>
    create: XOR<ProjectCreateWithoutResourceAllocationsInput, ProjectUncheckedCreateWithoutResourceAllocationsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutResourceAllocationsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutResourceAllocationsInput, ProjectUncheckedUpdateWithoutResourceAllocationsInput>
  }

  export type ProjectUpdateWithoutResourceAllocationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    total_duration?: IntFieldUpdateOperationsInput | number
    total_cost?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    manday?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByUser?: UserUpdateOneRequiredWithoutProjectsNestedInput
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    CostEstimations?: CostEstimationsUpdateManyWithoutProjectNestedInput
    DurationEstimations?: DurationEstimationsUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutResourceAllocationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    total_duration?: IntFieldUpdateOperationsInput | number
    total_cost?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    manday?: FloatFieldUpdateOperationsInput | number
    created_by?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    CostEstimations?: CostEstimationsUncheckedUpdateManyWithoutProjectNestedInput
    DurationEstimations?: DurationEstimationsUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ResourceUpsertWithoutResourceAllocationsInput = {
    update: XOR<ResourceUpdateWithoutResourceAllocationsInput, ResourceUncheckedUpdateWithoutResourceAllocationsInput>
    create: XOR<ResourceCreateWithoutResourceAllocationsInput, ResourceUncheckedCreateWithoutResourceAllocationsInput>
    where?: ResourceWhereInput
  }

  export type ResourceUpdateToOneWithWhereWithoutResourceAllocationsInput = {
    where?: ResourceWhereInput
    data: XOR<ResourceUpdateWithoutResourceAllocationsInput, ResourceUncheckedUpdateWithoutResourceAllocationsInput>
  }

  export type ResourceUpdateWithoutResourceAllocationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    rate?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutResourceNestedInput
  }

  export type ResourceUncheckedUpdateWithoutResourceAllocationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    rate?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutResourceNestedInput
  }

  export type UserCreateWithoutReportsInput = {
    user_id?: string
    name: string
    email: string
    password: string
    profileImage?: string | null
    verified?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    refreshToken?: string | null
    accessToken?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    resource?: ResourceCreateNestedOneWithoutUsersInput
    projects?: ProjectCreateNestedManyWithoutCreatedByUserInput
    otps?: OtpCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReportsInput = {
    user_id?: string
    name: string
    email: string
    password: string
    role_id?: string | null
    profileImage?: string | null
    verified?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    refreshToken?: string | null
    accessToken?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    projects?: ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    otps?: OtpUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReportsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
  }

  export type UserUpsertWithoutReportsInput = {
    update: XOR<UserUpdateWithoutReportsInput, UserUncheckedUpdateWithoutReportsInput>
    create: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReportsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReportsInput, UserUncheckedUpdateWithoutReportsInput>
  }

  export type UserUpdateWithoutReportsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resource?: ResourceUpdateOneWithoutUsersNestedInput
    projects?: ProjectUpdateManyWithoutCreatedByUserNestedInput
    otps?: OtpUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReportsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role_id?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    projects?: ProjectUncheckedUpdateManyWithoutCreatedByUserNestedInput
    otps?: OtpUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProjectCreateWithoutCostEstimationsInput = {
    project_id?: string
    name: string
    description?: string | null
    start_date: Date | string
    total_duration: number
    total_cost: number
    status: string
    manday: number
    created_at?: Date | string
    updated_at?: Date | string
    createdByUser: UserCreateNestedOneWithoutProjectsInput
    tasks?: TaskCreateNestedManyWithoutProjectInput
    ResourceAllocations?: ResourceAllocationsCreateNestedManyWithoutProjectInput
    DurationEstimations?: DurationEstimationsCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutCostEstimationsInput = {
    project_id?: string
    name: string
    description?: string | null
    start_date: Date | string
    total_duration: number
    total_cost: number
    status: string
    manday: number
    created_by: string
    created_at?: Date | string
    updated_at?: Date | string
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    ResourceAllocations?: ResourceAllocationsUncheckedCreateNestedManyWithoutProjectInput
    DurationEstimations?: DurationEstimationsUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutCostEstimationsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutCostEstimationsInput, ProjectUncheckedCreateWithoutCostEstimationsInput>
  }

  export type ProjectUpsertWithoutCostEstimationsInput = {
    update: XOR<ProjectUpdateWithoutCostEstimationsInput, ProjectUncheckedUpdateWithoutCostEstimationsInput>
    create: XOR<ProjectCreateWithoutCostEstimationsInput, ProjectUncheckedCreateWithoutCostEstimationsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutCostEstimationsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutCostEstimationsInput, ProjectUncheckedUpdateWithoutCostEstimationsInput>
  }

  export type ProjectUpdateWithoutCostEstimationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    total_duration?: IntFieldUpdateOperationsInput | number
    total_cost?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    manday?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByUser?: UserUpdateOneRequiredWithoutProjectsNestedInput
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    ResourceAllocations?: ResourceAllocationsUpdateManyWithoutProjectNestedInput
    DurationEstimations?: DurationEstimationsUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutCostEstimationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    total_duration?: IntFieldUpdateOperationsInput | number
    total_cost?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    manday?: FloatFieldUpdateOperationsInput | number
    created_by?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    ResourceAllocations?: ResourceAllocationsUncheckedUpdateManyWithoutProjectNestedInput
    DurationEstimations?: DurationEstimationsUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateWithoutDurationEstimationsInput = {
    project_id?: string
    name: string
    description?: string | null
    start_date: Date | string
    total_duration: number
    total_cost: number
    status: string
    manday: number
    created_at?: Date | string
    updated_at?: Date | string
    createdByUser: UserCreateNestedOneWithoutProjectsInput
    tasks?: TaskCreateNestedManyWithoutProjectInput
    ResourceAllocations?: ResourceAllocationsCreateNestedManyWithoutProjectInput
    CostEstimations?: CostEstimationsCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutDurationEstimationsInput = {
    project_id?: string
    name: string
    description?: string | null
    start_date: Date | string
    total_duration: number
    total_cost: number
    status: string
    manday: number
    created_by: string
    created_at?: Date | string
    updated_at?: Date | string
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    ResourceAllocations?: ResourceAllocationsUncheckedCreateNestedManyWithoutProjectInput
    CostEstimations?: CostEstimationsUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutDurationEstimationsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutDurationEstimationsInput, ProjectUncheckedCreateWithoutDurationEstimationsInput>
  }

  export type ProjectUpsertWithoutDurationEstimationsInput = {
    update: XOR<ProjectUpdateWithoutDurationEstimationsInput, ProjectUncheckedUpdateWithoutDurationEstimationsInput>
    create: XOR<ProjectCreateWithoutDurationEstimationsInput, ProjectUncheckedCreateWithoutDurationEstimationsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutDurationEstimationsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutDurationEstimationsInput, ProjectUncheckedUpdateWithoutDurationEstimationsInput>
  }

  export type ProjectUpdateWithoutDurationEstimationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    total_duration?: IntFieldUpdateOperationsInput | number
    total_cost?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    manday?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByUser?: UserUpdateOneRequiredWithoutProjectsNestedInput
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    ResourceAllocations?: ResourceAllocationsUpdateManyWithoutProjectNestedInput
    CostEstimations?: CostEstimationsUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutDurationEstimationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    total_duration?: IntFieldUpdateOperationsInput | number
    total_cost?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    manday?: FloatFieldUpdateOperationsInput | number
    created_by?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    ResourceAllocations?: ResourceAllocationsUncheckedUpdateManyWithoutProjectNestedInput
    CostEstimations?: CostEstimationsUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type UserCreateWithoutOtpsInput = {
    user_id?: string
    name: string
    email: string
    password: string
    profileImage?: string | null
    verified?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    refreshToken?: string | null
    accessToken?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    resource?: ResourceCreateNestedOneWithoutUsersInput
    projects?: ProjectCreateNestedManyWithoutCreatedByUserInput
    reports?: ReportsCreateNestedManyWithoutGeneratedByUserInput
  }

  export type UserUncheckedCreateWithoutOtpsInput = {
    user_id?: string
    name: string
    email: string
    password: string
    role_id?: string | null
    profileImage?: string | null
    verified?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    refreshToken?: string | null
    accessToken?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    projects?: ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    reports?: ReportsUncheckedCreateNestedManyWithoutGeneratedByUserInput
  }

  export type UserCreateOrConnectWithoutOtpsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOtpsInput, UserUncheckedCreateWithoutOtpsInput>
  }

  export type UserUpsertWithoutOtpsInput = {
    update: XOR<UserUpdateWithoutOtpsInput, UserUncheckedUpdateWithoutOtpsInput>
    create: XOR<UserCreateWithoutOtpsInput, UserUncheckedCreateWithoutOtpsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOtpsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOtpsInput, UserUncheckedUpdateWithoutOtpsInput>
  }

  export type UserUpdateWithoutOtpsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resource?: ResourceUpdateOneWithoutUsersNestedInput
    projects?: ProjectUpdateManyWithoutCreatedByUserNestedInput
    reports?: ReportsUpdateManyWithoutGeneratedByUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOtpsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role_id?: NullableStringFieldUpdateOperationsInput | string | null
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    projects?: ProjectUncheckedUpdateManyWithoutCreatedByUserNestedInput
    reports?: ReportsUncheckedUpdateManyWithoutGeneratedByUserNestedInput
  }

  export type ProjectCreateManyCreatedByUserInput = {
    project_id?: string
    name: string
    description?: string | null
    start_date: Date | string
    total_duration: number
    total_cost: number
    status: string
    manday: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ReportsCreateManyGeneratedByUserInput = {
    report_id?: string
    start_date: Date | string
    end_date: Date | string
    data: string
    created_at?: Date | string
  }

  export type OtpCreateManyUserInput = {
    otp_id?: string
    code: string
    expires_at: Date | string
    email: string
    created_at?: Date | string
  }

  export type ProjectUpdateWithoutCreatedByUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    total_duration?: IntFieldUpdateOperationsInput | number
    total_cost?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    manday?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    ResourceAllocations?: ResourceAllocationsUpdateManyWithoutProjectNestedInput
    CostEstimations?: CostEstimationsUpdateManyWithoutProjectNestedInput
    DurationEstimations?: DurationEstimationsUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutCreatedByUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    total_duration?: IntFieldUpdateOperationsInput | number
    total_cost?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    manday?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    ResourceAllocations?: ResourceAllocationsUncheckedUpdateManyWithoutProjectNestedInput
    CostEstimations?: CostEstimationsUncheckedUpdateManyWithoutProjectNestedInput
    DurationEstimations?: DurationEstimationsUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutCreatedByUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    total_duration?: IntFieldUpdateOperationsInput | number
    total_cost?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    manday?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportsUpdateWithoutGeneratedByUserInput = {
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportsUncheckedUpdateWithoutGeneratedByUserInput = {
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportsUncheckedUpdateManyWithoutGeneratedByUserInput = {
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpUpdateWithoutUserInput = {
    code?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpUncheckedUpdateWithoutUserInput = {
    code?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpUncheckedUpdateManyWithoutUserInput = {
    code?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskCreateManyProjectInput = {
    task_id?: string
    name: string
    status: string
    workload: number
    duration: number
    cost: number
    updated_by?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ResourceAllocationsCreateManyProjectInput = {
    allocation_id?: string
    resource_id: string
    task_id: string
    allocation_percentage: number
    resource_hours: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CostEstimationsCreateManyProjectInput = {
    cost_id?: string
    total_hours: number
    estimated_cost: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type DurationEstimationsCreateManyProjectInput = {
    duration_id?: string
    total_hours: number
    estimated_day: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type TaskUpdateWithoutProjectInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    workload?: FloatFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ResourceAllocations?: ResourceAllocationsUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutProjectInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    workload?: FloatFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ResourceAllocations?: ResourceAllocationsUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateManyWithoutProjectInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    workload?: FloatFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    updated_by?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResourceAllocationsUpdateWithoutProjectInput = {
    allocation_percentage?: FloatFieldUpdateOperationsInput | number
    resource_hours?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: TaskUpdateOneRequiredWithoutResourceAllocationsNestedInput
    resource?: ResourceUpdateOneRequiredWithoutResourceAllocationsNestedInput
  }

  export type ResourceAllocationsUncheckedUpdateWithoutProjectInput = {
    resource_id?: StringFieldUpdateOperationsInput | string
    task_id?: StringFieldUpdateOperationsInput | string
    allocation_percentage?: FloatFieldUpdateOperationsInput | number
    resource_hours?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResourceAllocationsUncheckedUpdateManyWithoutProjectInput = {
    resource_id?: StringFieldUpdateOperationsInput | string
    task_id?: StringFieldUpdateOperationsInput | string
    allocation_percentage?: FloatFieldUpdateOperationsInput | number
    resource_hours?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CostEstimationsUpdateWithoutProjectInput = {
    total_hours?: FloatFieldUpdateOperationsInput | number
    estimated_cost?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CostEstimationsUncheckedUpdateWithoutProjectInput = {
    total_hours?: FloatFieldUpdateOperationsInput | number
    estimated_cost?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CostEstimationsUncheckedUpdateManyWithoutProjectInput = {
    total_hours?: FloatFieldUpdateOperationsInput | number
    estimated_cost?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DurationEstimationsUpdateWithoutProjectInput = {
    total_hours?: FloatFieldUpdateOperationsInput | number
    estimated_day?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DurationEstimationsUncheckedUpdateWithoutProjectInput = {
    total_hours?: FloatFieldUpdateOperationsInput | number
    estimated_day?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DurationEstimationsUncheckedUpdateManyWithoutProjectInput = {
    total_hours?: FloatFieldUpdateOperationsInput | number
    estimated_day?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResourceAllocationsCreateManyTaskInput = {
    allocation_id?: string
    resource_id: string
    project_id: string
    allocation_percentage: number
    resource_hours: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ResourceAllocationsUpdateWithoutTaskInput = {
    allocation_percentage?: FloatFieldUpdateOperationsInput | number
    resource_hours?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutResourceAllocationsNestedInput
    resource?: ResourceUpdateOneRequiredWithoutResourceAllocationsNestedInput
  }

  export type ResourceAllocationsUncheckedUpdateWithoutTaskInput = {
    resource_id?: StringFieldUpdateOperationsInput | string
    project_id?: StringFieldUpdateOperationsInput | string
    allocation_percentage?: FloatFieldUpdateOperationsInput | number
    resource_hours?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResourceAllocationsUncheckedUpdateManyWithoutTaskInput = {
    resource_id?: StringFieldUpdateOperationsInput | string
    project_id?: StringFieldUpdateOperationsInput | string
    allocation_percentage?: FloatFieldUpdateOperationsInput | number
    resource_hours?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyResourceInput = {
    user_id?: string
    name: string
    email: string
    password: string
    profileImage?: string | null
    verified?: boolean
    created_at?: Date | string
    updated_at?: Date | string
    refreshToken?: string | null
    accessToken?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
  }

  export type ResourceAllocationsCreateManyResourceInput = {
    allocation_id?: string
    project_id: string
    task_id: string
    allocation_percentage: number
    resource_hours: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserUpdateWithoutResourceInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    projects?: ProjectUpdateManyWithoutCreatedByUserNestedInput
    reports?: ReportsUpdateManyWithoutGeneratedByUserNestedInput
    otps?: OtpUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutResourceInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    projects?: ProjectUncheckedUpdateManyWithoutCreatedByUserNestedInput
    reports?: ReportsUncheckedUpdateManyWithoutGeneratedByUserNestedInput
    otps?: OtpUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutResourceInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ResourceAllocationsUpdateWithoutResourceInput = {
    allocation_percentage?: FloatFieldUpdateOperationsInput | number
    resource_hours?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: TaskUpdateOneRequiredWithoutResourceAllocationsNestedInput
    project?: ProjectUpdateOneRequiredWithoutResourceAllocationsNestedInput
  }

  export type ResourceAllocationsUncheckedUpdateWithoutResourceInput = {
    project_id?: StringFieldUpdateOperationsInput | string
    task_id?: StringFieldUpdateOperationsInput | string
    allocation_percentage?: FloatFieldUpdateOperationsInput | number
    resource_hours?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResourceAllocationsUncheckedUpdateManyWithoutResourceInput = {
    project_id?: StringFieldUpdateOperationsInput | string
    task_id?: StringFieldUpdateOperationsInput | string
    allocation_percentage?: FloatFieldUpdateOperationsInput | number
    resource_hours?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectCountOutputTypeDefaultArgs instead
     */
    export type ProjectCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TaskCountOutputTypeDefaultArgs instead
     */
    export type TaskCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TaskCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ResourceCountOutputTypeDefaultArgs instead
     */
    export type ResourceCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ResourceCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectDefaultArgs instead
     */
    export type ProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TaskDefaultArgs instead
     */
    export type TaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TaskDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ResourceDefaultArgs instead
     */
    export type ResourceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ResourceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ResourceAllocationsDefaultArgs instead
     */
    export type ResourceAllocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ResourceAllocationsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReportsDefaultArgs instead
     */
    export type ReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReportsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CostEstimationsDefaultArgs instead
     */
    export type CostEstimationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CostEstimationsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DurationEstimationsDefaultArgs instead
     */
    export type DurationEstimationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DurationEstimationsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OtpDefaultArgs instead
     */
    export type OtpArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OtpDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}